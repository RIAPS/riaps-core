//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#ifndef RIAPS_FW_TSCA_H
#define RIAPS_FW_TSCA_H

#include "TscaBase.h"

namespace tsyncca {
   namespace components {
      
      class Tsca : public TscaBase {
         
         public:
         
         Tsca(_component_conf &config, riaps::Actor &actor);
         
         virtual void OnClock(riaps::ports::PortBase *port);
         
         void OnGroupMessage(const riaps::groups::GroupId& groupId, capnp::FlatArrayMessageReader& capnpreader, riaps::ports::PortBase* port);
         void OnAnnounce(const riaps::groups::GroupId& groupId, const std::string& proposeId, bool accepted);

         void OnActionPropose (riaps::groups::GroupId& groupId,
                               const std::string& proposeId,
                               const std::string& actionId,
                               const timespec& timePoint);

         virtual ~Tsca();

      private:
          bool m_hasJoined;

          std::unordered_map<std::string, std::function<void()>> m_actions;

          void ActionA();

          std::unordered_map<std::string, timespec> m_accepted;
         
      };
   }
}

extern "C" riaps::ComponentBase* create_component(_component_conf&, riaps::Actor& actor);
extern "C" void destroy_component(riaps::ComponentBase*);


#endif //RIAPS_FW_TSCA_H
