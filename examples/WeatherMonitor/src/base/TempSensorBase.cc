//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#include <base/TempSensorBase.h>

namespace weathermonitor {
    namespace components {
    	
    	TempSensorBase::TempSensorBase(const py::object *parent_actor,
									   const py::dict    actor_spec, // Actor json config
									   const py::dict    type_spec,  // component json config
									   const std::string &name,
									   const std::string &type_name,
									   const py::dict    args,
									   const std::string &application_name,
									   const std::string &actor_name) {
			auto conf = PyConfigConverter::convert(type_spec, actor_spec);
			conf.component_name = name;
			conf.component_type = type_name;
			conf.isDevice=false;
			set_config(conf);
    	}
    	
    	void TempSensorBase::DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port) {
			std::cout << "TempSensorBase::DispatchMessage()" << std::endl;
    		auto portName = port->GetPortName();
			if (portName == PORT_TIMER_CLOCK) {
				OnClock(port);
			}
			
			
    	}
    	
    	bool TempSensorBase::SendReady(capnp::MallocMessageBuilder &messageBuilder, messages::TempData::Builder &message) {
    		std::cout<< "TempSensorBase::SendReady()"<< std::endl;
    	    return SendMessageOnPort(messageBuilder, PORT_PUB_READY);
    	}
    	
    	TempSensorBase::~TempSensorBase() {
    	
    	}
    }
}	
