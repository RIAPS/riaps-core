//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#include <base/TempMonitorBase.h>
#include <componentmodel/r_pyconfigconverter.h>

namespace weathermonitor {
    namespace components {
    	
    	TempMonitorBase::TempMonitorBase(const py::object *parent_actor,
										 const py::dict    actor_spec, // Actor json config
										 const py::dict    type_spec,  // component json config
										 const std::string &name,
										 const std::string &type_name,
										 const py::dict    args,
										 const std::string &application_name,
										 const std::string &actor_name) : ComponentBase(application_name, actor_name) {
			auto conf = PyConfigConverter::convert(type_spec, actor_spec);
			conf.component_name = name;
			conf.component_type = type_name;
			conf.isDevice=false;
			set_config(conf);
    	}
    	
    	void TempMonitorBase::DispatchMessage(capnp::FlatArrayMessageReader* capnpreader,
											  riaps::ports::PortBase *port,
											  std::shared_ptr<riaps::MessageParams> params) {
    		auto portName = port->GetPortName();
			if (portName == PORT_SUB_TEMPUPDATE) {
				messages::TempData::Reader Tempupdate = capnpreader->getRoot<messages::TempData>();
				OnTempupdate(Tempupdate, port);
			}
			
    	}


		void TempMonitorBase::DispatchInsideMessage(zmsg_t *zmsg, riaps::ports::PortBase *port) {

		}
    }
}	
