// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: disco.capnp

#ifndef CAPNP_INCLUDED_86bbe73a97ada7d3_
#define CAPNP_INCLUDED_86bbe73a97ada7d3_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b299783eb3bc0793);
enum class Status_b299783eb3bc0793: uint16_t {
  OK,
  ERR,
};
CAPNP_DECLARE_ENUM(Status, b299783eb3bc0793);
CAPNP_DECLARE_SCHEMA(df7c62d78cc0ee2a);
enum class Kind_df7c62d78cc0ee2a: uint16_t {
  NONE,
  PUB,
  SUB,
  CLT,
  SRV,
  REQ,
  REP,
};
CAPNP_DECLARE_ENUM(Kind, df7c62d78cc0ee2a);
CAPNP_DECLARE_SCHEMA(92225aadb8d704a6);
enum class Scope_92225aadb8d704a6: uint16_t {
  NONE,
  GLOBAL,
  LOCAL,
};
CAPNP_DECLARE_ENUM(Scope, 92225aadb8d704a6);
CAPNP_DECLARE_SCHEMA(8b33c3d71493aa7e);
CAPNP_DECLARE_SCHEMA(8a4ac5818ef6840a);
CAPNP_DECLARE_SCHEMA(f0ada0a8407a1dfc);
CAPNP_DECLARE_SCHEMA(bdabc8092ffdc630);
CAPNP_DECLARE_SCHEMA(84b21f978b1fdf49);
CAPNP_DECLARE_SCHEMA(c448d0f61a137ce6);
CAPNP_DECLARE_SCHEMA(d19aca0c3c774262);
CAPNP_DECLARE_SCHEMA(ded1e5c2e92062b0);
CAPNP_DECLARE_SCHEMA(8976e48f2d7f8f36);
CAPNP_DECLARE_SCHEMA(dd7d98d2d2d81406);
CAPNP_DECLARE_SCHEMA(cbc342ab58d149c5);
CAPNP_DECLARE_SCHEMA(e0b61d43b0aaea51);
CAPNP_DECLARE_SCHEMA(c5c00415475f9f91);
CAPNP_DECLARE_SCHEMA(bb3e73b2a350ce4e);
CAPNP_DECLARE_SCHEMA(df60e0f885b07faa);
CAPNP_DECLARE_SCHEMA(eaf54029bfb3e6dc);
CAPNP_DECLARE_SCHEMA(f438def63208f58b);

}  // namespace schemas
}  // namespace capnp

namespace riaps {
namespace discovery {

typedef ::capnp::schemas::Status_b299783eb3bc0793 Status;

typedef ::capnp::schemas::Kind_df7c62d78cc0ee2a Kind;

typedef ::capnp::schemas::Scope_92225aadb8d704a6 Scope;

struct ActorRegReq {
  ActorRegReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8b33c3d71493aa7e, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ActorRegRep {
  ActorRegRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8a4ac5818ef6840a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ActorUnregReq {
  ActorUnregReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0ada0a8407a1dfc, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ActorUnregRep {
  ActorUnregRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bdabc8092ffdc630, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Path {
  Path() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(84b21f978b1fdf49, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Client {
  Client() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c448d0f61a137ce6, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Socket {
  Socket() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d19aca0c3c774262, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ServiceRegReq {
  ServiceRegReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ded1e5c2e92062b0, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ServiceRegRep {
  ServiceRegRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8976e48f2d7f8f36, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ServiceLookupReq {
  ServiceLookupReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dd7d98d2d2d81406, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ServiceLookupRep {
  ServiceLookupRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbc342ab58d149c5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DiscoUpd {
  DiscoUpd() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e0b61d43b0aaea51, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DiscoReq {
  DiscoReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACTOR_REG,
    SERVICE_REG,
    SERVICE_LOOKUP,
    ACTOR_UNREG,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c5c00415475f9f91, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DiscoRep {
  DiscoRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACTOR_REG,
    SERVICE_REG,
    SERVICE_LOOKUP,
    ACTOR_UNREG,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb3e73b2a350ce4e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ProviderListUpdate {
  ProviderListUpdate() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(df60e0f885b07faa, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ProviderListGet {
  ProviderListGet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eaf54029bfb3e6dc, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ProviderListPush {
  ProviderListPush() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    PROVIDER_UPDATE,
    PROVIDER_GET,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f438def63208f58b, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ActorRegReq::Reader {
public:
  typedef ActorRegReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppName() const;
  inline  ::capnp::Text::Reader getAppName() const;

  inline bool hasVersion() const;
  inline  ::capnp::Text::Reader getVersion() const;

  inline bool hasActorName() const;
  inline  ::capnp::Text::Reader getActorName() const;

  inline  ::int32_t getPid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorRegReq::Builder {
public:
  typedef ActorRegReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppName();
  inline  ::capnp::Text::Builder getAppName();
  inline void setAppName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppName(unsigned int size);
  inline void adoptAppName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppName();

  inline bool hasVersion();
  inline  ::capnp::Text::Builder getVersion();
  inline void setVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersion(unsigned int size);
  inline void adoptVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersion();

  inline bool hasActorName();
  inline  ::capnp::Text::Builder getActorName();
  inline void setActorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initActorName(unsigned int size);
  inline void adoptActorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownActorName();

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorRegReq::Pipeline {
public:
  typedef ActorRegReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActorRegRep::Reader {
public:
  typedef ActorRegRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::riaps::discovery::Status getStatus() const;

  inline  ::int32_t getPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorRegRep::Builder {
public:
  typedef ActorRegRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::riaps::discovery::Status getStatus();
  inline void setStatus( ::riaps::discovery::Status value);

  inline  ::int32_t getPort();
  inline void setPort( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorRegRep::Pipeline {
public:
  typedef ActorRegRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActorUnregReq::Reader {
public:
  typedef ActorUnregReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppName() const;
  inline  ::capnp::Text::Reader getAppName() const;

  inline bool hasVersion() const;
  inline  ::capnp::Text::Reader getVersion() const;

  inline bool hasActorName() const;
  inline  ::capnp::Text::Reader getActorName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorUnregReq::Builder {
public:
  typedef ActorUnregReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppName();
  inline  ::capnp::Text::Builder getAppName();
  inline void setAppName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppName(unsigned int size);
  inline void adoptAppName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppName();

  inline bool hasVersion();
  inline  ::capnp::Text::Builder getVersion();
  inline void setVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersion(unsigned int size);
  inline void adoptVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersion();

  inline bool hasActorName();
  inline  ::capnp::Text::Builder getActorName();
  inline void setActorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initActorName(unsigned int size);
  inline void adoptActorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownActorName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorUnregReq::Pipeline {
public:
  typedef ActorUnregReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActorUnregRep::Reader {
public:
  typedef ActorUnregRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::riaps::discovery::Status getStatus() const;

  inline  ::int32_t getPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorUnregRep::Builder {
public:
  typedef ActorUnregRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::riaps::discovery::Status getStatus();
  inline void setStatus( ::riaps::discovery::Status value);

  inline  ::int32_t getPort();
  inline void setPort( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorUnregRep::Pipeline {
public:
  typedef ActorUnregRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Path::Reader {
public:
  typedef Path Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppName() const;
  inline  ::capnp::Text::Reader getAppName() const;

  inline bool hasActorName() const;
  inline  ::capnp::Text::Reader getActorName() const;

  inline bool hasMsgType() const;
  inline  ::capnp::Text::Reader getMsgType() const;

  inline  ::riaps::discovery::Kind getKind() const;

  inline  ::riaps::discovery::Scope getScope() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Path::Builder {
public:
  typedef Path Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppName();
  inline  ::capnp::Text::Builder getAppName();
  inline void setAppName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppName(unsigned int size);
  inline void adoptAppName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppName();

  inline bool hasActorName();
  inline  ::capnp::Text::Builder getActorName();
  inline void setActorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initActorName(unsigned int size);
  inline void adoptActorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownActorName();

  inline bool hasMsgType();
  inline  ::capnp::Text::Builder getMsgType();
  inline void setMsgType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMsgType(unsigned int size);
  inline void adoptMsgType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMsgType();

  inline  ::riaps::discovery::Kind getKind();
  inline void setKind( ::riaps::discovery::Kind value);

  inline  ::riaps::discovery::Scope getScope();
  inline void setScope( ::riaps::discovery::Scope value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Path::Pipeline {
public:
  typedef Path Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Client::Reader {
public:
  typedef Client Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasActorHost() const;
  inline  ::capnp::Text::Reader getActorHost() const;

  inline bool hasActorName() const;
  inline  ::capnp::Text::Reader getActorName() const;

  inline bool hasInstanceName() const;
  inline  ::capnp::Text::Reader getInstanceName() const;

  inline bool hasPortName() const;
  inline  ::capnp::Text::Reader getPortName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Client::Builder {
public:
  typedef Client Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasActorHost();
  inline  ::capnp::Text::Builder getActorHost();
  inline void setActorHost( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initActorHost(unsigned int size);
  inline void adoptActorHost(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownActorHost();

  inline bool hasActorName();
  inline  ::capnp::Text::Builder getActorName();
  inline void setActorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initActorName(unsigned int size);
  inline void adoptActorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownActorName();

  inline bool hasInstanceName();
  inline  ::capnp::Text::Builder getInstanceName();
  inline void setInstanceName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initInstanceName(unsigned int size);
  inline void adoptInstanceName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownInstanceName();

  inline bool hasPortName();
  inline  ::capnp::Text::Builder getPortName();
  inline void setPortName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPortName(unsigned int size);
  inline void adoptPortName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPortName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Client::Pipeline {
public:
  typedef Client Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Socket::Reader {
public:
  typedef Socket Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasHost() const;
  inline  ::capnp::Text::Reader getHost() const;

  inline  ::int32_t getPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Socket::Builder {
public:
  typedef Socket Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHost();
  inline  ::capnp::Text::Builder getHost();
  inline void setHost( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHost(unsigned int size);
  inline void adoptHost(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHost();

  inline  ::int32_t getPort();
  inline void setPort( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Socket::Pipeline {
public:
  typedef Socket Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServiceRegReq::Reader {
public:
  typedef ServiceRegReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::riaps::discovery::Path::Reader getPath() const;

  inline bool hasSocket() const;
  inline  ::riaps::discovery::Socket::Reader getSocket() const;

  inline  ::int32_t getPid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServiceRegReq::Builder {
public:
  typedef ServiceRegReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::riaps::discovery::Path::Builder getPath();
  inline void setPath( ::riaps::discovery::Path::Reader value);
  inline  ::riaps::discovery::Path::Builder initPath();
  inline void adoptPath(::capnp::Orphan< ::riaps::discovery::Path>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::Path> disownPath();

  inline bool hasSocket();
  inline  ::riaps::discovery::Socket::Builder getSocket();
  inline void setSocket( ::riaps::discovery::Socket::Reader value);
  inline  ::riaps::discovery::Socket::Builder initSocket();
  inline void adoptSocket(::capnp::Orphan< ::riaps::discovery::Socket>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::Socket> disownSocket();

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServiceRegReq::Pipeline {
public:
  typedef ServiceRegReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::riaps::discovery::Path::Pipeline getPath();
  inline  ::riaps::discovery::Socket::Pipeline getSocket();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServiceRegRep::Reader {
public:
  typedef ServiceRegRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::riaps::discovery::Status getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServiceRegRep::Builder {
public:
  typedef ServiceRegRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::riaps::discovery::Status getStatus();
  inline void setStatus( ::riaps::discovery::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServiceRegRep::Pipeline {
public:
  typedef ServiceRegRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServiceLookupReq::Reader {
public:
  typedef ServiceLookupReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::riaps::discovery::Path::Reader getPath() const;

  inline bool hasClient() const;
  inline  ::riaps::discovery::Client::Reader getClient() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServiceLookupReq::Builder {
public:
  typedef ServiceLookupReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::riaps::discovery::Path::Builder getPath();
  inline void setPath( ::riaps::discovery::Path::Reader value);
  inline  ::riaps::discovery::Path::Builder initPath();
  inline void adoptPath(::capnp::Orphan< ::riaps::discovery::Path>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::Path> disownPath();

  inline bool hasClient();
  inline  ::riaps::discovery::Client::Builder getClient();
  inline void setClient( ::riaps::discovery::Client::Reader value);
  inline  ::riaps::discovery::Client::Builder initClient();
  inline void adoptClient(::capnp::Orphan< ::riaps::discovery::Client>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::Client> disownClient();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServiceLookupReq::Pipeline {
public:
  typedef ServiceLookupReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::riaps::discovery::Path::Pipeline getPath();
  inline  ::riaps::discovery::Client::Pipeline getClient();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServiceLookupRep::Reader {
public:
  typedef ServiceLookupRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::riaps::discovery::Status getStatus() const;

  inline bool hasSockets() const;
  inline  ::capnp::List< ::riaps::discovery::Socket>::Reader getSockets() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServiceLookupRep::Builder {
public:
  typedef ServiceLookupRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::riaps::discovery::Status getStatus();
  inline void setStatus( ::riaps::discovery::Status value);

  inline bool hasSockets();
  inline  ::capnp::List< ::riaps::discovery::Socket>::Builder getSockets();
  inline void setSockets( ::capnp::List< ::riaps::discovery::Socket>::Reader value);
  inline  ::capnp::List< ::riaps::discovery::Socket>::Builder initSockets(unsigned int size);
  inline void adoptSockets(::capnp::Orphan< ::capnp::List< ::riaps::discovery::Socket>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::riaps::discovery::Socket>> disownSockets();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServiceLookupRep::Pipeline {
public:
  typedef ServiceLookupRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DiscoUpd::Reader {
public:
  typedef DiscoUpd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasClient() const;
  inline  ::riaps::discovery::Client::Reader getClient() const;

  inline  ::riaps::discovery::Scope getScope() const;

  inline bool hasSocket() const;
  inline  ::riaps::discovery::Socket::Reader getSocket() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscoUpd::Builder {
public:
  typedef DiscoUpd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClient();
  inline  ::riaps::discovery::Client::Builder getClient();
  inline void setClient( ::riaps::discovery::Client::Reader value);
  inline  ::riaps::discovery::Client::Builder initClient();
  inline void adoptClient(::capnp::Orphan< ::riaps::discovery::Client>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::Client> disownClient();

  inline  ::riaps::discovery::Scope getScope();
  inline void setScope( ::riaps::discovery::Scope value);

  inline bool hasSocket();
  inline  ::riaps::discovery::Socket::Builder getSocket();
  inline void setSocket( ::riaps::discovery::Socket::Reader value);
  inline  ::riaps::discovery::Socket::Builder initSocket();
  inline void adoptSocket(::capnp::Orphan< ::riaps::discovery::Socket>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::Socket> disownSocket();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscoUpd::Pipeline {
public:
  typedef DiscoUpd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::riaps::discovery::Client::Pipeline getClient();
  inline  ::riaps::discovery::Socket::Pipeline getSocket();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DiscoReq::Reader {
public:
  typedef DiscoReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isActorReg() const;
  inline bool hasActorReg() const;
  inline  ::riaps::discovery::ActorRegReq::Reader getActorReg() const;

  inline bool isServiceReg() const;
  inline bool hasServiceReg() const;
  inline  ::riaps::discovery::ServiceRegReq::Reader getServiceReg() const;

  inline bool isServiceLookup() const;
  inline bool hasServiceLookup() const;
  inline  ::riaps::discovery::ServiceLookupReq::Reader getServiceLookup() const;

  inline bool isActorUnreg() const;
  inline bool hasActorUnreg() const;
  inline  ::riaps::discovery::ActorRegReq::Reader getActorUnreg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscoReq::Builder {
public:
  typedef DiscoReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isActorReg();
  inline bool hasActorReg();
  inline  ::riaps::discovery::ActorRegReq::Builder getActorReg();
  inline void setActorReg( ::riaps::discovery::ActorRegReq::Reader value);
  inline  ::riaps::discovery::ActorRegReq::Builder initActorReg();
  inline void adoptActorReg(::capnp::Orphan< ::riaps::discovery::ActorRegReq>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::ActorRegReq> disownActorReg();

  inline bool isServiceReg();
  inline bool hasServiceReg();
  inline  ::riaps::discovery::ServiceRegReq::Builder getServiceReg();
  inline void setServiceReg( ::riaps::discovery::ServiceRegReq::Reader value);
  inline  ::riaps::discovery::ServiceRegReq::Builder initServiceReg();
  inline void adoptServiceReg(::capnp::Orphan< ::riaps::discovery::ServiceRegReq>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::ServiceRegReq> disownServiceReg();

  inline bool isServiceLookup();
  inline bool hasServiceLookup();
  inline  ::riaps::discovery::ServiceLookupReq::Builder getServiceLookup();
  inline void setServiceLookup( ::riaps::discovery::ServiceLookupReq::Reader value);
  inline  ::riaps::discovery::ServiceLookupReq::Builder initServiceLookup();
  inline void adoptServiceLookup(::capnp::Orphan< ::riaps::discovery::ServiceLookupReq>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::ServiceLookupReq> disownServiceLookup();

  inline bool isActorUnreg();
  inline bool hasActorUnreg();
  inline  ::riaps::discovery::ActorRegReq::Builder getActorUnreg();
  inline void setActorUnreg( ::riaps::discovery::ActorRegReq::Reader value);
  inline  ::riaps::discovery::ActorRegReq::Builder initActorUnreg();
  inline void adoptActorUnreg(::capnp::Orphan< ::riaps::discovery::ActorRegReq>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::ActorRegReq> disownActorUnreg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscoReq::Pipeline {
public:
  typedef DiscoReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DiscoRep::Reader {
public:
  typedef DiscoRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isActorReg() const;
  inline bool hasActorReg() const;
  inline  ::riaps::discovery::ActorRegRep::Reader getActorReg() const;

  inline bool isServiceReg() const;
  inline bool hasServiceReg() const;
  inline  ::riaps::discovery::ServiceRegRep::Reader getServiceReg() const;

  inline bool isServiceLookup() const;
  inline bool hasServiceLookup() const;
  inline  ::riaps::discovery::ServiceLookupRep::Reader getServiceLookup() const;

  inline bool isActorUnreg() const;
  inline bool hasActorUnreg() const;
  inline  ::riaps::discovery::ActorUnregRep::Reader getActorUnreg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscoRep::Builder {
public:
  typedef DiscoRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isActorReg();
  inline bool hasActorReg();
  inline  ::riaps::discovery::ActorRegRep::Builder getActorReg();
  inline void setActorReg( ::riaps::discovery::ActorRegRep::Reader value);
  inline  ::riaps::discovery::ActorRegRep::Builder initActorReg();
  inline void adoptActorReg(::capnp::Orphan< ::riaps::discovery::ActorRegRep>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::ActorRegRep> disownActorReg();

  inline bool isServiceReg();
  inline bool hasServiceReg();
  inline  ::riaps::discovery::ServiceRegRep::Builder getServiceReg();
  inline void setServiceReg( ::riaps::discovery::ServiceRegRep::Reader value);
  inline  ::riaps::discovery::ServiceRegRep::Builder initServiceReg();
  inline void adoptServiceReg(::capnp::Orphan< ::riaps::discovery::ServiceRegRep>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::ServiceRegRep> disownServiceReg();

  inline bool isServiceLookup();
  inline bool hasServiceLookup();
  inline  ::riaps::discovery::ServiceLookupRep::Builder getServiceLookup();
  inline void setServiceLookup( ::riaps::discovery::ServiceLookupRep::Reader value);
  inline  ::riaps::discovery::ServiceLookupRep::Builder initServiceLookup();
  inline void adoptServiceLookup(::capnp::Orphan< ::riaps::discovery::ServiceLookupRep>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::ServiceLookupRep> disownServiceLookup();

  inline bool isActorUnreg();
  inline bool hasActorUnreg();
  inline  ::riaps::discovery::ActorUnregRep::Builder getActorUnreg();
  inline void setActorUnreg( ::riaps::discovery::ActorUnregRep::Reader value);
  inline  ::riaps::discovery::ActorUnregRep::Builder initActorUnreg();
  inline void adoptActorUnreg(::capnp::Orphan< ::riaps::discovery::ActorUnregRep>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::ActorUnregRep> disownActorUnreg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscoRep::Pipeline {
public:
  typedef DiscoRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProviderListUpdate::Reader {
public:
  typedef ProviderListUpdate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasProviderpath() const;
  inline  ::capnp::Text::Reader getProviderpath() const;

  inline bool hasNewvalues() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getNewvalues() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProviderListUpdate::Builder {
public:
  typedef ProviderListUpdate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasProviderpath();
  inline  ::capnp::Text::Builder getProviderpath();
  inline void setProviderpath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initProviderpath(unsigned int size);
  inline void adoptProviderpath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownProviderpath();

  inline bool hasNewvalues();
  inline  ::capnp::List< ::capnp::Text>::Builder getNewvalues();
  inline void setNewvalues( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setNewvalues(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initNewvalues(unsigned int size);
  inline void adoptNewvalues(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownNewvalues();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProviderListUpdate::Pipeline {
public:
  typedef ProviderListUpdate Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProviderListGet::Reader {
public:
  typedef ProviderListGet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::riaps::discovery::Path::Reader getPath() const;

  inline bool hasClient() const;
  inline  ::riaps::discovery::Client::Reader getClient() const;

  inline bool hasResults() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getResults() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProviderListGet::Builder {
public:
  typedef ProviderListGet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::riaps::discovery::Path::Builder getPath();
  inline void setPath( ::riaps::discovery::Path::Reader value);
  inline  ::riaps::discovery::Path::Builder initPath();
  inline void adoptPath(::capnp::Orphan< ::riaps::discovery::Path>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::Path> disownPath();

  inline bool hasClient();
  inline  ::riaps::discovery::Client::Builder getClient();
  inline void setClient( ::riaps::discovery::Client::Reader value);
  inline  ::riaps::discovery::Client::Builder initClient();
  inline void adoptClient(::capnp::Orphan< ::riaps::discovery::Client>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::Client> disownClient();

  inline bool hasResults();
  inline  ::capnp::List< ::capnp::Text>::Builder getResults();
  inline void setResults( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setResults(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initResults(unsigned int size);
  inline void adoptResults(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownResults();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProviderListGet::Pipeline {
public:
  typedef ProviderListGet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::riaps::discovery::Path::Pipeline getPath();
  inline  ::riaps::discovery::Client::Pipeline getClient();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProviderListPush::Reader {
public:
  typedef ProviderListPush Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isProviderUpdate() const;
  inline bool hasProviderUpdate() const;
  inline  ::riaps::discovery::ProviderListUpdate::Reader getProviderUpdate() const;

  inline bool isProviderGet() const;
  inline bool hasProviderGet() const;
  inline  ::riaps::discovery::ProviderListGet::Reader getProviderGet() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProviderListPush::Builder {
public:
  typedef ProviderListPush Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isProviderUpdate();
  inline bool hasProviderUpdate();
  inline  ::riaps::discovery::ProviderListUpdate::Builder getProviderUpdate();
  inline void setProviderUpdate( ::riaps::discovery::ProviderListUpdate::Reader value);
  inline  ::riaps::discovery::ProviderListUpdate::Builder initProviderUpdate();
  inline void adoptProviderUpdate(::capnp::Orphan< ::riaps::discovery::ProviderListUpdate>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::ProviderListUpdate> disownProviderUpdate();

  inline bool isProviderGet();
  inline bool hasProviderGet();
  inline  ::riaps::discovery::ProviderListGet::Builder getProviderGet();
  inline void setProviderGet( ::riaps::discovery::ProviderListGet::Reader value);
  inline  ::riaps::discovery::ProviderListGet::Builder initProviderGet();
  inline void adoptProviderGet(::capnp::Orphan< ::riaps::discovery::ProviderListGet>&& value);
  inline ::capnp::Orphan< ::riaps::discovery::ProviderListGet> disownProviderGet();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProviderListPush::Pipeline {
public:
  typedef ProviderListPush Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ActorRegReq::Reader::hasAppName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasAppName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getAppName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setAppName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initAppName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptAppName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ActorRegReq::Reader::hasVersion() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasVersion() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ActorRegReq::Reader::hasActorName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasActorName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getActorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setActorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initActorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptActorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::int32_t ActorRegReq::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t ActorRegReq::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ActorRegReq::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::riaps::discovery::Status ActorRegRep::Reader::getStatus() const {
  return _reader.getDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::discovery::Status ActorRegRep::Builder::getStatus() {
  return _builder.getDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void ActorRegRep::Builder::setStatus( ::riaps::discovery::Status value) {
  _builder.setDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ActorRegRep::Reader::getPort() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t ActorRegRep::Builder::getPort() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ActorRegRep::Builder::setPort( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool ActorUnregReq::Reader::hasAppName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ActorUnregReq::Builder::hasAppName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorUnregReq::Reader::getAppName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorUnregReq::Builder::getAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ActorUnregReq::Builder::setAppName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorUnregReq::Builder::initAppName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ActorUnregReq::Builder::adoptAppName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorUnregReq::Builder::disownAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ActorUnregReq::Reader::hasVersion() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ActorUnregReq::Builder::hasVersion() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorUnregReq::Reader::getVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorUnregReq::Builder::getVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ActorUnregReq::Builder::setVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorUnregReq::Builder::initVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ActorUnregReq::Builder::adoptVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorUnregReq::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ActorUnregReq::Reader::hasActorName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ActorUnregReq::Builder::hasActorName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorUnregReq::Reader::getActorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorUnregReq::Builder::getActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ActorUnregReq::Builder::setActorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorUnregReq::Builder::initActorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ActorUnregReq::Builder::adoptActorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorUnregReq::Builder::disownActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::riaps::discovery::Status ActorUnregRep::Reader::getStatus() const {
  return _reader.getDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::discovery::Status ActorUnregRep::Builder::getStatus() {
  return _builder.getDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void ActorUnregRep::Builder::setStatus( ::riaps::discovery::Status value) {
  _builder.setDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ActorUnregRep::Reader::getPort() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t ActorUnregRep::Builder::getPort() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ActorUnregRep::Builder::setPort( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Path::Reader::hasAppName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Path::Builder::hasAppName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Path::Reader::getAppName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Path::Builder::getAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Path::Builder::setAppName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Path::Builder::initAppName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Path::Builder::adoptAppName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Path::Builder::disownAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Path::Reader::hasActorName() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Path::Builder::hasActorName() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Path::Reader::getActorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Path::Builder::getActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Path::Builder::setActorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Path::Builder::initActorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Path::Builder::adoptActorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Path::Builder::disownActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Path::Reader::hasMsgType() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Path::Builder::hasMsgType() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Path::Reader::getMsgType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Path::Builder::getMsgType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Path::Builder::setMsgType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Path::Builder::initMsgType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Path::Builder::adoptMsgType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Path::Builder::disownMsgType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::riaps::discovery::Kind Path::Reader::getKind() const {
  return _reader.getDataField< ::riaps::discovery::Kind>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::discovery::Kind Path::Builder::getKind() {
  return _builder.getDataField< ::riaps::discovery::Kind>(
      0 * ::capnp::ELEMENTS);
}
inline void Path::Builder::setKind( ::riaps::discovery::Kind value) {
  _builder.setDataField< ::riaps::discovery::Kind>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::riaps::discovery::Scope Path::Reader::getScope() const {
  return _reader.getDataField< ::riaps::discovery::Scope>(
      1 * ::capnp::ELEMENTS);
}

inline  ::riaps::discovery::Scope Path::Builder::getScope() {
  return _builder.getDataField< ::riaps::discovery::Scope>(
      1 * ::capnp::ELEMENTS);
}
inline void Path::Builder::setScope( ::riaps::discovery::Scope value) {
  _builder.setDataField< ::riaps::discovery::Scope>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Client::Reader::hasActorHost() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Client::Builder::hasActorHost() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Client::Reader::getActorHost() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Client::Builder::getActorHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Client::Builder::setActorHost( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Client::Builder::initActorHost(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Client::Builder::adoptActorHost(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Client::Builder::disownActorHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Client::Reader::hasActorName() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Client::Builder::hasActorName() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Client::Reader::getActorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Client::Builder::getActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Client::Builder::setActorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Client::Builder::initActorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Client::Builder::adoptActorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Client::Builder::disownActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Client::Reader::hasInstanceName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Client::Builder::hasInstanceName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Client::Reader::getInstanceName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Client::Builder::getInstanceName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Client::Builder::setInstanceName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Client::Builder::initInstanceName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Client::Builder::adoptInstanceName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Client::Builder::disownInstanceName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Client::Reader::hasPortName() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Client::Builder::hasPortName() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Client::Reader::getPortName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Client::Builder::getPortName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Client::Builder::setPortName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Client::Builder::initPortName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Client::Builder::adoptPortName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Client::Builder::disownPortName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Socket::Reader::hasHost() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Socket::Builder::hasHost() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Socket::Reader::getHost() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Socket::Builder::getHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Socket::Builder::setHost( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Socket::Builder::initHost(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Socket::Builder::adoptHost(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Socket::Builder::disownHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int32_t Socket::Reader::getPort() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t Socket::Builder::getPort() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Socket::Builder::setPort( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ServiceRegReq::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ServiceRegReq::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::Path::Reader ServiceRegReq::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::Path::Builder ServiceRegReq::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::riaps::discovery::Path::Pipeline ServiceRegReq::Pipeline::getPath() {
  return  ::riaps::discovery::Path::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ServiceRegReq::Builder::setPath( ::riaps::discovery::Path::Reader value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::Path::Builder ServiceRegReq::Builder::initPath() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ServiceRegReq::Builder::adoptPath(
    ::capnp::Orphan< ::riaps::discovery::Path>&& value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::Path> ServiceRegReq::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ServiceRegReq::Reader::hasSocket() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ServiceRegReq::Builder::hasSocket() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::Socket::Reader ServiceRegReq::Reader::getSocket() const {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::Socket::Builder ServiceRegReq::Builder::getSocket() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::riaps::discovery::Socket::Pipeline ServiceRegReq::Pipeline::getSocket() {
  return  ::riaps::discovery::Socket::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ServiceRegReq::Builder::setSocket( ::riaps::discovery::Socket::Reader value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::Socket::Builder ServiceRegReq::Builder::initSocket() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ServiceRegReq::Builder::adoptSocket(
    ::capnp::Orphan< ::riaps::discovery::Socket>&& value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::Socket> ServiceRegReq::Builder::disownSocket() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int32_t ServiceRegReq::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t ServiceRegReq::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ServiceRegReq::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::riaps::discovery::Status ServiceRegRep::Reader::getStatus() const {
  return _reader.getDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::discovery::Status ServiceRegRep::Builder::getStatus() {
  return _builder.getDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void ServiceRegRep::Builder::setStatus( ::riaps::discovery::Status value) {
  _builder.setDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ServiceLookupReq::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ServiceLookupReq::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::Path::Reader ServiceLookupReq::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::Path::Builder ServiceLookupReq::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::riaps::discovery::Path::Pipeline ServiceLookupReq::Pipeline::getPath() {
  return  ::riaps::discovery::Path::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ServiceLookupReq::Builder::setPath( ::riaps::discovery::Path::Reader value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::Path::Builder ServiceLookupReq::Builder::initPath() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ServiceLookupReq::Builder::adoptPath(
    ::capnp::Orphan< ::riaps::discovery::Path>&& value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::Path> ServiceLookupReq::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ServiceLookupReq::Reader::hasClient() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ServiceLookupReq::Builder::hasClient() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::Client::Reader ServiceLookupReq::Reader::getClient() const {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::Client::Builder ServiceLookupReq::Builder::getClient() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::riaps::discovery::Client::Pipeline ServiceLookupReq::Pipeline::getClient() {
  return  ::riaps::discovery::Client::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ServiceLookupReq::Builder::setClient( ::riaps::discovery::Client::Reader value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::Client::Builder ServiceLookupReq::Builder::initClient() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ServiceLookupReq::Builder::adoptClient(
    ::capnp::Orphan< ::riaps::discovery::Client>&& value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::Client> ServiceLookupReq::Builder::disownClient() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::riaps::discovery::Status ServiceLookupRep::Reader::getStatus() const {
  return _reader.getDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::discovery::Status ServiceLookupRep::Builder::getStatus() {
  return _builder.getDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void ServiceLookupRep::Builder::setStatus( ::riaps::discovery::Status value) {
  _builder.setDataField< ::riaps::discovery::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ServiceLookupRep::Reader::hasSockets() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ServiceLookupRep::Builder::hasSockets() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::riaps::discovery::Socket>::Reader ServiceLookupRep::Reader::getSockets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::discovery::Socket>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::riaps::discovery::Socket>::Builder ServiceLookupRep::Builder::getSockets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::discovery::Socket>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ServiceLookupRep::Builder::setSockets( ::capnp::List< ::riaps::discovery::Socket>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::discovery::Socket>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::riaps::discovery::Socket>::Builder ServiceLookupRep::Builder::initSockets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::discovery::Socket>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ServiceLookupRep::Builder::adoptSockets(
    ::capnp::Orphan< ::capnp::List< ::riaps::discovery::Socket>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::discovery::Socket>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::riaps::discovery::Socket>> ServiceLookupRep::Builder::disownSockets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::discovery::Socket>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoUpd::Reader::hasClient() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoUpd::Builder::hasClient() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::Client::Reader DiscoUpd::Reader::getClient() const {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::Client::Builder DiscoUpd::Builder::getClient() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::riaps::discovery::Client::Pipeline DiscoUpd::Pipeline::getClient() {
  return  ::riaps::discovery::Client::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DiscoUpd::Builder::setClient( ::riaps::discovery::Client::Reader value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::Client::Builder DiscoUpd::Builder::initClient() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoUpd::Builder::adoptClient(
    ::capnp::Orphan< ::riaps::discovery::Client>&& value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::Client> DiscoUpd::Builder::disownClient() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::riaps::discovery::Scope DiscoUpd::Reader::getScope() const {
  return _reader.getDataField< ::riaps::discovery::Scope>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::discovery::Scope DiscoUpd::Builder::getScope() {
  return _builder.getDataField< ::riaps::discovery::Scope>(
      0 * ::capnp::ELEMENTS);
}
inline void DiscoUpd::Builder::setScope( ::riaps::discovery::Scope value) {
  _builder.setDataField< ::riaps::discovery::Scope>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DiscoUpd::Reader::hasSocket() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DiscoUpd::Builder::hasSocket() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::Socket::Reader DiscoUpd::Reader::getSocket() const {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::Socket::Builder DiscoUpd::Builder::getSocket() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::riaps::discovery::Socket::Pipeline DiscoUpd::Pipeline::getSocket() {
  return  ::riaps::discovery::Socket::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DiscoUpd::Builder::setSocket( ::riaps::discovery::Socket::Reader value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::Socket::Builder DiscoUpd::Builder::initSocket() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DiscoUpd::Builder::adoptSocket(
    ::capnp::Orphan< ::riaps::discovery::Socket>&& value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::Socket> DiscoUpd::Builder::disownSocket() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Socket>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::riaps::discovery::DiscoReq::Which DiscoReq::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::riaps::discovery::DiscoReq::Which DiscoReq::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool DiscoReq::Reader::isActorReg() const {
  return which() == DiscoReq::ACTOR_REG;
}
inline bool DiscoReq::Builder::isActorReg() {
  return which() == DiscoReq::ACTOR_REG;
}
inline bool DiscoReq::Reader::hasActorReg() const {
  if (which() != DiscoReq::ACTOR_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoReq::Builder::hasActorReg() {
  if (which() != DiscoReq::ACTOR_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::ActorRegReq::Reader DiscoReq::Reader::getActorReg() const {
  KJ_IREQUIRE(which() == DiscoReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::ActorRegReq::Builder DiscoReq::Builder::getActorReg() {
  KJ_IREQUIRE(which() == DiscoReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::setActorReg( ::riaps::discovery::ActorRegReq::Reader value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::ActorRegReq::Builder DiscoReq::Builder::initActorReg() {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::ACTOR_REG);
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::adoptActorReg(
    ::capnp::Orphan< ::riaps::discovery::ActorRegReq>&& value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::ActorRegReq> DiscoReq::Builder::disownActorReg() {
  KJ_IREQUIRE(which() == DiscoReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoReq::Reader::isServiceReg() const {
  return which() == DiscoReq::SERVICE_REG;
}
inline bool DiscoReq::Builder::isServiceReg() {
  return which() == DiscoReq::SERVICE_REG;
}
inline bool DiscoReq::Reader::hasServiceReg() const {
  if (which() != DiscoReq::SERVICE_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoReq::Builder::hasServiceReg() {
  if (which() != DiscoReq::SERVICE_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::ServiceRegReq::Reader DiscoReq::Reader::getServiceReg() const {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::ServiceRegReq::Builder DiscoReq::Builder::getServiceReg() {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::setServiceReg( ::riaps::discovery::ServiceRegReq::Reader value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::ServiceRegReq::Builder DiscoReq::Builder::initServiceReg() {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_REG);
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::adoptServiceReg(
    ::capnp::Orphan< ::riaps::discovery::ServiceRegReq>&& value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::ServiceRegReq> DiscoReq::Builder::disownServiceReg() {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoReq::Reader::isServiceLookup() const {
  return which() == DiscoReq::SERVICE_LOOKUP;
}
inline bool DiscoReq::Builder::isServiceLookup() {
  return which() == DiscoReq::SERVICE_LOOKUP;
}
inline bool DiscoReq::Reader::hasServiceLookup() const {
  if (which() != DiscoReq::SERVICE_LOOKUP) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoReq::Builder::hasServiceLookup() {
  if (which() != DiscoReq::SERVICE_LOOKUP) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::ServiceLookupReq::Reader DiscoReq::Reader::getServiceLookup() const {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::ServiceLookupReq::Builder DiscoReq::Builder::getServiceLookup() {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::setServiceLookup( ::riaps::discovery::ServiceLookupReq::Reader value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_LOOKUP);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::ServiceLookupReq::Builder DiscoReq::Builder::initServiceLookup() {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_LOOKUP);
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::adoptServiceLookup(
    ::capnp::Orphan< ::riaps::discovery::ServiceLookupReq>&& value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_LOOKUP);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::ServiceLookupReq> DiscoReq::Builder::disownServiceLookup() {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoReq::Reader::isActorUnreg() const {
  return which() == DiscoReq::ACTOR_UNREG;
}
inline bool DiscoReq::Builder::isActorUnreg() {
  return which() == DiscoReq::ACTOR_UNREG;
}
inline bool DiscoReq::Reader::hasActorUnreg() const {
  if (which() != DiscoReq::ACTOR_UNREG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoReq::Builder::hasActorUnreg() {
  if (which() != DiscoReq::ACTOR_UNREG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::ActorRegReq::Reader DiscoReq::Reader::getActorUnreg() const {
  KJ_IREQUIRE(which() == DiscoReq::ACTOR_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::ActorRegReq::Builder DiscoReq::Builder::getActorUnreg() {
  KJ_IREQUIRE(which() == DiscoReq::ACTOR_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::setActorUnreg( ::riaps::discovery::ActorRegReq::Reader value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::ACTOR_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::ActorRegReq::Builder DiscoReq::Builder::initActorUnreg() {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::ACTOR_UNREG);
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::adoptActorUnreg(
    ::capnp::Orphan< ::riaps::discovery::ActorRegReq>&& value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::ACTOR_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::ActorRegReq> DiscoReq::Builder::disownActorUnreg() {
  KJ_IREQUIRE(which() == DiscoReq::ACTOR_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::riaps::discovery::DiscoRep::Which DiscoRep::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::riaps::discovery::DiscoRep::Which DiscoRep::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool DiscoRep::Reader::isActorReg() const {
  return which() == DiscoRep::ACTOR_REG;
}
inline bool DiscoRep::Builder::isActorReg() {
  return which() == DiscoRep::ACTOR_REG;
}
inline bool DiscoRep::Reader::hasActorReg() const {
  if (which() != DiscoRep::ACTOR_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoRep::Builder::hasActorReg() {
  if (which() != DiscoRep::ACTOR_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::ActorRegRep::Reader DiscoRep::Reader::getActorReg() const {
  KJ_IREQUIRE(which() == DiscoRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::ActorRegRep::Builder DiscoRep::Builder::getActorReg() {
  KJ_IREQUIRE(which() == DiscoRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::setActorReg( ::riaps::discovery::ActorRegRep::Reader value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::ActorRegRep::Builder DiscoRep::Builder::initActorReg() {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::ACTOR_REG);
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::adoptActorReg(
    ::capnp::Orphan< ::riaps::discovery::ActorRegRep>&& value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::ActorRegRep> DiscoRep::Builder::disownActorReg() {
  KJ_IREQUIRE(which() == DiscoRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorRegRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoRep::Reader::isServiceReg() const {
  return which() == DiscoRep::SERVICE_REG;
}
inline bool DiscoRep::Builder::isServiceReg() {
  return which() == DiscoRep::SERVICE_REG;
}
inline bool DiscoRep::Reader::hasServiceReg() const {
  if (which() != DiscoRep::SERVICE_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoRep::Builder::hasServiceReg() {
  if (which() != DiscoRep::SERVICE_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::ServiceRegRep::Reader DiscoRep::Reader::getServiceReg() const {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::ServiceRegRep::Builder DiscoRep::Builder::getServiceReg() {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::setServiceReg( ::riaps::discovery::ServiceRegRep::Reader value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::ServiceRegRep::Builder DiscoRep::Builder::initServiceReg() {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_REG);
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::adoptServiceReg(
    ::capnp::Orphan< ::riaps::discovery::ServiceRegRep>&& value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::ServiceRegRep> DiscoRep::Builder::disownServiceReg() {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceRegRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoRep::Reader::isServiceLookup() const {
  return which() == DiscoRep::SERVICE_LOOKUP;
}
inline bool DiscoRep::Builder::isServiceLookup() {
  return which() == DiscoRep::SERVICE_LOOKUP;
}
inline bool DiscoRep::Reader::hasServiceLookup() const {
  if (which() != DiscoRep::SERVICE_LOOKUP) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoRep::Builder::hasServiceLookup() {
  if (which() != DiscoRep::SERVICE_LOOKUP) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::ServiceLookupRep::Reader DiscoRep::Reader::getServiceLookup() const {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::ServiceLookupRep::Builder DiscoRep::Builder::getServiceLookup() {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::setServiceLookup( ::riaps::discovery::ServiceLookupRep::Reader value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_LOOKUP);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::ServiceLookupRep::Builder DiscoRep::Builder::initServiceLookup() {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_LOOKUP);
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::adoptServiceLookup(
    ::capnp::Orphan< ::riaps::discovery::ServiceLookupRep>&& value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_LOOKUP);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::ServiceLookupRep> DiscoRep::Builder::disownServiceLookup() {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ServiceLookupRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoRep::Reader::isActorUnreg() const {
  return which() == DiscoRep::ACTOR_UNREG;
}
inline bool DiscoRep::Builder::isActorUnreg() {
  return which() == DiscoRep::ACTOR_UNREG;
}
inline bool DiscoRep::Reader::hasActorUnreg() const {
  if (which() != DiscoRep::ACTOR_UNREG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoRep::Builder::hasActorUnreg() {
  if (which() != DiscoRep::ACTOR_UNREG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::ActorUnregRep::Reader DiscoRep::Reader::getActorUnreg() const {
  KJ_IREQUIRE(which() == DiscoRep::ACTOR_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorUnregRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::ActorUnregRep::Builder DiscoRep::Builder::getActorUnreg() {
  KJ_IREQUIRE(which() == DiscoRep::ACTOR_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorUnregRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::setActorUnreg( ::riaps::discovery::ActorUnregRep::Reader value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::ACTOR_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ActorUnregRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::ActorUnregRep::Builder DiscoRep::Builder::initActorUnreg() {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::ACTOR_UNREG);
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorUnregRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::adoptActorUnreg(
    ::capnp::Orphan< ::riaps::discovery::ActorUnregRep>&& value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::ACTOR_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ActorUnregRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::ActorUnregRep> DiscoRep::Builder::disownActorUnreg() {
  KJ_IREQUIRE(which() == DiscoRep::ACTOR_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ActorUnregRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ProviderListUpdate::Reader::hasProviderpath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListUpdate::Builder::hasProviderpath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ProviderListUpdate::Reader::getProviderpath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ProviderListUpdate::Builder::getProviderpath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListUpdate::Builder::setProviderpath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ProviderListUpdate::Builder::initProviderpath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ProviderListUpdate::Builder::adoptProviderpath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ProviderListUpdate::Builder::disownProviderpath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ProviderListUpdate::Reader::hasNewvalues() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListUpdate::Builder::hasNewvalues() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader ProviderListUpdate::Reader::getNewvalues() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder ProviderListUpdate::Builder::getNewvalues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ProviderListUpdate::Builder::setNewvalues( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void ProviderListUpdate::Builder::setNewvalues(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder ProviderListUpdate::Builder::initNewvalues(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ProviderListUpdate::Builder::adoptNewvalues(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> ProviderListUpdate::Builder::disownNewvalues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ProviderListGet::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListGet::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::Path::Reader ProviderListGet::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::Path::Builder ProviderListGet::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::riaps::discovery::Path::Pipeline ProviderListGet::Pipeline::getPath() {
  return  ::riaps::discovery::Path::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ProviderListGet::Builder::setPath( ::riaps::discovery::Path::Reader value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::Path::Builder ProviderListGet::Builder::initPath() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListGet::Builder::adoptPath(
    ::capnp::Orphan< ::riaps::discovery::Path>&& value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::Path> ProviderListGet::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Path>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ProviderListGet::Reader::hasClient() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListGet::Builder::hasClient() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::Client::Reader ProviderListGet::Reader::getClient() const {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::Client::Builder ProviderListGet::Builder::getClient() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::riaps::discovery::Client::Pipeline ProviderListGet::Pipeline::getClient() {
  return  ::riaps::discovery::Client::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ProviderListGet::Builder::setClient( ::riaps::discovery::Client::Reader value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::Client::Builder ProviderListGet::Builder::initClient() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ProviderListGet::Builder::adoptClient(
    ::capnp::Orphan< ::riaps::discovery::Client>&& value) {
  ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::Client> ProviderListGet::Builder::disownClient() {
  return ::capnp::_::PointerHelpers< ::riaps::discovery::Client>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ProviderListGet::Reader::hasResults() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListGet::Builder::hasResults() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader ProviderListGet::Reader::getResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder ProviderListGet::Builder::getResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ProviderListGet::Builder::setResults( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void ProviderListGet::Builder::setResults(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder ProviderListGet::Builder::initResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ProviderListGet::Builder::adoptResults(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> ProviderListGet::Builder::disownResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::riaps::discovery::ProviderListPush::Which ProviderListPush::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::riaps::discovery::ProviderListPush::Which ProviderListPush::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool ProviderListPush::Reader::isProviderUpdate() const {
  return which() == ProviderListPush::PROVIDER_UPDATE;
}
inline bool ProviderListPush::Builder::isProviderUpdate() {
  return which() == ProviderListPush::PROVIDER_UPDATE;
}
inline bool ProviderListPush::Reader::hasProviderUpdate() const {
  if (which() != ProviderListPush::PROVIDER_UPDATE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListPush::Builder::hasProviderUpdate() {
  if (which() != ProviderListPush::PROVIDER_UPDATE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::ProviderListUpdate::Reader ProviderListPush::Reader::getProviderUpdate() const {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_UPDATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListUpdate>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::ProviderListUpdate::Builder ProviderListPush::Builder::getProviderUpdate() {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_UPDATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListUpdate>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListPush::Builder::setProviderUpdate( ::riaps::discovery::ProviderListUpdate::Reader value) {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_UPDATE);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListUpdate>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::ProviderListUpdate::Builder ProviderListPush::Builder::initProviderUpdate() {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_UPDATE);
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListUpdate>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListPush::Builder::adoptProviderUpdate(
    ::capnp::Orphan< ::riaps::discovery::ProviderListUpdate>&& value) {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_UPDATE);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListUpdate>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::ProviderListUpdate> ProviderListPush::Builder::disownProviderUpdate() {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_UPDATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListUpdate>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ProviderListPush::Reader::isProviderGet() const {
  return which() == ProviderListPush::PROVIDER_GET;
}
inline bool ProviderListPush::Builder::isProviderGet() {
  return which() == ProviderListPush::PROVIDER_GET;
}
inline bool ProviderListPush::Reader::hasProviderGet() const {
  if (which() != ProviderListPush::PROVIDER_GET) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListPush::Builder::hasProviderGet() {
  if (which() != ProviderListPush::PROVIDER_GET) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::discovery::ProviderListGet::Reader ProviderListPush::Reader::getProviderGet() const {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_GET,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListGet>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::discovery::ProviderListGet::Builder ProviderListPush::Builder::getProviderGet() {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_GET,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListGet>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListPush::Builder::setProviderGet( ::riaps::discovery::ProviderListGet::Reader value) {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_GET);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListGet>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::discovery::ProviderListGet::Builder ProviderListPush::Builder::initProviderGet() {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_GET);
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListGet>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListPush::Builder::adoptProviderGet(
    ::capnp::Orphan< ::riaps::discovery::ProviderListGet>&& value) {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_GET);
  ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListGet>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::discovery::ProviderListGet> ProviderListPush::Builder::disownProviderGet() {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_GET,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::discovery::ProviderListGet>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_86bbe73a97ada7d3_
