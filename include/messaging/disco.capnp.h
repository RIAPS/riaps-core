// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: disco.capnp

#ifndef CAPNP_INCLUDED_bfb632a00018ca1b_
#define CAPNP_INCLUDED_bfb632a00018ca1b_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(aa15a59eb33a15c2);
enum class Status_aa15a59eb33a15c2: uint16_t {
  OK,
  ERR,
};
CAPNP_DECLARE_ENUM(Status, aa15a59eb33a15c2);
CAPNP_DECLARE_SCHEMA(df6b25e50bc24b4b);
enum class Kind_df6b25e50bc24b4b: uint16_t {
  NONE,
  PUB,
  SUB,
  CLT,
  SRV,
  REQ,
  REP,
};
CAPNP_DECLARE_ENUM(Kind, df6b25e50bc24b4b);
CAPNP_DECLARE_SCHEMA(b772213e98ab2d6b);
enum class Scope_b772213e98ab2d6b: uint16_t {
  NONE,
  GLOBAL,
  LOCAL,
};
CAPNP_DECLARE_ENUM(Scope, b772213e98ab2d6b);
CAPNP_DECLARE_SCHEMA(dd81ef2fce62e663);
CAPNP_DECLARE_SCHEMA(e07ee9af7989d4c1);
CAPNP_DECLARE_SCHEMA(e643a41a040909be);
CAPNP_DECLARE_SCHEMA(c1cbdb4d5d25d951);
CAPNP_DECLARE_SCHEMA(e3b69c956b458278);
CAPNP_DECLARE_SCHEMA(80529beffe2767a4);
CAPNP_DECLARE_SCHEMA(e1cb78a8cff3ea30);
CAPNP_DECLARE_SCHEMA(d2a0f3a3e8bebc5e);
CAPNP_DECLARE_SCHEMA(998280f9b0a23bc9);
CAPNP_DECLARE_SCHEMA(88610ca13bd9da6b);
CAPNP_DECLARE_SCHEMA(9b59f65915902dd4);
CAPNP_DECLARE_SCHEMA(e469aa488cf1aac0);
CAPNP_DECLARE_SCHEMA(f1ffd165271c1fca);
CAPNP_DECLARE_SCHEMA(fba7aaeced154282);
CAPNP_DECLARE_SCHEMA(f0d1b2dc7cdf6a2c);

}  // namespace schemas
}  // namespace capnp


typedef ::capnp::schemas::Status_aa15a59eb33a15c2 Status;

typedef ::capnp::schemas::Kind_df6b25e50bc24b4b Kind;

typedef ::capnp::schemas::Scope_b772213e98ab2d6b Scope;

struct ActorRegReq {
  ActorRegReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dd81ef2fce62e663, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ActorRegRep {
  ActorRegRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e07ee9af7989d4c1, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Path {
  Path() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e643a41a040909be, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Client {
  Client() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1cbdb4d5d25d951, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Socket {
  Socket() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3b69c956b458278, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ServiceRegReq {
  ServiceRegReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80529beffe2767a4, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ServiceRegRep {
  ServiceRegRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1cb78a8cff3ea30, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ServiceLookupReq {
  ServiceLookupReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2a0f3a3e8bebc5e, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ServiceLookupRep {
  ServiceLookupRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(998280f9b0a23bc9, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DiscoUpd {
  DiscoUpd() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88610ca13bd9da6b, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DiscoReq {
  DiscoReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACTOR_REG,
    SERVICE_REG,
    SERVICE_LOOKUP,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b59f65915902dd4, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DiscoRep {
  DiscoRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACTOR_REG,
    SERVICE_REG,
    SERVICE_LOOKUP,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e469aa488cf1aac0, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ProviderListUpdate {
  ProviderListUpdate() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f1ffd165271c1fca, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ProviderListGet {
  ProviderListGet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fba7aaeced154282, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ProviderListPush {
  ProviderListPush() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    PROVIDER_UPDATE,
    PROVIDER_GET,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0d1b2dc7cdf6a2c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ActorRegReq::Reader {
public:
  typedef ActorRegReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppName() const;
  inline  ::capnp::Text::Reader getAppName() const;

  inline bool hasVersion() const;
  inline  ::capnp::Text::Reader getVersion() const;

  inline bool hasActorName() const;
  inline  ::capnp::Text::Reader getActorName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorRegReq::Builder {
public:
  typedef ActorRegReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppName();
  inline  ::capnp::Text::Builder getAppName();
  inline void setAppName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppName(unsigned int size);
  inline void adoptAppName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppName();

  inline bool hasVersion();
  inline  ::capnp::Text::Builder getVersion();
  inline void setVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersion(unsigned int size);
  inline void adoptVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersion();

  inline bool hasActorName();
  inline  ::capnp::Text::Builder getActorName();
  inline void setActorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initActorName(unsigned int size);
  inline void adoptActorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownActorName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorRegReq::Pipeline {
public:
  typedef ActorRegReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActorRegRep::Reader {
public:
  typedef ActorRegRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::Status getStatus() const;

  inline  ::int32_t getPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorRegRep::Builder {
public:
  typedef ActorRegRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Status getStatus();
  inline void setStatus( ::Status value);

  inline  ::int32_t getPort();
  inline void setPort( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorRegRep::Pipeline {
public:
  typedef ActorRegRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Path::Reader {
public:
  typedef Path Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppName() const;
  inline  ::capnp::Text::Reader getAppName() const;

  inline bool hasMsgType() const;
  inline  ::capnp::Text::Reader getMsgType() const;

  inline  ::Kind getKind() const;

  inline  ::Scope getScope() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Path::Builder {
public:
  typedef Path Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppName();
  inline  ::capnp::Text::Builder getAppName();
  inline void setAppName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppName(unsigned int size);
  inline void adoptAppName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppName();

  inline bool hasMsgType();
  inline  ::capnp::Text::Builder getMsgType();
  inline void setMsgType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMsgType(unsigned int size);
  inline void adoptMsgType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMsgType();

  inline  ::Kind getKind();
  inline void setKind( ::Kind value);

  inline  ::Scope getScope();
  inline void setScope( ::Scope value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Path::Pipeline {
public:
  typedef Path Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Client::Reader {
public:
  typedef Client Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasActorHost() const;
  inline  ::capnp::Text::Reader getActorHost() const;

  inline bool hasActorName() const;
  inline  ::capnp::Text::Reader getActorName() const;

  inline bool hasInstanceName() const;
  inline  ::capnp::Text::Reader getInstanceName() const;

  inline bool hasPortName() const;
  inline  ::capnp::Text::Reader getPortName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Client::Builder {
public:
  typedef Client Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasActorHost();
  inline  ::capnp::Text::Builder getActorHost();
  inline void setActorHost( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initActorHost(unsigned int size);
  inline void adoptActorHost(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownActorHost();

  inline bool hasActorName();
  inline  ::capnp::Text::Builder getActorName();
  inline void setActorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initActorName(unsigned int size);
  inline void adoptActorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownActorName();

  inline bool hasInstanceName();
  inline  ::capnp::Text::Builder getInstanceName();
  inline void setInstanceName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initInstanceName(unsigned int size);
  inline void adoptInstanceName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownInstanceName();

  inline bool hasPortName();
  inline  ::capnp::Text::Builder getPortName();
  inline void setPortName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPortName(unsigned int size);
  inline void adoptPortName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPortName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Client::Pipeline {
public:
  typedef Client Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Socket::Reader {
public:
  typedef Socket Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasHost() const;
  inline  ::capnp::Text::Reader getHost() const;

  inline  ::int32_t getPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Socket::Builder {
public:
  typedef Socket Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHost();
  inline  ::capnp::Text::Builder getHost();
  inline void setHost( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHost(unsigned int size);
  inline void adoptHost(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHost();

  inline  ::int32_t getPort();
  inline void setPort( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Socket::Pipeline {
public:
  typedef Socket Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServiceRegReq::Reader {
public:
  typedef ServiceRegReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::Path::Reader getPath() const;

  inline bool hasSocket() const;
  inline  ::Socket::Reader getSocket() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServiceRegReq::Builder {
public:
  typedef ServiceRegReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::Path::Builder getPath();
  inline void setPath( ::Path::Reader value);
  inline  ::Path::Builder initPath();
  inline void adoptPath(::capnp::Orphan< ::Path>&& value);
  inline ::capnp::Orphan< ::Path> disownPath();

  inline bool hasSocket();
  inline  ::Socket::Builder getSocket();
  inline void setSocket( ::Socket::Reader value);
  inline  ::Socket::Builder initSocket();
  inline void adoptSocket(::capnp::Orphan< ::Socket>&& value);
  inline ::capnp::Orphan< ::Socket> disownSocket();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServiceRegReq::Pipeline {
public:
  typedef ServiceRegReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Path::Pipeline getPath();
  inline  ::Socket::Pipeline getSocket();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServiceRegRep::Reader {
public:
  typedef ServiceRegRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::Status getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServiceRegRep::Builder {
public:
  typedef ServiceRegRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Status getStatus();
  inline void setStatus( ::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServiceRegRep::Pipeline {
public:
  typedef ServiceRegRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServiceLookupReq::Reader {
public:
  typedef ServiceLookupReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::Path::Reader getPath() const;

  inline bool hasClient() const;
  inline  ::Client::Reader getClient() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServiceLookupReq::Builder {
public:
  typedef ServiceLookupReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::Path::Builder getPath();
  inline void setPath( ::Path::Reader value);
  inline  ::Path::Builder initPath();
  inline void adoptPath(::capnp::Orphan< ::Path>&& value);
  inline ::capnp::Orphan< ::Path> disownPath();

  inline bool hasClient();
  inline  ::Client::Builder getClient();
  inline void setClient( ::Client::Reader value);
  inline  ::Client::Builder initClient();
  inline void adoptClient(::capnp::Orphan< ::Client>&& value);
  inline ::capnp::Orphan< ::Client> disownClient();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServiceLookupReq::Pipeline {
public:
  typedef ServiceLookupReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Path::Pipeline getPath();
  inline  ::Client::Pipeline getClient();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServiceLookupRep::Reader {
public:
  typedef ServiceLookupRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::Status getStatus() const;

  inline bool hasSockets() const;
  inline  ::capnp::List< ::Socket>::Reader getSockets() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServiceLookupRep::Builder {
public:
  typedef ServiceLookupRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Status getStatus();
  inline void setStatus( ::Status value);

  inline bool hasSockets();
  inline  ::capnp::List< ::Socket>::Builder getSockets();
  inline void setSockets( ::capnp::List< ::Socket>::Reader value);
  inline  ::capnp::List< ::Socket>::Builder initSockets(unsigned int size);
  inline void adoptSockets(::capnp::Orphan< ::capnp::List< ::Socket>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Socket>> disownSockets();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServiceLookupRep::Pipeline {
public:
  typedef ServiceLookupRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DiscoUpd::Reader {
public:
  typedef DiscoUpd Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasClient() const;
  inline  ::Client::Reader getClient() const;

  inline  ::Scope getScope() const;

  inline bool hasSocket() const;
  inline  ::Socket::Reader getSocket() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscoUpd::Builder {
public:
  typedef DiscoUpd Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasClient();
  inline  ::Client::Builder getClient();
  inline void setClient( ::Client::Reader value);
  inline  ::Client::Builder initClient();
  inline void adoptClient(::capnp::Orphan< ::Client>&& value);
  inline ::capnp::Orphan< ::Client> disownClient();

  inline  ::Scope getScope();
  inline void setScope( ::Scope value);

  inline bool hasSocket();
  inline  ::Socket::Builder getSocket();
  inline void setSocket( ::Socket::Reader value);
  inline  ::Socket::Builder initSocket();
  inline void adoptSocket(::capnp::Orphan< ::Socket>&& value);
  inline ::capnp::Orphan< ::Socket> disownSocket();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscoUpd::Pipeline {
public:
  typedef DiscoUpd Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Client::Pipeline getClient();
  inline  ::Socket::Pipeline getSocket();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DiscoReq::Reader {
public:
  typedef DiscoReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isActorReg() const;
  inline bool hasActorReg() const;
  inline  ::ActorRegReq::Reader getActorReg() const;

  inline bool isServiceReg() const;
  inline bool hasServiceReg() const;
  inline  ::ServiceRegReq::Reader getServiceReg() const;

  inline bool isServiceLookup() const;
  inline bool hasServiceLookup() const;
  inline  ::ServiceLookupReq::Reader getServiceLookup() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscoReq::Builder {
public:
  typedef DiscoReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isActorReg();
  inline bool hasActorReg();
  inline  ::ActorRegReq::Builder getActorReg();
  inline void setActorReg( ::ActorRegReq::Reader value);
  inline  ::ActorRegReq::Builder initActorReg();
  inline void adoptActorReg(::capnp::Orphan< ::ActorRegReq>&& value);
  inline ::capnp::Orphan< ::ActorRegReq> disownActorReg();

  inline bool isServiceReg();
  inline bool hasServiceReg();
  inline  ::ServiceRegReq::Builder getServiceReg();
  inline void setServiceReg( ::ServiceRegReq::Reader value);
  inline  ::ServiceRegReq::Builder initServiceReg();
  inline void adoptServiceReg(::capnp::Orphan< ::ServiceRegReq>&& value);
  inline ::capnp::Orphan< ::ServiceRegReq> disownServiceReg();

  inline bool isServiceLookup();
  inline bool hasServiceLookup();
  inline  ::ServiceLookupReq::Builder getServiceLookup();
  inline void setServiceLookup( ::ServiceLookupReq::Reader value);
  inline  ::ServiceLookupReq::Builder initServiceLookup();
  inline void adoptServiceLookup(::capnp::Orphan< ::ServiceLookupReq>&& value);
  inline ::capnp::Orphan< ::ServiceLookupReq> disownServiceLookup();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscoReq::Pipeline {
public:
  typedef DiscoReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DiscoRep::Reader {
public:
  typedef DiscoRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isActorReg() const;
  inline bool hasActorReg() const;
  inline  ::ActorRegRep::Reader getActorReg() const;

  inline bool isServiceReg() const;
  inline bool hasServiceReg() const;
  inline  ::ServiceRegRep::Reader getServiceReg() const;

  inline bool isServiceLookup() const;
  inline bool hasServiceLookup() const;
  inline  ::ServiceLookupRep::Reader getServiceLookup() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DiscoRep::Builder {
public:
  typedef DiscoRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isActorReg();
  inline bool hasActorReg();
  inline  ::ActorRegRep::Builder getActorReg();
  inline void setActorReg( ::ActorRegRep::Reader value);
  inline  ::ActorRegRep::Builder initActorReg();
  inline void adoptActorReg(::capnp::Orphan< ::ActorRegRep>&& value);
  inline ::capnp::Orphan< ::ActorRegRep> disownActorReg();

  inline bool isServiceReg();
  inline bool hasServiceReg();
  inline  ::ServiceRegRep::Builder getServiceReg();
  inline void setServiceReg( ::ServiceRegRep::Reader value);
  inline  ::ServiceRegRep::Builder initServiceReg();
  inline void adoptServiceReg(::capnp::Orphan< ::ServiceRegRep>&& value);
  inline ::capnp::Orphan< ::ServiceRegRep> disownServiceReg();

  inline bool isServiceLookup();
  inline bool hasServiceLookup();
  inline  ::ServiceLookupRep::Builder getServiceLookup();
  inline void setServiceLookup( ::ServiceLookupRep::Reader value);
  inline  ::ServiceLookupRep::Builder initServiceLookup();
  inline void adoptServiceLookup(::capnp::Orphan< ::ServiceLookupRep>&& value);
  inline ::capnp::Orphan< ::ServiceLookupRep> disownServiceLookup();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DiscoRep::Pipeline {
public:
  typedef DiscoRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProviderListUpdate::Reader {
public:
  typedef ProviderListUpdate Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasProviderpath() const;
  inline  ::capnp::Text::Reader getProviderpath() const;

  inline bool hasNewvalues() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getNewvalues() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProviderListUpdate::Builder {
public:
  typedef ProviderListUpdate Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasProviderpath();
  inline  ::capnp::Text::Builder getProviderpath();
  inline void setProviderpath( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initProviderpath(unsigned int size);
  inline void adoptProviderpath(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownProviderpath();

  inline bool hasNewvalues();
  inline  ::capnp::List< ::capnp::Text>::Builder getNewvalues();
  inline void setNewvalues( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setNewvalues(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initNewvalues(unsigned int size);
  inline void adoptNewvalues(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownNewvalues();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProviderListUpdate::Pipeline {
public:
  typedef ProviderListUpdate Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProviderListGet::Reader {
public:
  typedef ProviderListGet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPath() const;
  inline  ::Path::Reader getPath() const;

  inline bool hasClient() const;
  inline  ::Client::Reader getClient() const;

  inline bool hasResults() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getResults() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProviderListGet::Builder {
public:
  typedef ProviderListGet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPath();
  inline  ::Path::Builder getPath();
  inline void setPath( ::Path::Reader value);
  inline  ::Path::Builder initPath();
  inline void adoptPath(::capnp::Orphan< ::Path>&& value);
  inline ::capnp::Orphan< ::Path> disownPath();

  inline bool hasClient();
  inline  ::Client::Builder getClient();
  inline void setClient( ::Client::Reader value);
  inline  ::Client::Builder initClient();
  inline void adoptClient(::capnp::Orphan< ::Client>&& value);
  inline ::capnp::Orphan< ::Client> disownClient();

  inline bool hasResults();
  inline  ::capnp::List< ::capnp::Text>::Builder getResults();
  inline void setResults( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setResults(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initResults(unsigned int size);
  inline void adoptResults(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownResults();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProviderListGet::Pipeline {
public:
  typedef ProviderListGet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Path::Pipeline getPath();
  inline  ::Client::Pipeline getClient();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ProviderListPush::Reader {
public:
  typedef ProviderListPush Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isProviderUpdate() const;
  inline bool hasProviderUpdate() const;
  inline  ::ProviderListUpdate::Reader getProviderUpdate() const;

  inline bool isProviderGet() const;
  inline bool hasProviderGet() const;
  inline  ::ProviderListGet::Reader getProviderGet() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ProviderListPush::Builder {
public:
  typedef ProviderListPush Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isProviderUpdate();
  inline bool hasProviderUpdate();
  inline  ::ProviderListUpdate::Builder getProviderUpdate();
  inline void setProviderUpdate( ::ProviderListUpdate::Reader value);
  inline  ::ProviderListUpdate::Builder initProviderUpdate();
  inline void adoptProviderUpdate(::capnp::Orphan< ::ProviderListUpdate>&& value);
  inline ::capnp::Orphan< ::ProviderListUpdate> disownProviderUpdate();

  inline bool isProviderGet();
  inline bool hasProviderGet();
  inline  ::ProviderListGet::Builder getProviderGet();
  inline void setProviderGet( ::ProviderListGet::Reader value);
  inline  ::ProviderListGet::Builder initProviderGet();
  inline void adoptProviderGet(::capnp::Orphan< ::ProviderListGet>&& value);
  inline ::capnp::Orphan< ::ProviderListGet> disownProviderGet();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ProviderListPush::Pipeline {
public:
  typedef ProviderListPush Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ActorRegReq::Reader::hasAppName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasAppName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getAppName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setAppName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initAppName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptAppName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ActorRegReq::Reader::hasVersion() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasVersion() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ActorRegReq::Reader::hasActorName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasActorName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getActorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setActorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initActorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptActorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::Status ActorRegRep::Reader::getStatus() const {
  return _reader.getDataField< ::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::Status ActorRegRep::Builder::getStatus() {
  return _builder.getDataField< ::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void ActorRegRep::Builder::setStatus( ::Status value) {
  _builder.setDataField< ::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ActorRegRep::Reader::getPort() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t ActorRegRep::Builder::getPort() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ActorRegRep::Builder::setPort( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Path::Reader::hasAppName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Path::Builder::hasAppName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Path::Reader::getAppName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Path::Builder::getAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Path::Builder::setAppName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Path::Builder::initAppName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Path::Builder::adoptAppName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Path::Builder::disownAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Path::Reader::hasMsgType() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Path::Builder::hasMsgType() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Path::Reader::getMsgType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Path::Builder::getMsgType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Path::Builder::setMsgType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Path::Builder::initMsgType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Path::Builder::adoptMsgType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Path::Builder::disownMsgType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::Kind Path::Reader::getKind() const {
  return _reader.getDataField< ::Kind>(
      0 * ::capnp::ELEMENTS);
}

inline  ::Kind Path::Builder::getKind() {
  return _builder.getDataField< ::Kind>(
      0 * ::capnp::ELEMENTS);
}
inline void Path::Builder::setKind( ::Kind value) {
  _builder.setDataField< ::Kind>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::Scope Path::Reader::getScope() const {
  return _reader.getDataField< ::Scope>(
      1 * ::capnp::ELEMENTS);
}

inline  ::Scope Path::Builder::getScope() {
  return _builder.getDataField< ::Scope>(
      1 * ::capnp::ELEMENTS);
}
inline void Path::Builder::setScope( ::Scope value) {
  _builder.setDataField< ::Scope>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Client::Reader::hasActorHost() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Client::Builder::hasActorHost() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Client::Reader::getActorHost() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Client::Builder::getActorHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Client::Builder::setActorHost( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Client::Builder::initActorHost(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Client::Builder::adoptActorHost(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Client::Builder::disownActorHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Client::Reader::hasActorName() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Client::Builder::hasActorName() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Client::Reader::getActorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Client::Builder::getActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Client::Builder::setActorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Client::Builder::initActorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Client::Builder::adoptActorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Client::Builder::disownActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Client::Reader::hasInstanceName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Client::Builder::hasInstanceName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Client::Reader::getInstanceName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Client::Builder::getInstanceName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Client::Builder::setInstanceName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Client::Builder::initInstanceName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Client::Builder::adoptInstanceName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Client::Builder::disownInstanceName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Client::Reader::hasPortName() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Client::Builder::hasPortName() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Client::Reader::getPortName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Client::Builder::getPortName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Client::Builder::setPortName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Client::Builder::initPortName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Client::Builder::adoptPortName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Client::Builder::disownPortName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Socket::Reader::hasHost() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Socket::Builder::hasHost() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Socket::Reader::getHost() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Socket::Builder::getHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Socket::Builder::setHost( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Socket::Builder::initHost(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Socket::Builder::adoptHost(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Socket::Builder::disownHost() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int32_t Socket::Reader::getPort() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t Socket::Builder::getPort() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Socket::Builder::setPort( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ServiceRegReq::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ServiceRegReq::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Path::Reader ServiceRegReq::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::Path>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Path::Builder ServiceRegReq::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::Path>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Path::Pipeline ServiceRegReq::Pipeline::getPath() {
  return  ::Path::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ServiceRegReq::Builder::setPath( ::Path::Reader value) {
  ::capnp::_::PointerHelpers< ::Path>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Path::Builder ServiceRegReq::Builder::initPath() {
  return ::capnp::_::PointerHelpers< ::Path>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ServiceRegReq::Builder::adoptPath(
    ::capnp::Orphan< ::Path>&& value) {
  ::capnp::_::PointerHelpers< ::Path>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Path> ServiceRegReq::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::Path>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ServiceRegReq::Reader::hasSocket() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ServiceRegReq::Builder::hasSocket() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Socket::Reader ServiceRegReq::Reader::getSocket() const {
  return ::capnp::_::PointerHelpers< ::Socket>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Socket::Builder ServiceRegReq::Builder::getSocket() {
  return ::capnp::_::PointerHelpers< ::Socket>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Socket::Pipeline ServiceRegReq::Pipeline::getSocket() {
  return  ::Socket::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ServiceRegReq::Builder::setSocket( ::Socket::Reader value) {
  ::capnp::_::PointerHelpers< ::Socket>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Socket::Builder ServiceRegReq::Builder::initSocket() {
  return ::capnp::_::PointerHelpers< ::Socket>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ServiceRegReq::Builder::adoptSocket(
    ::capnp::Orphan< ::Socket>&& value) {
  ::capnp::_::PointerHelpers< ::Socket>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Socket> ServiceRegReq::Builder::disownSocket() {
  return ::capnp::_::PointerHelpers< ::Socket>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::Status ServiceRegRep::Reader::getStatus() const {
  return _reader.getDataField< ::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::Status ServiceRegRep::Builder::getStatus() {
  return _builder.getDataField< ::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void ServiceRegRep::Builder::setStatus( ::Status value) {
  _builder.setDataField< ::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ServiceLookupReq::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ServiceLookupReq::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Path::Reader ServiceLookupReq::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::Path>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Path::Builder ServiceLookupReq::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::Path>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Path::Pipeline ServiceLookupReq::Pipeline::getPath() {
  return  ::Path::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ServiceLookupReq::Builder::setPath( ::Path::Reader value) {
  ::capnp::_::PointerHelpers< ::Path>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Path::Builder ServiceLookupReq::Builder::initPath() {
  return ::capnp::_::PointerHelpers< ::Path>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ServiceLookupReq::Builder::adoptPath(
    ::capnp::Orphan< ::Path>&& value) {
  ::capnp::_::PointerHelpers< ::Path>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Path> ServiceLookupReq::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::Path>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ServiceLookupReq::Reader::hasClient() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ServiceLookupReq::Builder::hasClient() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Client::Reader ServiceLookupReq::Reader::getClient() const {
  return ::capnp::_::PointerHelpers< ::Client>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Client::Builder ServiceLookupReq::Builder::getClient() {
  return ::capnp::_::PointerHelpers< ::Client>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Client::Pipeline ServiceLookupReq::Pipeline::getClient() {
  return  ::Client::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ServiceLookupReq::Builder::setClient( ::Client::Reader value) {
  ::capnp::_::PointerHelpers< ::Client>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Client::Builder ServiceLookupReq::Builder::initClient() {
  return ::capnp::_::PointerHelpers< ::Client>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ServiceLookupReq::Builder::adoptClient(
    ::capnp::Orphan< ::Client>&& value) {
  ::capnp::_::PointerHelpers< ::Client>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Client> ServiceLookupReq::Builder::disownClient() {
  return ::capnp::_::PointerHelpers< ::Client>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::Status ServiceLookupRep::Reader::getStatus() const {
  return _reader.getDataField< ::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::Status ServiceLookupRep::Builder::getStatus() {
  return _builder.getDataField< ::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void ServiceLookupRep::Builder::setStatus( ::Status value) {
  _builder.setDataField< ::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool ServiceLookupRep::Reader::hasSockets() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ServiceLookupRep::Builder::hasSockets() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Socket>::Reader ServiceLookupRep::Reader::getSockets() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Socket>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Socket>::Builder ServiceLookupRep::Builder::getSockets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Socket>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ServiceLookupRep::Builder::setSockets( ::capnp::List< ::Socket>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Socket>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Socket>::Builder ServiceLookupRep::Builder::initSockets(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Socket>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ServiceLookupRep::Builder::adoptSockets(
    ::capnp::Orphan< ::capnp::List< ::Socket>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Socket>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Socket>> ServiceLookupRep::Builder::disownSockets() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Socket>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoUpd::Reader::hasClient() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoUpd::Builder::hasClient() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Client::Reader DiscoUpd::Reader::getClient() const {
  return ::capnp::_::PointerHelpers< ::Client>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Client::Builder DiscoUpd::Builder::getClient() {
  return ::capnp::_::PointerHelpers< ::Client>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Client::Pipeline DiscoUpd::Pipeline::getClient() {
  return  ::Client::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void DiscoUpd::Builder::setClient( ::Client::Reader value) {
  ::capnp::_::PointerHelpers< ::Client>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Client::Builder DiscoUpd::Builder::initClient() {
  return ::capnp::_::PointerHelpers< ::Client>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoUpd::Builder::adoptClient(
    ::capnp::Orphan< ::Client>&& value) {
  ::capnp::_::PointerHelpers< ::Client>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Client> DiscoUpd::Builder::disownClient() {
  return ::capnp::_::PointerHelpers< ::Client>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::Scope DiscoUpd::Reader::getScope() const {
  return _reader.getDataField< ::Scope>(
      0 * ::capnp::ELEMENTS);
}

inline  ::Scope DiscoUpd::Builder::getScope() {
  return _builder.getDataField< ::Scope>(
      0 * ::capnp::ELEMENTS);
}
inline void DiscoUpd::Builder::setScope( ::Scope value) {
  _builder.setDataField< ::Scope>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DiscoUpd::Reader::hasSocket() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DiscoUpd::Builder::hasSocket() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Socket::Reader DiscoUpd::Reader::getSocket() const {
  return ::capnp::_::PointerHelpers< ::Socket>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Socket::Builder DiscoUpd::Builder::getSocket() {
  return ::capnp::_::PointerHelpers< ::Socket>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Socket::Pipeline DiscoUpd::Pipeline::getSocket() {
  return  ::Socket::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void DiscoUpd::Builder::setSocket( ::Socket::Reader value) {
  ::capnp::_::PointerHelpers< ::Socket>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Socket::Builder DiscoUpd::Builder::initSocket() {
  return ::capnp::_::PointerHelpers< ::Socket>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DiscoUpd::Builder::adoptSocket(
    ::capnp::Orphan< ::Socket>&& value) {
  ::capnp::_::PointerHelpers< ::Socket>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Socket> DiscoUpd::Builder::disownSocket() {
  return ::capnp::_::PointerHelpers< ::Socket>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::DiscoReq::Which DiscoReq::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::DiscoReq::Which DiscoReq::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool DiscoReq::Reader::isActorReg() const {
  return which() == DiscoReq::ACTOR_REG;
}
inline bool DiscoReq::Builder::isActorReg() {
  return which() == DiscoReq::ACTOR_REG;
}
inline bool DiscoReq::Reader::hasActorReg() const {
  if (which() != DiscoReq::ACTOR_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoReq::Builder::hasActorReg() {
  if (which() != DiscoReq::ACTOR_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ActorRegReq::Reader DiscoReq::Reader::getActorReg() const {
  KJ_IREQUIRE(which() == DiscoReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ActorRegReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ActorRegReq::Builder DiscoReq::Builder::getActorReg() {
  KJ_IREQUIRE(which() == DiscoReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ActorRegReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::setActorReg( ::ActorRegReq::Reader value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::ActorRegReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ActorRegReq::Builder DiscoReq::Builder::initActorReg() {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::ACTOR_REG);
  return ::capnp::_::PointerHelpers< ::ActorRegReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::adoptActorReg(
    ::capnp::Orphan< ::ActorRegReq>&& value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::ActorRegReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ActorRegReq> DiscoReq::Builder::disownActorReg() {
  KJ_IREQUIRE(which() == DiscoReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ActorRegReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoReq::Reader::isServiceReg() const {
  return which() == DiscoReq::SERVICE_REG;
}
inline bool DiscoReq::Builder::isServiceReg() {
  return which() == DiscoReq::SERVICE_REG;
}
inline bool DiscoReq::Reader::hasServiceReg() const {
  if (which() != DiscoReq::SERVICE_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoReq::Builder::hasServiceReg() {
  if (which() != DiscoReq::SERVICE_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ServiceRegReq::Reader DiscoReq::Reader::getServiceReg() const {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceRegReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ServiceRegReq::Builder DiscoReq::Builder::getServiceReg() {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceRegReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::setServiceReg( ::ServiceRegReq::Reader value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_REG);
  ::capnp::_::PointerHelpers< ::ServiceRegReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ServiceRegReq::Builder DiscoReq::Builder::initServiceReg() {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_REG);
  return ::capnp::_::PointerHelpers< ::ServiceRegReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::adoptServiceReg(
    ::capnp::Orphan< ::ServiceRegReq>&& value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_REG);
  ::capnp::_::PointerHelpers< ::ServiceRegReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ServiceRegReq> DiscoReq::Builder::disownServiceReg() {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceRegReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoReq::Reader::isServiceLookup() const {
  return which() == DiscoReq::SERVICE_LOOKUP;
}
inline bool DiscoReq::Builder::isServiceLookup() {
  return which() == DiscoReq::SERVICE_LOOKUP;
}
inline bool DiscoReq::Reader::hasServiceLookup() const {
  if (which() != DiscoReq::SERVICE_LOOKUP) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoReq::Builder::hasServiceLookup() {
  if (which() != DiscoReq::SERVICE_LOOKUP) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ServiceLookupReq::Reader DiscoReq::Reader::getServiceLookup() const {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceLookupReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ServiceLookupReq::Builder DiscoReq::Builder::getServiceLookup() {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceLookupReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::setServiceLookup( ::ServiceLookupReq::Reader value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_LOOKUP);
  ::capnp::_::PointerHelpers< ::ServiceLookupReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ServiceLookupReq::Builder DiscoReq::Builder::initServiceLookup() {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_LOOKUP);
  return ::capnp::_::PointerHelpers< ::ServiceLookupReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoReq::Builder::adoptServiceLookup(
    ::capnp::Orphan< ::ServiceLookupReq>&& value) {
  _builder.setDataField<DiscoReq::Which>(
      0 * ::capnp::ELEMENTS, DiscoReq::SERVICE_LOOKUP);
  ::capnp::_::PointerHelpers< ::ServiceLookupReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ServiceLookupReq> DiscoReq::Builder::disownServiceLookup() {
  KJ_IREQUIRE(which() == DiscoReq::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceLookupReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::DiscoRep::Which DiscoRep::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::DiscoRep::Which DiscoRep::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool DiscoRep::Reader::isActorReg() const {
  return which() == DiscoRep::ACTOR_REG;
}
inline bool DiscoRep::Builder::isActorReg() {
  return which() == DiscoRep::ACTOR_REG;
}
inline bool DiscoRep::Reader::hasActorReg() const {
  if (which() != DiscoRep::ACTOR_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoRep::Builder::hasActorReg() {
  if (which() != DiscoRep::ACTOR_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ActorRegRep::Reader DiscoRep::Reader::getActorReg() const {
  KJ_IREQUIRE(which() == DiscoRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ActorRegRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ActorRegRep::Builder DiscoRep::Builder::getActorReg() {
  KJ_IREQUIRE(which() == DiscoRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ActorRegRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::setActorReg( ::ActorRegRep::Reader value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::ActorRegRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ActorRegRep::Builder DiscoRep::Builder::initActorReg() {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::ACTOR_REG);
  return ::capnp::_::PointerHelpers< ::ActorRegRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::adoptActorReg(
    ::capnp::Orphan< ::ActorRegRep>&& value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::ActorRegRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ActorRegRep> DiscoRep::Builder::disownActorReg() {
  KJ_IREQUIRE(which() == DiscoRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ActorRegRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoRep::Reader::isServiceReg() const {
  return which() == DiscoRep::SERVICE_REG;
}
inline bool DiscoRep::Builder::isServiceReg() {
  return which() == DiscoRep::SERVICE_REG;
}
inline bool DiscoRep::Reader::hasServiceReg() const {
  if (which() != DiscoRep::SERVICE_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoRep::Builder::hasServiceReg() {
  if (which() != DiscoRep::SERVICE_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ServiceRegRep::Reader DiscoRep::Reader::getServiceReg() const {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceRegRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ServiceRegRep::Builder DiscoRep::Builder::getServiceReg() {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceRegRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::setServiceReg( ::ServiceRegRep::Reader value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_REG);
  ::capnp::_::PointerHelpers< ::ServiceRegRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ServiceRegRep::Builder DiscoRep::Builder::initServiceReg() {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_REG);
  return ::capnp::_::PointerHelpers< ::ServiceRegRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::adoptServiceReg(
    ::capnp::Orphan< ::ServiceRegRep>&& value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_REG);
  ::capnp::_::PointerHelpers< ::ServiceRegRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ServiceRegRep> DiscoRep::Builder::disownServiceReg() {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceRegRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DiscoRep::Reader::isServiceLookup() const {
  return which() == DiscoRep::SERVICE_LOOKUP;
}
inline bool DiscoRep::Builder::isServiceLookup() {
  return which() == DiscoRep::SERVICE_LOOKUP;
}
inline bool DiscoRep::Reader::hasServiceLookup() const {
  if (which() != DiscoRep::SERVICE_LOOKUP) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DiscoRep::Builder::hasServiceLookup() {
  if (which() != DiscoRep::SERVICE_LOOKUP) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ServiceLookupRep::Reader DiscoRep::Reader::getServiceLookup() const {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceLookupRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ServiceLookupRep::Builder DiscoRep::Builder::getServiceLookup() {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceLookupRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::setServiceLookup( ::ServiceLookupRep::Reader value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_LOOKUP);
  ::capnp::_::PointerHelpers< ::ServiceLookupRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ServiceLookupRep::Builder DiscoRep::Builder::initServiceLookup() {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_LOOKUP);
  return ::capnp::_::PointerHelpers< ::ServiceLookupRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DiscoRep::Builder::adoptServiceLookup(
    ::capnp::Orphan< ::ServiceLookupRep>&& value) {
  _builder.setDataField<DiscoRep::Which>(
      0 * ::capnp::ELEMENTS, DiscoRep::SERVICE_LOOKUP);
  ::capnp::_::PointerHelpers< ::ServiceLookupRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ServiceLookupRep> DiscoRep::Builder::disownServiceLookup() {
  KJ_IREQUIRE(which() == DiscoRep::SERVICE_LOOKUP,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ServiceLookupRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ProviderListUpdate::Reader::hasProviderpath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListUpdate::Builder::hasProviderpath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ProviderListUpdate::Reader::getProviderpath() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ProviderListUpdate::Builder::getProviderpath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListUpdate::Builder::setProviderpath( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ProviderListUpdate::Builder::initProviderpath(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ProviderListUpdate::Builder::adoptProviderpath(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ProviderListUpdate::Builder::disownProviderpath() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ProviderListUpdate::Reader::hasNewvalues() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListUpdate::Builder::hasNewvalues() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader ProviderListUpdate::Reader::getNewvalues() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder ProviderListUpdate::Builder::getNewvalues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ProviderListUpdate::Builder::setNewvalues( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void ProviderListUpdate::Builder::setNewvalues(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder ProviderListUpdate::Builder::initNewvalues(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ProviderListUpdate::Builder::adoptNewvalues(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> ProviderListUpdate::Builder::disownNewvalues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ProviderListGet::Reader::hasPath() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListGet::Builder::hasPath() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::Path::Reader ProviderListGet::Reader::getPath() const {
  return ::capnp::_::PointerHelpers< ::Path>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::Path::Builder ProviderListGet::Builder::getPath() {
  return ::capnp::_::PointerHelpers< ::Path>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Path::Pipeline ProviderListGet::Pipeline::getPath() {
  return  ::Path::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ProviderListGet::Builder::setPath( ::Path::Reader value) {
  ::capnp::_::PointerHelpers< ::Path>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::Path::Builder ProviderListGet::Builder::initPath() {
  return ::capnp::_::PointerHelpers< ::Path>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListGet::Builder::adoptPath(
    ::capnp::Orphan< ::Path>&& value) {
  ::capnp::_::PointerHelpers< ::Path>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Path> ProviderListGet::Builder::disownPath() {
  return ::capnp::_::PointerHelpers< ::Path>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ProviderListGet::Reader::hasClient() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListGet::Builder::hasClient() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::Client::Reader ProviderListGet::Reader::getClient() const {
  return ::capnp::_::PointerHelpers< ::Client>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::Client::Builder ProviderListGet::Builder::getClient() {
  return ::capnp::_::PointerHelpers< ::Client>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Client::Pipeline ProviderListGet::Pipeline::getClient() {
  return  ::Client::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ProviderListGet::Builder::setClient( ::Client::Reader value) {
  ::capnp::_::PointerHelpers< ::Client>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::Client::Builder ProviderListGet::Builder::initClient() {
  return ::capnp::_::PointerHelpers< ::Client>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ProviderListGet::Builder::adoptClient(
    ::capnp::Orphan< ::Client>&& value) {
  ::capnp::_::PointerHelpers< ::Client>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Client> ProviderListGet::Builder::disownClient() {
  return ::capnp::_::PointerHelpers< ::Client>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ProviderListGet::Reader::hasResults() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListGet::Builder::hasResults() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader ProviderListGet::Reader::getResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder ProviderListGet::Builder::getResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ProviderListGet::Builder::setResults( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void ProviderListGet::Builder::setResults(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder ProviderListGet::Builder::initResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ProviderListGet::Builder::adoptResults(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> ProviderListGet::Builder::disownResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::ProviderListPush::Which ProviderListPush::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::ProviderListPush::Which ProviderListPush::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool ProviderListPush::Reader::isProviderUpdate() const {
  return which() == ProviderListPush::PROVIDER_UPDATE;
}
inline bool ProviderListPush::Builder::isProviderUpdate() {
  return which() == ProviderListPush::PROVIDER_UPDATE;
}
inline bool ProviderListPush::Reader::hasProviderUpdate() const {
  if (which() != ProviderListPush::PROVIDER_UPDATE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListPush::Builder::hasProviderUpdate() {
  if (which() != ProviderListPush::PROVIDER_UPDATE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ProviderListUpdate::Reader ProviderListPush::Reader::getProviderUpdate() const {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_UPDATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ProviderListUpdate>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ProviderListUpdate::Builder ProviderListPush::Builder::getProviderUpdate() {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_UPDATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ProviderListUpdate>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListPush::Builder::setProviderUpdate( ::ProviderListUpdate::Reader value) {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_UPDATE);
  ::capnp::_::PointerHelpers< ::ProviderListUpdate>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ProviderListUpdate::Builder ProviderListPush::Builder::initProviderUpdate() {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_UPDATE);
  return ::capnp::_::PointerHelpers< ::ProviderListUpdate>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListPush::Builder::adoptProviderUpdate(
    ::capnp::Orphan< ::ProviderListUpdate>&& value) {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_UPDATE);
  ::capnp::_::PointerHelpers< ::ProviderListUpdate>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ProviderListUpdate> ProviderListPush::Builder::disownProviderUpdate() {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_UPDATE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ProviderListUpdate>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ProviderListPush::Reader::isProviderGet() const {
  return which() == ProviderListPush::PROVIDER_GET;
}
inline bool ProviderListPush::Builder::isProviderGet() {
  return which() == ProviderListPush::PROVIDER_GET;
}
inline bool ProviderListPush::Reader::hasProviderGet() const {
  if (which() != ProviderListPush::PROVIDER_GET) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ProviderListPush::Builder::hasProviderGet() {
  if (which() != ProviderListPush::PROVIDER_GET) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::ProviderListGet::Reader ProviderListPush::Reader::getProviderGet() const {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_GET,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ProviderListGet>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::ProviderListGet::Builder ProviderListPush::Builder::getProviderGet() {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_GET,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ProviderListGet>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListPush::Builder::setProviderGet( ::ProviderListGet::Reader value) {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_GET);
  ::capnp::_::PointerHelpers< ::ProviderListGet>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::ProviderListGet::Builder ProviderListPush::Builder::initProviderGet() {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_GET);
  return ::capnp::_::PointerHelpers< ::ProviderListGet>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ProviderListPush::Builder::adoptProviderGet(
    ::capnp::Orphan< ::ProviderListGet>&& value) {
  _builder.setDataField<ProviderListPush::Which>(
      0 * ::capnp::ELEMENTS, ProviderListPush::PROVIDER_GET);
  ::capnp::_::PointerHelpers< ::ProviderListGet>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ProviderListGet> ProviderListPush::Builder::disownProviderGet() {
  KJ_IREQUIRE(which() == ProviderListPush::PROVIDER_GET,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::ProviderListGet>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_bfb632a00018ca1b_
