// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: deplo.capnp

#ifndef CAPNP_INCLUDED_b487bf324bf367d9_
#define CAPNP_INCLUDED_b487bf324bf367d9_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(90a50fbb6fae9937);
enum class Status_90a50fbb6fae9937: uint16_t {
  OK,
  ERR,
};
CAPNP_DECLARE_ENUM(Status, 90a50fbb6fae9937);
CAPNP_DECLARE_SCHEMA(82b106e67d610c70);
CAPNP_DECLARE_SCHEMA(c6dc6f1dc29ab307);
CAPNP_DECLARE_SCHEMA(c50f4586e3d6e495);
CAPNP_DECLARE_SCHEMA(945ac2f67b3083dd);
CAPNP_DECLARE_SCHEMA(9bc319be449859da);
CAPNP_DECLARE_SCHEMA(c15c8eb36b7f2bc4);
CAPNP_DECLARE_SCHEMA(be01afc0b8b3eba5);
CAPNP_DECLARE_SCHEMA(999fb44bdc4cb017);
CAPNP_DECLARE_SCHEMA(903b010fb7971f5e);
CAPNP_DECLARE_SCHEMA(983375abf147d920);
CAPNP_DECLARE_SCHEMA(cef18fa40367ff71);
CAPNP_DECLARE_SCHEMA(912a566c082d693b);
CAPNP_DECLARE_SCHEMA(a14c0f51e4368c0b);
CAPNP_DECLARE_SCHEMA(b10759629e25715c);

}  // namespace schemas
}  // namespace capnp

namespace riaps {
namespace deplo {

typedef ::capnp::schemas::Status_90a50fbb6fae9937 Status;

struct ActorRegReq {
  ActorRegReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82b106e67d610c70, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ActorRegRep {
  ActorRegRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6dc6f1dc29ab307, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeviceArg {
  DeviceArg() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c50f4586e3d6e495, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeviceRegReq {
  DeviceRegReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(945ac2f67b3083dd, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeviceRegRep {
  DeviceRegRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9bc319be449859da, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeviceUnregReq {
  DeviceUnregReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c15c8eb36b7f2bc4, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeviceUnregRep {
  DeviceUnregRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be01afc0b8b3eba5, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeplReq {
  DeplReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACTOR_REG,
    DEVICE_REG,
    DEVICE_UNREG,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(999fb44bdc4cb017, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeplRep {
  DeplRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACTOR_REG,
    DEVICE_REG,
    DEVICE_UNREG,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(903b010fb7971f5e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ResCPUX {
  ResCPUX() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(983375abf147d920, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ResMemX {
  ResMemX() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cef18fa40367ff71, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ResSpcX {
  ResSpcX() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(912a566c082d693b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ResNetX {
  ResNetX() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a14c0f51e4368c0b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ResMsg {
  ResMsg() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    RES_C_P_U_X,
    RES_MEM_X,
    RES_SPC_X,
    RES_NET_X,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b10759629e25715c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ActorRegReq::Reader {
public:
  typedef ActorRegReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppName() const;
  inline  ::capnp::Text::Reader getAppName() const;

  inline bool hasVersion() const;
  inline  ::capnp::Text::Reader getVersion() const;

  inline bool hasActorName() const;
  inline  ::capnp::Text::Reader getActorName() const;

  inline  ::int32_t getPid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorRegReq::Builder {
public:
  typedef ActorRegReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppName();
  inline  ::capnp::Text::Builder getAppName();
  inline void setAppName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppName(unsigned int size);
  inline void adoptAppName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppName();

  inline bool hasVersion();
  inline  ::capnp::Text::Builder getVersion();
  inline void setVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersion(unsigned int size);
  inline void adoptVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersion();

  inline bool hasActorName();
  inline  ::capnp::Text::Builder getActorName();
  inline void setActorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initActorName(unsigned int size);
  inline void adoptActorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownActorName();

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorRegReq::Pipeline {
public:
  typedef ActorRegReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActorRegRep::Reader {
public:
  typedef ActorRegRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::riaps::deplo::Status getStatus() const;

  inline  ::int32_t getPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorRegRep::Builder {
public:
  typedef ActorRegRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::riaps::deplo::Status getStatus();
  inline void setStatus( ::riaps::deplo::Status value);

  inline  ::int32_t getPort();
  inline void setPort( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorRegRep::Pipeline {
public:
  typedef ActorRegRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceArg::Reader {
public:
  typedef DeviceArg Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceArg::Builder {
public:
  typedef DeviceArg Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceArg::Pipeline {
public:
  typedef DeviceArg Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceRegReq::Reader {
public:
  typedef DeviceRegReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppName() const;
  inline  ::capnp::Text::Reader getAppName() const;

  inline bool hasModelName() const;
  inline  ::capnp::Text::Reader getModelName() const;

  inline bool hasTypeName() const;
  inline  ::capnp::Text::Reader getTypeName() const;

  inline bool hasDeviceArgs() const;
  inline  ::capnp::List< ::riaps::deplo::DeviceArg>::Reader getDeviceArgs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceRegReq::Builder {
public:
  typedef DeviceRegReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppName();
  inline  ::capnp::Text::Builder getAppName();
  inline void setAppName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppName(unsigned int size);
  inline void adoptAppName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppName();

  inline bool hasModelName();
  inline  ::capnp::Text::Builder getModelName();
  inline void setModelName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initModelName(unsigned int size);
  inline void adoptModelName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownModelName();

  inline bool hasTypeName();
  inline  ::capnp::Text::Builder getTypeName();
  inline void setTypeName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTypeName(unsigned int size);
  inline void adoptTypeName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTypeName();

  inline bool hasDeviceArgs();
  inline  ::capnp::List< ::riaps::deplo::DeviceArg>::Builder getDeviceArgs();
  inline void setDeviceArgs( ::capnp::List< ::riaps::deplo::DeviceArg>::Reader value);
  inline  ::capnp::List< ::riaps::deplo::DeviceArg>::Builder initDeviceArgs(unsigned int size);
  inline void adoptDeviceArgs(::capnp::Orphan< ::capnp::List< ::riaps::deplo::DeviceArg>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::riaps::deplo::DeviceArg>> disownDeviceArgs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceRegReq::Pipeline {
public:
  typedef DeviceRegReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceRegRep::Reader {
public:
  typedef DeviceRegRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::riaps::deplo::Status getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceRegRep::Builder {
public:
  typedef DeviceRegRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::riaps::deplo::Status getStatus();
  inline void setStatus( ::riaps::deplo::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceRegRep::Pipeline {
public:
  typedef DeviceRegRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceUnregReq::Reader {
public:
  typedef DeviceUnregReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppName() const;
  inline  ::capnp::Text::Reader getAppName() const;

  inline bool hasModelName() const;
  inline  ::capnp::Text::Reader getModelName() const;

  inline bool hasTypeName() const;
  inline  ::capnp::Text::Reader getTypeName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceUnregReq::Builder {
public:
  typedef DeviceUnregReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppName();
  inline  ::capnp::Text::Builder getAppName();
  inline void setAppName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppName(unsigned int size);
  inline void adoptAppName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppName();

  inline bool hasModelName();
  inline  ::capnp::Text::Builder getModelName();
  inline void setModelName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initModelName(unsigned int size);
  inline void adoptModelName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownModelName();

  inline bool hasTypeName();
  inline  ::capnp::Text::Builder getTypeName();
  inline void setTypeName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTypeName(unsigned int size);
  inline void adoptTypeName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTypeName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceUnregReq::Pipeline {
public:
  typedef DeviceUnregReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceUnregRep::Reader {
public:
  typedef DeviceUnregRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::riaps::deplo::Status getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceUnregRep::Builder {
public:
  typedef DeviceUnregRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::riaps::deplo::Status getStatus();
  inline void setStatus( ::riaps::deplo::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceUnregRep::Pipeline {
public:
  typedef DeviceUnregRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeplReq::Reader {
public:
  typedef DeplReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isActorReg() const;
  inline bool hasActorReg() const;
  inline  ::riaps::deplo::ActorRegReq::Reader getActorReg() const;

  inline bool isDeviceReg() const;
  inline bool hasDeviceReg() const;
  inline  ::riaps::deplo::DeviceRegReq::Reader getDeviceReg() const;

  inline bool isDeviceUnreg() const;
  inline bool hasDeviceUnreg() const;
  inline  ::riaps::deplo::DeviceUnregReq::Reader getDeviceUnreg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeplReq::Builder {
public:
  typedef DeplReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isActorReg();
  inline bool hasActorReg();
  inline  ::riaps::deplo::ActorRegReq::Builder getActorReg();
  inline void setActorReg( ::riaps::deplo::ActorRegReq::Reader value);
  inline  ::riaps::deplo::ActorRegReq::Builder initActorReg();
  inline void adoptActorReg(::capnp::Orphan< ::riaps::deplo::ActorRegReq>&& value);
  inline ::capnp::Orphan< ::riaps::deplo::ActorRegReq> disownActorReg();

  inline bool isDeviceReg();
  inline bool hasDeviceReg();
  inline  ::riaps::deplo::DeviceRegReq::Builder getDeviceReg();
  inline void setDeviceReg( ::riaps::deplo::DeviceRegReq::Reader value);
  inline  ::riaps::deplo::DeviceRegReq::Builder initDeviceReg();
  inline void adoptDeviceReg(::capnp::Orphan< ::riaps::deplo::DeviceRegReq>&& value);
  inline ::capnp::Orphan< ::riaps::deplo::DeviceRegReq> disownDeviceReg();

  inline bool isDeviceUnreg();
  inline bool hasDeviceUnreg();
  inline  ::riaps::deplo::DeviceUnregReq::Builder getDeviceUnreg();
  inline void setDeviceUnreg( ::riaps::deplo::DeviceUnregReq::Reader value);
  inline  ::riaps::deplo::DeviceUnregReq::Builder initDeviceUnreg();
  inline void adoptDeviceUnreg(::capnp::Orphan< ::riaps::deplo::DeviceUnregReq>&& value);
  inline ::capnp::Orphan< ::riaps::deplo::DeviceUnregReq> disownDeviceUnreg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeplReq::Pipeline {
public:
  typedef DeplReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeplRep::Reader {
public:
  typedef DeplRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isActorReg() const;
  inline bool hasActorReg() const;
  inline  ::riaps::deplo::ActorRegRep::Reader getActorReg() const;

  inline bool isDeviceReg() const;
  inline bool hasDeviceReg() const;
  inline  ::riaps::deplo::DeviceRegRep::Reader getDeviceReg() const;

  inline bool isDeviceUnreg() const;
  inline bool hasDeviceUnreg() const;
  inline  ::riaps::deplo::DeviceUnregRep::Reader getDeviceUnreg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeplRep::Builder {
public:
  typedef DeplRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isActorReg();
  inline bool hasActorReg();
  inline  ::riaps::deplo::ActorRegRep::Builder getActorReg();
  inline void setActorReg( ::riaps::deplo::ActorRegRep::Reader value);
  inline  ::riaps::deplo::ActorRegRep::Builder initActorReg();
  inline void adoptActorReg(::capnp::Orphan< ::riaps::deplo::ActorRegRep>&& value);
  inline ::capnp::Orphan< ::riaps::deplo::ActorRegRep> disownActorReg();

  inline bool isDeviceReg();
  inline bool hasDeviceReg();
  inline  ::riaps::deplo::DeviceRegRep::Builder getDeviceReg();
  inline void setDeviceReg( ::riaps::deplo::DeviceRegRep::Reader value);
  inline  ::riaps::deplo::DeviceRegRep::Builder initDeviceReg();
  inline void adoptDeviceReg(::capnp::Orphan< ::riaps::deplo::DeviceRegRep>&& value);
  inline ::capnp::Orphan< ::riaps::deplo::DeviceRegRep> disownDeviceReg();

  inline bool isDeviceUnreg();
  inline bool hasDeviceUnreg();
  inline  ::riaps::deplo::DeviceUnregRep::Builder getDeviceUnreg();
  inline void setDeviceUnreg( ::riaps::deplo::DeviceUnregRep::Reader value);
  inline  ::riaps::deplo::DeviceUnregRep::Builder initDeviceUnreg();
  inline void adoptDeviceUnreg(::capnp::Orphan< ::riaps::deplo::DeviceUnregRep>&& value);
  inline ::capnp::Orphan< ::riaps::deplo::DeviceUnregRep> disownDeviceUnreg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeplRep::Pipeline {
public:
  typedef DeplRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ResCPUX::Reader {
public:
  typedef ResCPUX Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMsg() const;
  inline  ::capnp::Text::Reader getMsg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ResCPUX::Builder {
public:
  typedef ResCPUX Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMsg();
  inline  ::capnp::Text::Builder getMsg();
  inline void setMsg( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMsg(unsigned int size);
  inline void adoptMsg(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMsg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ResCPUX::Pipeline {
public:
  typedef ResCPUX Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ResMemX::Reader {
public:
  typedef ResMemX Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMsg() const;
  inline  ::capnp::Text::Reader getMsg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ResMemX::Builder {
public:
  typedef ResMemX Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMsg();
  inline  ::capnp::Text::Builder getMsg();
  inline void setMsg( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMsg(unsigned int size);
  inline void adoptMsg(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMsg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ResMemX::Pipeline {
public:
  typedef ResMemX Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ResSpcX::Reader {
public:
  typedef ResSpcX Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMsg() const;
  inline  ::capnp::Text::Reader getMsg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ResSpcX::Builder {
public:
  typedef ResSpcX Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMsg();
  inline  ::capnp::Text::Builder getMsg();
  inline void setMsg( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMsg(unsigned int size);
  inline void adoptMsg(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMsg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ResSpcX::Pipeline {
public:
  typedef ResSpcX Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ResNetX::Reader {
public:
  typedef ResNetX Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMsg() const;
  inline  ::capnp::Text::Reader getMsg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ResNetX::Builder {
public:
  typedef ResNetX Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMsg();
  inline  ::capnp::Text::Builder getMsg();
  inline void setMsg( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMsg(unsigned int size);
  inline void adoptMsg(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMsg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ResNetX::Pipeline {
public:
  typedef ResNetX Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ResMsg::Reader {
public:
  typedef ResMsg Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isResCPUX() const;
  inline bool hasResCPUX() const;
  inline  ::riaps::deplo::ResCPUX::Reader getResCPUX() const;

  inline bool isResMemX() const;
  inline bool hasResMemX() const;
  inline  ::riaps::deplo::ResMemX::Reader getResMemX() const;

  inline bool isResSpcX() const;
  inline bool hasResSpcX() const;
  inline  ::riaps::deplo::ResSpcX::Reader getResSpcX() const;

  inline bool isResNetX() const;
  inline bool hasResNetX() const;
  inline  ::riaps::deplo::ResNetX::Reader getResNetX() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ResMsg::Builder {
public:
  typedef ResMsg Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isResCPUX();
  inline bool hasResCPUX();
  inline  ::riaps::deplo::ResCPUX::Builder getResCPUX();
  inline void setResCPUX( ::riaps::deplo::ResCPUX::Reader value);
  inline  ::riaps::deplo::ResCPUX::Builder initResCPUX();
  inline void adoptResCPUX(::capnp::Orphan< ::riaps::deplo::ResCPUX>&& value);
  inline ::capnp::Orphan< ::riaps::deplo::ResCPUX> disownResCPUX();

  inline bool isResMemX();
  inline bool hasResMemX();
  inline  ::riaps::deplo::ResMemX::Builder getResMemX();
  inline void setResMemX( ::riaps::deplo::ResMemX::Reader value);
  inline  ::riaps::deplo::ResMemX::Builder initResMemX();
  inline void adoptResMemX(::capnp::Orphan< ::riaps::deplo::ResMemX>&& value);
  inline ::capnp::Orphan< ::riaps::deplo::ResMemX> disownResMemX();

  inline bool isResSpcX();
  inline bool hasResSpcX();
  inline  ::riaps::deplo::ResSpcX::Builder getResSpcX();
  inline void setResSpcX( ::riaps::deplo::ResSpcX::Reader value);
  inline  ::riaps::deplo::ResSpcX::Builder initResSpcX();
  inline void adoptResSpcX(::capnp::Orphan< ::riaps::deplo::ResSpcX>&& value);
  inline ::capnp::Orphan< ::riaps::deplo::ResSpcX> disownResSpcX();

  inline bool isResNetX();
  inline bool hasResNetX();
  inline  ::riaps::deplo::ResNetX::Builder getResNetX();
  inline void setResNetX( ::riaps::deplo::ResNetX::Reader value);
  inline  ::riaps::deplo::ResNetX::Builder initResNetX();
  inline void adoptResNetX(::capnp::Orphan< ::riaps::deplo::ResNetX>&& value);
  inline ::capnp::Orphan< ::riaps::deplo::ResNetX> disownResNetX();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ResMsg::Pipeline {
public:
  typedef ResMsg Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ActorRegReq::Reader::hasAppName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasAppName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getAppName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setAppName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initAppName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptAppName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ActorRegReq::Reader::hasVersion() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasVersion() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ActorRegReq::Reader::hasActorName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasActorName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getActorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setActorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initActorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptActorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::int32_t ActorRegReq::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t ActorRegReq::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ActorRegReq::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::riaps::deplo::Status ActorRegRep::Reader::getStatus() const {
  return _reader.getDataField< ::riaps::deplo::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::deplo::Status ActorRegRep::Builder::getStatus() {
  return _builder.getDataField< ::riaps::deplo::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void ActorRegRep::Builder::setStatus( ::riaps::deplo::Status value) {
  _builder.setDataField< ::riaps::deplo::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ActorRegRep::Reader::getPort() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t ActorRegRep::Builder::getPort() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ActorRegRep::Builder::setPort( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool DeviceArg::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeviceArg::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceArg::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceArg::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeviceArg::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceArg::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DeviceArg::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceArg::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DeviceArg::Reader::hasValue() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DeviceArg::Builder::hasValue() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceArg::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceArg::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DeviceArg::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceArg::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void DeviceArg::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceArg::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool DeviceRegReq::Reader::hasAppName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeviceRegReq::Builder::hasAppName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceRegReq::Reader::getAppName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::getAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeviceRegReq::Builder::setAppName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::initAppName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DeviceRegReq::Builder::adoptAppName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceRegReq::Builder::disownAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DeviceRegReq::Reader::hasModelName() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DeviceRegReq::Builder::hasModelName() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceRegReq::Reader::getModelName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::getModelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DeviceRegReq::Builder::setModelName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::initModelName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void DeviceRegReq::Builder::adoptModelName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceRegReq::Builder::disownModelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool DeviceRegReq::Reader::hasTypeName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool DeviceRegReq::Builder::hasTypeName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceRegReq::Reader::getTypeName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::getTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void DeviceRegReq::Builder::setTypeName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::initTypeName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void DeviceRegReq::Builder::adoptTypeName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceRegReq::Builder::disownTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool DeviceRegReq::Reader::hasDeviceArgs() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool DeviceRegReq::Builder::hasDeviceArgs() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::riaps::deplo::DeviceArg>::Reader DeviceRegReq::Reader::getDeviceArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::deplo::DeviceArg>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::riaps::deplo::DeviceArg>::Builder DeviceRegReq::Builder::getDeviceArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::deplo::DeviceArg>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void DeviceRegReq::Builder::setDeviceArgs( ::capnp::List< ::riaps::deplo::DeviceArg>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::deplo::DeviceArg>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::riaps::deplo::DeviceArg>::Builder DeviceRegReq::Builder::initDeviceArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::deplo::DeviceArg>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void DeviceRegReq::Builder::adoptDeviceArgs(
    ::capnp::Orphan< ::capnp::List< ::riaps::deplo::DeviceArg>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::deplo::DeviceArg>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::riaps::deplo::DeviceArg>> DeviceRegReq::Builder::disownDeviceArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::deplo::DeviceArg>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::riaps::deplo::Status DeviceRegRep::Reader::getStatus() const {
  return _reader.getDataField< ::riaps::deplo::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::deplo::Status DeviceRegRep::Builder::getStatus() {
  return _builder.getDataField< ::riaps::deplo::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void DeviceRegRep::Builder::setStatus( ::riaps::deplo::Status value) {
  _builder.setDataField< ::riaps::deplo::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DeviceUnregReq::Reader::hasAppName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeviceUnregReq::Builder::hasAppName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceUnregReq::Reader::getAppName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::getAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeviceUnregReq::Builder::setAppName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::initAppName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DeviceUnregReq::Builder::adoptAppName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceUnregReq::Builder::disownAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DeviceUnregReq::Reader::hasModelName() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DeviceUnregReq::Builder::hasModelName() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceUnregReq::Reader::getModelName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::getModelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DeviceUnregReq::Builder::setModelName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::initModelName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void DeviceUnregReq::Builder::adoptModelName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceUnregReq::Builder::disownModelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool DeviceUnregReq::Reader::hasTypeName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool DeviceUnregReq::Builder::hasTypeName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceUnregReq::Reader::getTypeName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::getTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void DeviceUnregReq::Builder::setTypeName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::initTypeName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void DeviceUnregReq::Builder::adoptTypeName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceUnregReq::Builder::disownTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::riaps::deplo::Status DeviceUnregRep::Reader::getStatus() const {
  return _reader.getDataField< ::riaps::deplo::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::deplo::Status DeviceUnregRep::Builder::getStatus() {
  return _builder.getDataField< ::riaps::deplo::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void DeviceUnregRep::Builder::setStatus( ::riaps::deplo::Status value) {
  _builder.setDataField< ::riaps::deplo::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::riaps::deplo::DeplReq::Which DeplReq::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::riaps::deplo::DeplReq::Which DeplReq::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool DeplReq::Reader::isActorReg() const {
  return which() == DeplReq::ACTOR_REG;
}
inline bool DeplReq::Builder::isActorReg() {
  return which() == DeplReq::ACTOR_REG;
}
inline bool DeplReq::Reader::hasActorReg() const {
  if (which() != DeplReq::ACTOR_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeplReq::Builder::hasActorReg() {
  if (which() != DeplReq::ACTOR_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::deplo::ActorRegReq::Reader DeplReq::Reader::getActorReg() const {
  KJ_IREQUIRE(which() == DeplReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::deplo::ActorRegReq::Builder DeplReq::Builder::getActorReg() {
  KJ_IREQUIRE(which() == DeplReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplReq::Builder::setActorReg( ::riaps::deplo::ActorRegReq::Reader value) {
  _builder.setDataField<DeplReq::Which>(
      0 * ::capnp::ELEMENTS, DeplReq::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::deplo::ActorRegReq::Builder DeplReq::Builder::initActorReg() {
  _builder.setDataField<DeplReq::Which>(
      0 * ::capnp::ELEMENTS, DeplReq::ACTOR_REG);
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplReq::Builder::adoptActorReg(
    ::capnp::Orphan< ::riaps::deplo::ActorRegReq>&& value) {
  _builder.setDataField<DeplReq::Which>(
      0 * ::capnp::ELEMENTS, DeplReq::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::deplo::ActorRegReq> DeplReq::Builder::disownActorReg() {
  KJ_IREQUIRE(which() == DeplReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DeplReq::Reader::isDeviceReg() const {
  return which() == DeplReq::DEVICE_REG;
}
inline bool DeplReq::Builder::isDeviceReg() {
  return which() == DeplReq::DEVICE_REG;
}
inline bool DeplReq::Reader::hasDeviceReg() const {
  if (which() != DeplReq::DEVICE_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeplReq::Builder::hasDeviceReg() {
  if (which() != DeplReq::DEVICE_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::deplo::DeviceRegReq::Reader DeplReq::Reader::getDeviceReg() const {
  KJ_IREQUIRE(which() == DeplReq::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::deplo::DeviceRegReq::Builder DeplReq::Builder::getDeviceReg() {
  KJ_IREQUIRE(which() == DeplReq::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplReq::Builder::setDeviceReg( ::riaps::deplo::DeviceRegReq::Reader value) {
  _builder.setDataField<DeplReq::Which>(
      0 * ::capnp::ELEMENTS, DeplReq::DEVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::deplo::DeviceRegReq::Builder DeplReq::Builder::initDeviceReg() {
  _builder.setDataField<DeplReq::Which>(
      0 * ::capnp::ELEMENTS, DeplReq::DEVICE_REG);
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplReq::Builder::adoptDeviceReg(
    ::capnp::Orphan< ::riaps::deplo::DeviceRegReq>&& value) {
  _builder.setDataField<DeplReq::Which>(
      0 * ::capnp::ELEMENTS, DeplReq::DEVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::deplo::DeviceRegReq> DeplReq::Builder::disownDeviceReg() {
  KJ_IREQUIRE(which() == DeplReq::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DeplReq::Reader::isDeviceUnreg() const {
  return which() == DeplReq::DEVICE_UNREG;
}
inline bool DeplReq::Builder::isDeviceUnreg() {
  return which() == DeplReq::DEVICE_UNREG;
}
inline bool DeplReq::Reader::hasDeviceUnreg() const {
  if (which() != DeplReq::DEVICE_UNREG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeplReq::Builder::hasDeviceUnreg() {
  if (which() != DeplReq::DEVICE_UNREG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::deplo::DeviceUnregReq::Reader DeplReq::Reader::getDeviceUnreg() const {
  KJ_IREQUIRE(which() == DeplReq::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::deplo::DeviceUnregReq::Builder DeplReq::Builder::getDeviceUnreg() {
  KJ_IREQUIRE(which() == DeplReq::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplReq::Builder::setDeviceUnreg( ::riaps::deplo::DeviceUnregReq::Reader value) {
  _builder.setDataField<DeplReq::Which>(
      0 * ::capnp::ELEMENTS, DeplReq::DEVICE_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::deplo::DeviceUnregReq::Builder DeplReq::Builder::initDeviceUnreg() {
  _builder.setDataField<DeplReq::Which>(
      0 * ::capnp::ELEMENTS, DeplReq::DEVICE_UNREG);
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplReq::Builder::adoptDeviceUnreg(
    ::capnp::Orphan< ::riaps::deplo::DeviceUnregReq>&& value) {
  _builder.setDataField<DeplReq::Which>(
      0 * ::capnp::ELEMENTS, DeplReq::DEVICE_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::deplo::DeviceUnregReq> DeplReq::Builder::disownDeviceUnreg() {
  KJ_IREQUIRE(which() == DeplReq::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::riaps::deplo::DeplRep::Which DeplRep::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::riaps::deplo::DeplRep::Which DeplRep::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool DeplRep::Reader::isActorReg() const {
  return which() == DeplRep::ACTOR_REG;
}
inline bool DeplRep::Builder::isActorReg() {
  return which() == DeplRep::ACTOR_REG;
}
inline bool DeplRep::Reader::hasActorReg() const {
  if (which() != DeplRep::ACTOR_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeplRep::Builder::hasActorReg() {
  if (which() != DeplRep::ACTOR_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::deplo::ActorRegRep::Reader DeplRep::Reader::getActorReg() const {
  KJ_IREQUIRE(which() == DeplRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::deplo::ActorRegRep::Builder DeplRep::Builder::getActorReg() {
  KJ_IREQUIRE(which() == DeplRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplRep::Builder::setActorReg( ::riaps::deplo::ActorRegRep::Reader value) {
  _builder.setDataField<DeplRep::Which>(
      0 * ::capnp::ELEMENTS, DeplRep::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::deplo::ActorRegRep::Builder DeplRep::Builder::initActorReg() {
  _builder.setDataField<DeplRep::Which>(
      0 * ::capnp::ELEMENTS, DeplRep::ACTOR_REG);
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplRep::Builder::adoptActorReg(
    ::capnp::Orphan< ::riaps::deplo::ActorRegRep>&& value) {
  _builder.setDataField<DeplRep::Which>(
      0 * ::capnp::ELEMENTS, DeplRep::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::deplo::ActorRegRep> DeplRep::Builder::disownActorReg() {
  KJ_IREQUIRE(which() == DeplRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ActorRegRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DeplRep::Reader::isDeviceReg() const {
  return which() == DeplRep::DEVICE_REG;
}
inline bool DeplRep::Builder::isDeviceReg() {
  return which() == DeplRep::DEVICE_REG;
}
inline bool DeplRep::Reader::hasDeviceReg() const {
  if (which() != DeplRep::DEVICE_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeplRep::Builder::hasDeviceReg() {
  if (which() != DeplRep::DEVICE_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::deplo::DeviceRegRep::Reader DeplRep::Reader::getDeviceReg() const {
  KJ_IREQUIRE(which() == DeplRep::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::deplo::DeviceRegRep::Builder DeplRep::Builder::getDeviceReg() {
  KJ_IREQUIRE(which() == DeplRep::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplRep::Builder::setDeviceReg( ::riaps::deplo::DeviceRegRep::Reader value) {
  _builder.setDataField<DeplRep::Which>(
      0 * ::capnp::ELEMENTS, DeplRep::DEVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::deplo::DeviceRegRep::Builder DeplRep::Builder::initDeviceReg() {
  _builder.setDataField<DeplRep::Which>(
      0 * ::capnp::ELEMENTS, DeplRep::DEVICE_REG);
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplRep::Builder::adoptDeviceReg(
    ::capnp::Orphan< ::riaps::deplo::DeviceRegRep>&& value) {
  _builder.setDataField<DeplRep::Which>(
      0 * ::capnp::ELEMENTS, DeplRep::DEVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::deplo::DeviceRegRep> DeplRep::Builder::disownDeviceReg() {
  KJ_IREQUIRE(which() == DeplRep::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceRegRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DeplRep::Reader::isDeviceUnreg() const {
  return which() == DeplRep::DEVICE_UNREG;
}
inline bool DeplRep::Builder::isDeviceUnreg() {
  return which() == DeplRep::DEVICE_UNREG;
}
inline bool DeplRep::Reader::hasDeviceUnreg() const {
  if (which() != DeplRep::DEVICE_UNREG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeplRep::Builder::hasDeviceUnreg() {
  if (which() != DeplRep::DEVICE_UNREG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::deplo::DeviceUnregRep::Reader DeplRep::Reader::getDeviceUnreg() const {
  KJ_IREQUIRE(which() == DeplRep::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::deplo::DeviceUnregRep::Builder DeplRep::Builder::getDeviceUnreg() {
  KJ_IREQUIRE(which() == DeplRep::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplRep::Builder::setDeviceUnreg( ::riaps::deplo::DeviceUnregRep::Reader value) {
  _builder.setDataField<DeplRep::Which>(
      0 * ::capnp::ELEMENTS, DeplRep::DEVICE_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::deplo::DeviceUnregRep::Builder DeplRep::Builder::initDeviceUnreg() {
  _builder.setDataField<DeplRep::Which>(
      0 * ::capnp::ELEMENTS, DeplRep::DEVICE_UNREG);
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeplRep::Builder::adoptDeviceUnreg(
    ::capnp::Orphan< ::riaps::deplo::DeviceUnregRep>&& value) {
  _builder.setDataField<DeplRep::Which>(
      0 * ::capnp::ELEMENTS, DeplRep::DEVICE_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::deplo::DeviceUnregRep> DeplRep::Builder::disownDeviceUnreg() {
  KJ_IREQUIRE(which() == DeplRep::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::DeviceUnregRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ResCPUX::Reader::hasMsg() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ResCPUX::Builder::hasMsg() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ResCPUX::Reader::getMsg() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ResCPUX::Builder::getMsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResCPUX::Builder::setMsg( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ResCPUX::Builder::initMsg(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ResCPUX::Builder::adoptMsg(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ResCPUX::Builder::disownMsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ResMemX::Reader::hasMsg() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ResMemX::Builder::hasMsg() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ResMemX::Reader::getMsg() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ResMemX::Builder::getMsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResMemX::Builder::setMsg( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ResMemX::Builder::initMsg(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ResMemX::Builder::adoptMsg(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ResMemX::Builder::disownMsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ResSpcX::Reader::hasMsg() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ResSpcX::Builder::hasMsg() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ResSpcX::Reader::getMsg() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ResSpcX::Builder::getMsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResSpcX::Builder::setMsg( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ResSpcX::Builder::initMsg(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ResSpcX::Builder::adoptMsg(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ResSpcX::Builder::disownMsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ResNetX::Reader::hasMsg() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ResNetX::Builder::hasMsg() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ResNetX::Reader::getMsg() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ResNetX::Builder::getMsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResNetX::Builder::setMsg( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ResNetX::Builder::initMsg(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ResNetX::Builder::adoptMsg(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ResNetX::Builder::disownMsg() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::riaps::deplo::ResMsg::Which ResMsg::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::riaps::deplo::ResMsg::Which ResMsg::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool ResMsg::Reader::isResCPUX() const {
  return which() == ResMsg::RES_C_P_U_X;
}
inline bool ResMsg::Builder::isResCPUX() {
  return which() == ResMsg::RES_C_P_U_X;
}
inline bool ResMsg::Reader::hasResCPUX() const {
  if (which() != ResMsg::RES_C_P_U_X) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ResMsg::Builder::hasResCPUX() {
  if (which() != ResMsg::RES_C_P_U_X) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::deplo::ResCPUX::Reader ResMsg::Reader::getResCPUX() const {
  KJ_IREQUIRE(which() == ResMsg::RES_C_P_U_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResCPUX>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::deplo::ResCPUX::Builder ResMsg::Builder::getResCPUX() {
  KJ_IREQUIRE(which() == ResMsg::RES_C_P_U_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResCPUX>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResMsg::Builder::setResCPUX( ::riaps::deplo::ResCPUX::Reader value) {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_C_P_U_X);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ResCPUX>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::deplo::ResCPUX::Builder ResMsg::Builder::initResCPUX() {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_C_P_U_X);
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResCPUX>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResMsg::Builder::adoptResCPUX(
    ::capnp::Orphan< ::riaps::deplo::ResCPUX>&& value) {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_C_P_U_X);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ResCPUX>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::deplo::ResCPUX> ResMsg::Builder::disownResCPUX() {
  KJ_IREQUIRE(which() == ResMsg::RES_C_P_U_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResCPUX>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ResMsg::Reader::isResMemX() const {
  return which() == ResMsg::RES_MEM_X;
}
inline bool ResMsg::Builder::isResMemX() {
  return which() == ResMsg::RES_MEM_X;
}
inline bool ResMsg::Reader::hasResMemX() const {
  if (which() != ResMsg::RES_MEM_X) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ResMsg::Builder::hasResMemX() {
  if (which() != ResMsg::RES_MEM_X) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::deplo::ResMemX::Reader ResMsg::Reader::getResMemX() const {
  KJ_IREQUIRE(which() == ResMsg::RES_MEM_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResMemX>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::deplo::ResMemX::Builder ResMsg::Builder::getResMemX() {
  KJ_IREQUIRE(which() == ResMsg::RES_MEM_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResMemX>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResMsg::Builder::setResMemX( ::riaps::deplo::ResMemX::Reader value) {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_MEM_X);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ResMemX>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::deplo::ResMemX::Builder ResMsg::Builder::initResMemX() {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_MEM_X);
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResMemX>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResMsg::Builder::adoptResMemX(
    ::capnp::Orphan< ::riaps::deplo::ResMemX>&& value) {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_MEM_X);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ResMemX>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::deplo::ResMemX> ResMsg::Builder::disownResMemX() {
  KJ_IREQUIRE(which() == ResMsg::RES_MEM_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResMemX>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ResMsg::Reader::isResSpcX() const {
  return which() == ResMsg::RES_SPC_X;
}
inline bool ResMsg::Builder::isResSpcX() {
  return which() == ResMsg::RES_SPC_X;
}
inline bool ResMsg::Reader::hasResSpcX() const {
  if (which() != ResMsg::RES_SPC_X) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ResMsg::Builder::hasResSpcX() {
  if (which() != ResMsg::RES_SPC_X) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::deplo::ResSpcX::Reader ResMsg::Reader::getResSpcX() const {
  KJ_IREQUIRE(which() == ResMsg::RES_SPC_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResSpcX>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::deplo::ResSpcX::Builder ResMsg::Builder::getResSpcX() {
  KJ_IREQUIRE(which() == ResMsg::RES_SPC_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResSpcX>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResMsg::Builder::setResSpcX( ::riaps::deplo::ResSpcX::Reader value) {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_SPC_X);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ResSpcX>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::deplo::ResSpcX::Builder ResMsg::Builder::initResSpcX() {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_SPC_X);
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResSpcX>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResMsg::Builder::adoptResSpcX(
    ::capnp::Orphan< ::riaps::deplo::ResSpcX>&& value) {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_SPC_X);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ResSpcX>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::deplo::ResSpcX> ResMsg::Builder::disownResSpcX() {
  KJ_IREQUIRE(which() == ResMsg::RES_SPC_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResSpcX>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ResMsg::Reader::isResNetX() const {
  return which() == ResMsg::RES_NET_X;
}
inline bool ResMsg::Builder::isResNetX() {
  return which() == ResMsg::RES_NET_X;
}
inline bool ResMsg::Reader::hasResNetX() const {
  if (which() != ResMsg::RES_NET_X) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ResMsg::Builder::hasResNetX() {
  if (which() != ResMsg::RES_NET_X) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::deplo::ResNetX::Reader ResMsg::Reader::getResNetX() const {
  KJ_IREQUIRE(which() == ResMsg::RES_NET_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResNetX>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::deplo::ResNetX::Builder ResMsg::Builder::getResNetX() {
  KJ_IREQUIRE(which() == ResMsg::RES_NET_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResNetX>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResMsg::Builder::setResNetX( ::riaps::deplo::ResNetX::Reader value) {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_NET_X);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ResNetX>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::deplo::ResNetX::Builder ResMsg::Builder::initResNetX() {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_NET_X);
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResNetX>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ResMsg::Builder::adoptResNetX(
    ::capnp::Orphan< ::riaps::deplo::ResNetX>&& value) {
  _builder.setDataField<ResMsg::Which>(
      0 * ::capnp::ELEMENTS, ResMsg::RES_NET_X);
  ::capnp::_::PointerHelpers< ::riaps::deplo::ResNetX>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::deplo::ResNetX> ResMsg::Builder::disownResNetX() {
  KJ_IREQUIRE(which() == ResMsg::RES_NET_X,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::deplo::ResNetX>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_b487bf324bf367d9_
