// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: distcoord.capnp

#ifndef CAPNP_INCLUDED_a5b4ccd232a91945_
#define CAPNP_INCLUDED_a5b4ccd232a91945_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(fce2365756d7b39d);
enum class HeartBeatType_fce2365756d7b39d: uint16_t {
  PING,
  PONG,
};
CAPNP_DECLARE_ENUM(HeartBeatType, fce2365756d7b39d);
CAPNP_DECLARE_SCHEMA(c7426d39bcaf282b);

}  // namespace schemas
}  // namespace capnp

namespace riaps {
namespace distrcoord {

typedef ::capnp::schemas::HeartBeatType_fce2365756d7b39d HeartBeatType;

struct GroupHeartBeat {
  GroupHeartBeat() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c7426d39bcaf282b, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class GroupHeartBeat::Reader {
public:
  typedef GroupHeartBeat Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::riaps::distrcoord::HeartBeatType getHeartBeatType() const;

  inline bool hasSourceComponentId() const;
  inline  ::capnp::Text::Reader getSourceComponentId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GroupHeartBeat::Builder {
public:
  typedef GroupHeartBeat Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::riaps::distrcoord::HeartBeatType getHeartBeatType();
  inline void setHeartBeatType( ::riaps::distrcoord::HeartBeatType value);

  inline bool hasSourceComponentId();
  inline  ::capnp::Text::Builder getSourceComponentId();
  inline void setSourceComponentId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSourceComponentId(unsigned int size);
  inline void adoptSourceComponentId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSourceComponentId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GroupHeartBeat::Pipeline {
public:
  typedef GroupHeartBeat Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::riaps::distrcoord::HeartBeatType GroupHeartBeat::Reader::getHeartBeatType() const {
  return _reader.getDataField< ::riaps::distrcoord::HeartBeatType>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::distrcoord::HeartBeatType GroupHeartBeat::Builder::getHeartBeatType() {
  return _builder.getDataField< ::riaps::distrcoord::HeartBeatType>(
      0 * ::capnp::ELEMENTS);
}
inline void GroupHeartBeat::Builder::setHeartBeatType( ::riaps::distrcoord::HeartBeatType value) {
  _builder.setDataField< ::riaps::distrcoord::HeartBeatType>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool GroupHeartBeat::Reader::hasSourceComponentId() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool GroupHeartBeat::Builder::hasSourceComponentId() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GroupHeartBeat::Reader::getSourceComponentId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GroupHeartBeat::Builder::getSourceComponentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void GroupHeartBeat::Builder::setSourceComponentId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GroupHeartBeat::Builder::initSourceComponentId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void GroupHeartBeat::Builder::adoptSourceComponentId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GroupHeartBeat::Builder::disownSourceComponentId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_a5b4ccd232a91945_
