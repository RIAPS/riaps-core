// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: distcoord.capnp

#include "distcoord.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<26> b_fce2365756d7b39d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    157, 179, 215,  86,  87,  54, 226, 252,
     16,   0,   0,   0,   2,   0,   0,   0,
     69,  25, 169,  50, 210, 204, 180, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116,  99, 111, 111, 114,
    100,  46,  99,  97, 112, 110, 112,  58,
     72, 101,  97, 114, 116,  66, 101,  97,
    116,  84, 121, 112, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 105, 110, 103,   0,   0,   0,   0,
    112, 111, 110, 103,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fce2365756d7b39d = b_fce2365756d7b39d.words;
#if !CAPNP_LITE
static const uint16_t m_fce2365756d7b39d[] = {0, 1};
const ::capnp::_::RawSchema s_fce2365756d7b39d = {
  0xfce2365756d7b39d, b_fce2365756d7b39d.words, 26, nullptr, m_fce2365756d7b39d,
  0, 2, nullptr, nullptr, nullptr, { &s_fce2365756d7b39d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(HeartBeatType_fce2365756d7b39d, fce2365756d7b39d);
static const ::capnp::_::AlignedData<51> b_c7426d39bcaf282b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     43,  40, 175, 188,  57, 109,  66, 199,
     16,   0,   0,   0,   1,   0,   1,   0,
     69,  25, 169,  50, 210, 204, 180, 165,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116,  99, 111, 111, 114,
    100,  46,  99,  97, 112, 110, 112,  58,
     71, 114, 111, 117, 112,  72, 101,  97,
    114, 116,  66, 101,  97, 116,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
    104, 101,  97, 114, 116,  66, 101,  97,
    116,  84, 121, 112, 101,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    157, 179, 215,  86,  87,  54, 226, 252,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 117, 114,  99, 101,  67, 111,
    109, 112, 111, 110, 101, 110, 116,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c7426d39bcaf282b = b_c7426d39bcaf282b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c7426d39bcaf282b[] = {
  &s_fce2365756d7b39d,
};
static const uint16_t m_c7426d39bcaf282b[] = {0, 1};
static const uint16_t i_c7426d39bcaf282b[] = {0, 1};
const ::capnp::_::RawSchema s_c7426d39bcaf282b = {
  0xc7426d39bcaf282b, b_c7426d39bcaf282b.words, 51, d_c7426d39bcaf282b, m_c7426d39bcaf282b,
  1, 2, i_c7426d39bcaf282b, nullptr, nullptr, { &s_c7426d39bcaf282b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<82> b_f33d21662bc326c4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    196,  38, 195,  43, 102,  33,  61, 243,
     16,   0,   0,   0,   1,   0,   0,   0,
     69,  25, 169,  50, 210, 204, 180, 165,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116,  99, 111, 111, 114,
    100,  46,  99,  97, 112, 110, 112,  58,
     76, 101,  97, 100, 101, 114,  69, 108,
    101,  99, 116, 105, 111, 110,   0,   0,
     12,   0,   0,   0,   1,   0,   1,   0,
    124, 113, 201, 148,  60,  65, 107, 138,
     17,   0,   0,   0,  98,   0,   0,   0,
     94, 223, 165,  48, 183, 238, 103, 250,
     17,   0,   0,   0, 146,   0,   0,   0,
    196, 227, 112,  68, 224, 113, 180, 245,
     21,   0,   0,   0, 146,   0,   0,   0,
     65, 112, 112, 101, 110, 100,  69, 110,
    116, 114, 121,   0,   0,   0,   0,   0,
     82, 101, 113, 117, 101, 115, 116,  70,
    111, 114,  86, 111, 116, 101,  82, 101,
    113,   0,   0,   0,   0,   0,   0,   0,
     82, 101, 113, 117, 101, 115, 116,  70,
    111, 114,  86, 111, 116, 101,  82, 101,
    112,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
     97, 112, 112, 101, 110, 100,  69, 110,
    116, 114, 121,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    124, 113, 201, 148,  60,  65, 107, 138,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 113, 117, 101, 115, 116,  70,
    111, 114,  86, 111, 116, 101,  82, 101,
    113,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     94, 223, 165,  48, 183, 238, 103, 250,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 113, 117, 101, 115, 116,  70,
    111, 114,  86, 111, 116, 101,  82, 101,
    112,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    196, 227, 112,  68, 224, 113, 180, 245,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f33d21662bc326c4 = b_f33d21662bc326c4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f33d21662bc326c4[] = {
  &s_8a6b413c94c9717c,
  &s_f5b471e04470e3c4,
  &s_fa67eeb730a5df5e,
};
static const uint16_t m_f33d21662bc326c4[] = {0, 2, 1};
static const uint16_t i_f33d21662bc326c4[] = {0, 1, 2};
const ::capnp::_::RawSchema s_f33d21662bc326c4 = {
  0xf33d21662bc326c4, b_f33d21662bc326c4.words, 82, d_f33d21662bc326c4, m_f33d21662bc326c4,
  3, 3, i_f33d21662bc326c4, nullptr, nullptr, { &s_f33d21662bc326c4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_8a6b413c94c9717c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    124, 113, 201, 148,  60,  65, 107, 138,
     31,   0,   0,   0,   1,   0,   1,   0,
    196,  38, 195,  43, 102,  33,  61, 243,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116,  99, 111, 111, 114,
    100,  46,  99,  97, 112, 110, 112,  58,
     76, 101,  97, 100, 101, 114,  69, 108,
    101,  99, 116, 105, 111, 110,  46,  65,
    112, 112, 101, 110, 100,  69, 110, 116,
    114, 121,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
    115, 111, 117, 114,  99, 101,  67, 111,
    109, 112, 111, 110, 101, 110, 116,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 108, 101,  99, 116, 105, 111, 110,
     84, 101, 114, 109,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8a6b413c94c9717c = b_8a6b413c94c9717c.words;
#if !CAPNP_LITE
static const uint16_t m_8a6b413c94c9717c[] = {1, 0};
static const uint16_t i_8a6b413c94c9717c[] = {0, 1};
const ::capnp::_::RawSchema s_8a6b413c94c9717c = {
  0x8a6b413c94c9717c, b_8a6b413c94c9717c.words, 53, nullptr, m_8a6b413c94c9717c,
  0, 2, i_8a6b413c94c9717c, nullptr, nullptr, { &s_8a6b413c94c9717c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_fa67eeb730a5df5e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     94, 223, 165,  48, 183, 238, 103, 250,
     31,   0,   0,   0,   1,   0,   1,   0,
    196,  38, 195,  43, 102,  33,  61, 243,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116,  99, 111, 111, 114,
    100,  46,  99,  97, 112, 110, 112,  58,
     76, 101,  97, 100, 101, 114,  69, 108,
    101,  99, 116, 105, 111, 110,  46,  82,
    101, 113, 117, 101, 115, 116,  70, 111,
    114,  86, 111, 116, 101,  82, 101, 113,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
    115, 111, 117, 114,  99, 101,  67, 111,
    109, 112, 111, 110, 101, 110, 116,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 108, 101,  99, 116, 105, 111, 110,
     84, 101, 114, 109,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fa67eeb730a5df5e = b_fa67eeb730a5df5e.words;
#if !CAPNP_LITE
static const uint16_t m_fa67eeb730a5df5e[] = {1, 0};
static const uint16_t i_fa67eeb730a5df5e[] = {0, 1};
const ::capnp::_::RawSchema s_fa67eeb730a5df5e = {
  0xfa67eeb730a5df5e, b_fa67eeb730a5df5e.words, 54, nullptr, m_fa67eeb730a5df5e,
  0, 2, i_fa67eeb730a5df5e, nullptr, nullptr, { &s_fa67eeb730a5df5e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<70> b_f5b471e04470e3c4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    196, 227, 112,  68, 224, 113, 180, 245,
     31,   0,   0,   0,   1,   0,   1,   0,
    196,  38, 195,  43, 102,  33,  61, 243,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116,  99, 111, 111, 114,
    100,  46,  99,  97, 112, 110, 112,  58,
     76, 101,  97, 100, 101, 114,  69, 108,
    101,  99, 116, 105, 111, 110,  46,  82,
    101, 113, 117, 101, 115, 116,  70, 111,
    114,  86, 111, 116, 101,  82, 101, 112,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
    115, 111, 117, 114,  99, 101,  67, 111,
    109, 112, 111, 110, 101, 110, 116,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 111, 116, 101,  70, 111, 114,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 108, 101,  99, 116, 105, 111, 110,
     84, 101, 114, 109,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f5b471e04470e3c4 = b_f5b471e04470e3c4.words;
#if !CAPNP_LITE
static const uint16_t m_f5b471e04470e3c4[] = {2, 0, 1};
static const uint16_t i_f5b471e04470e3c4[] = {0, 1, 2};
const ::capnp::_::RawSchema s_f5b471e04470e3c4 = {
  0xf5b471e04470e3c4, b_f5b471e04470e3c4.words, 70, nullptr, m_f5b471e04470e3c4,
  0, 3, i_f5b471e04470e3c4, nullptr, nullptr, { &s_f5b471e04470e3c4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_8a25ecc657bf2ed3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    211,  46, 191,  87, 198, 236,  37, 138,
     16,   0,   0,   0,   1,   0,   1,   0,
     69,  25, 169,  50, 210, 204, 180, 165,
      1,   0,   7,   0,   0,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116,  99, 111, 111, 114,
    100,  46,  99,  97, 112, 110, 112,  58,
     71, 114, 111, 117, 112,  73, 110, 116,
    101, 114, 110,  97, 108, 115,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    103, 114, 111, 117, 112,  72, 101,  97,
    114, 116,  66, 101,  97, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     43,  40, 175, 188,  57, 109,  66, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 101,  97, 100, 101, 114,  69, 108,
    101,  99, 116, 105, 111, 110,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    196,  38, 195,  43, 102,  33,  61, 243,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8a25ecc657bf2ed3 = b_8a25ecc657bf2ed3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8a25ecc657bf2ed3[] = {
  &s_c7426d39bcaf282b,
  &s_f33d21662bc326c4,
};
static const uint16_t m_8a25ecc657bf2ed3[] = {0, 1};
static const uint16_t i_8a25ecc657bf2ed3[] = {0, 1};
const ::capnp::_::RawSchema s_8a25ecc657bf2ed3 = {
  0x8a25ecc657bf2ed3, b_8a25ecc657bf2ed3.words, 50, d_8a25ecc657bf2ed3, m_8a25ecc657bf2ed3,
  2, 2, i_8a25ecc657bf2ed3, nullptr, nullptr, { &s_8a25ecc657bf2ed3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace riaps {
namespace distrcoord {

// GroupHeartBeat
#ifndef _MSC_VER
constexpr uint16_t GroupHeartBeat::_capnpPrivate::dataWordSize;
constexpr uint16_t GroupHeartBeat::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind GroupHeartBeat::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GroupHeartBeat::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* GroupHeartBeat::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// LeaderElection
#ifndef _MSC_VER
constexpr uint16_t LeaderElection::_capnpPrivate::dataWordSize;
constexpr uint16_t LeaderElection::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind LeaderElection::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LeaderElection::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* LeaderElection::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// LeaderElection::AppendEntry
#ifndef _MSC_VER
constexpr uint16_t LeaderElection::AppendEntry::_capnpPrivate::dataWordSize;
constexpr uint16_t LeaderElection::AppendEntry::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind LeaderElection::AppendEntry::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LeaderElection::AppendEntry::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* LeaderElection::AppendEntry::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// LeaderElection::RequestForVoteReq
#ifndef _MSC_VER
constexpr uint16_t LeaderElection::RequestForVoteReq::_capnpPrivate::dataWordSize;
constexpr uint16_t LeaderElection::RequestForVoteReq::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind LeaderElection::RequestForVoteReq::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LeaderElection::RequestForVoteReq::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* LeaderElection::RequestForVoteReq::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// LeaderElection::RequestForVoteRep
#ifndef _MSC_VER
constexpr uint16_t LeaderElection::RequestForVoteRep::_capnpPrivate::dataWordSize;
constexpr uint16_t LeaderElection::RequestForVoteRep::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind LeaderElection::RequestForVoteRep::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* LeaderElection::RequestForVoteRep::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* LeaderElection::RequestForVoteRep::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// GroupInternals
#ifndef _MSC_VER
constexpr uint16_t GroupInternals::_capnpPrivate::dataWordSize;
constexpr uint16_t GroupInternals::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind GroupInternals::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GroupInternals::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* GroupInternals::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

