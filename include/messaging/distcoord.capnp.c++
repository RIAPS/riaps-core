// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: distcoord.capnp

#include "distcoord.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<26> b_fce2365756d7b39d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    157, 179, 215,  86,  87,  54, 226, 252,
     16,   0,   0,   0,   2,   0,   0,   0,
     69,  25, 169,  50, 210, 204, 180, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116,  99, 111, 111, 114,
    100,  46,  99,  97, 112, 110, 112,  58,
     72, 101,  97, 114, 116,  66, 101,  97,
    116,  84, 121, 112, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 105, 110, 103,   0,   0,   0,   0,
    112, 111, 110, 103,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fce2365756d7b39d = b_fce2365756d7b39d.words;
#if !CAPNP_LITE
static const uint16_t m_fce2365756d7b39d[] = {0, 1};
const ::capnp::_::RawSchema s_fce2365756d7b39d = {
  0xfce2365756d7b39d, b_fce2365756d7b39d.words, 26, nullptr, m_fce2365756d7b39d,
  0, 2, nullptr, nullptr, nullptr, { &s_fce2365756d7b39d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(HeartBeatType_fce2365756d7b39d, fce2365756d7b39d);
static const ::capnp::_::AlignedData<51> b_c7426d39bcaf282b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     43,  40, 175, 188,  57, 109,  66, 199,
     16,   0,   0,   0,   1,   0,   1,   0,
     69,  25, 169,  50, 210, 204, 180, 165,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116,  99, 111, 111, 114,
    100,  46,  99,  97, 112, 110, 112,  58,
     71, 114, 111, 117, 112,  72, 101,  97,
    114, 116,  66, 101,  97, 116,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
    104, 101,  97, 114, 116,  66, 101,  97,
    116,  84, 121, 112, 101,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    157, 179, 215,  86,  87,  54, 226, 252,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 117, 114,  99, 101,  67, 111,
    109, 112, 111, 110, 101, 110, 116,  73,
    100,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c7426d39bcaf282b = b_c7426d39bcaf282b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c7426d39bcaf282b[] = {
  &s_fce2365756d7b39d,
};
static const uint16_t m_c7426d39bcaf282b[] = {0, 1};
static const uint16_t i_c7426d39bcaf282b[] = {0, 1};
const ::capnp::_::RawSchema s_c7426d39bcaf282b = {
  0xc7426d39bcaf282b, b_c7426d39bcaf282b.words, 51, d_c7426d39bcaf282b, m_c7426d39bcaf282b,
  1, 2, i_c7426d39bcaf282b, nullptr, nullptr, { &s_c7426d39bcaf282b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_957dd94c9c9999de = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    222, 153, 153, 156,  76, 217, 125, 149,
     16,   0,   0,   0,   1,   0,   1,   0,
     69,  25, 169,  50, 210, 204, 180, 165,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116,  99, 111, 111, 114,
    100,  46,  99,  97, 112, 110, 112,  58,
     82, 105,  97, 112, 115,  84, 105, 109,
    101, 115, 116,  97, 109, 112,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_957dd94c9c9999de = b_957dd94c9c9999de.words;
#if !CAPNP_LITE
static const uint16_t m_957dd94c9c9999de[] = {0};
static const uint16_t i_957dd94c9c9999de[] = {0};
const ::capnp::_::RawSchema s_957dd94c9c9999de = {
  0x957dd94c9c9999de, b_957dd94c9c9999de.words, 33, nullptr, m_957dd94c9c9999de,
  0, 1, i_957dd94c9c9999de, nullptr, nullptr, { &s_957dd94c9c9999de, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace riaps {
namespace distrcoord {

// GroupHeartBeat
#ifndef _MSC_VER
constexpr uint16_t GroupHeartBeat::_capnpPrivate::dataWordSize;
constexpr uint16_t GroupHeartBeat::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind GroupHeartBeat::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GroupHeartBeat::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* GroupHeartBeat::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// RiapsTimestamp
#ifndef _MSC_VER
constexpr uint16_t RiapsTimestamp::_capnpPrivate::dataWordSize;
constexpr uint16_t RiapsTimestamp::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind RiapsTimestamp::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* RiapsTimestamp::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* RiapsTimestamp::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

