// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: devm.capnp

#ifndef CAPNP_INCLUDED_a9b61477210cf813_
#define CAPNP_INCLUDED_a9b61477210cf813_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9c175f791298638b);
enum class Status_9c175f791298638b: uint16_t {
  OK,
  ERR,
};
CAPNP_DECLARE_ENUM(Status, 9c175f791298638b);
CAPNP_DECLARE_SCHEMA(d53caeee6f622196);
CAPNP_DECLARE_SCHEMA(cfef7ece83278762);
CAPNP_DECLARE_SCHEMA(9f0892d464aa7b25);
CAPNP_DECLARE_SCHEMA(e2169fc4c006373b);
CAPNP_DECLARE_SCHEMA(f4547e24ccdcf2e6);
CAPNP_DECLARE_SCHEMA(eaae87f791c899ba);
CAPNP_DECLARE_SCHEMA(b42c5e8e27f58ef5);
CAPNP_DECLARE_SCHEMA(adba6a3660813a27);
CAPNP_DECLARE_SCHEMA(f80e51da568fcc15);

}  // namespace schemas
}  // namespace capnp

namespace riaps {
namespace devm {

typedef ::capnp::schemas::Status_9c175f791298638b Status;

struct ActorRegReq {
  ActorRegReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d53caeee6f622196, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ActorRegRep {
  ActorRegRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cfef7ece83278762, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeviceArg {
  DeviceArg() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f0892d464aa7b25, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeviceRegReq {
  DeviceRegReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e2169fc4c006373b, 0, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeviceRegRep {
  DeviceRegRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4547e24ccdcf2e6, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeviceUnregReq {
  DeviceUnregReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eaae87f791c899ba, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DeviceUnregRep {
  DeviceUnregRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b42c5e8e27f58ef5, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DevmReq {
  DevmReq() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACTOR_REG,
    DEVICE_REG,
    DEVICE_UNREG,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(adba6a3660813a27, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct DevmRep {
  DevmRep() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    ACTOR_REG,
    DEVICE_REG,
    DEVICE_UNREG,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f80e51da568fcc15, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ActorRegReq::Reader {
public:
  typedef ActorRegReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppName() const;
  inline  ::capnp::Text::Reader getAppName() const;

  inline bool hasVersion() const;
  inline  ::capnp::Text::Reader getVersion() const;

  inline bool hasActorName() const;
  inline  ::capnp::Text::Reader getActorName() const;

  inline  ::int32_t getPid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorRegReq::Builder {
public:
  typedef ActorRegReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppName();
  inline  ::capnp::Text::Builder getAppName();
  inline void setAppName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppName(unsigned int size);
  inline void adoptAppName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppName();

  inline bool hasVersion();
  inline  ::capnp::Text::Builder getVersion();
  inline void setVersion( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVersion(unsigned int size);
  inline void adoptVersion(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVersion();

  inline bool hasActorName();
  inline  ::capnp::Text::Builder getActorName();
  inline void setActorName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initActorName(unsigned int size);
  inline void adoptActorName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownActorName();

  inline  ::int32_t getPid();
  inline void setPid( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorRegReq::Pipeline {
public:
  typedef ActorRegReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ActorRegRep::Reader {
public:
  typedef ActorRegRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::riaps::devm::Status getStatus() const;

  inline  ::int32_t getPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ActorRegRep::Builder {
public:
  typedef ActorRegRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::riaps::devm::Status getStatus();
  inline void setStatus( ::riaps::devm::Status value);

  inline  ::int32_t getPort();
  inline void setPort( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ActorRegRep::Pipeline {
public:
  typedef ActorRegRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceArg::Reader {
public:
  typedef DeviceArg Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceArg::Builder {
public:
  typedef DeviceArg Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceArg::Pipeline {
public:
  typedef DeviceArg Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceRegReq::Reader {
public:
  typedef DeviceRegReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppName() const;
  inline  ::capnp::Text::Reader getAppName() const;

  inline bool hasModelName() const;
  inline  ::capnp::Text::Reader getModelName() const;

  inline bool hasTypeName() const;
  inline  ::capnp::Text::Reader getTypeName() const;

  inline bool hasDeviceArgs() const;
  inline  ::capnp::List< ::riaps::devm::DeviceArg>::Reader getDeviceArgs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceRegReq::Builder {
public:
  typedef DeviceRegReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppName();
  inline  ::capnp::Text::Builder getAppName();
  inline void setAppName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppName(unsigned int size);
  inline void adoptAppName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppName();

  inline bool hasModelName();
  inline  ::capnp::Text::Builder getModelName();
  inline void setModelName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initModelName(unsigned int size);
  inline void adoptModelName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownModelName();

  inline bool hasTypeName();
  inline  ::capnp::Text::Builder getTypeName();
  inline void setTypeName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTypeName(unsigned int size);
  inline void adoptTypeName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTypeName();

  inline bool hasDeviceArgs();
  inline  ::capnp::List< ::riaps::devm::DeviceArg>::Builder getDeviceArgs();
  inline void setDeviceArgs( ::capnp::List< ::riaps::devm::DeviceArg>::Reader value);
  inline  ::capnp::List< ::riaps::devm::DeviceArg>::Builder initDeviceArgs(unsigned int size);
  inline void adoptDeviceArgs(::capnp::Orphan< ::capnp::List< ::riaps::devm::DeviceArg>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::riaps::devm::DeviceArg>> disownDeviceArgs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceRegReq::Pipeline {
public:
  typedef DeviceRegReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceRegRep::Reader {
public:
  typedef DeviceRegRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::riaps::devm::Status getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceRegRep::Builder {
public:
  typedef DeviceRegRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::riaps::devm::Status getStatus();
  inline void setStatus( ::riaps::devm::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceRegRep::Pipeline {
public:
  typedef DeviceRegRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceUnregReq::Reader {
public:
  typedef DeviceUnregReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasAppName() const;
  inline  ::capnp::Text::Reader getAppName() const;

  inline bool hasModelName() const;
  inline  ::capnp::Text::Reader getModelName() const;

  inline bool hasTypeName() const;
  inline  ::capnp::Text::Reader getTypeName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceUnregReq::Builder {
public:
  typedef DeviceUnregReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAppName();
  inline  ::capnp::Text::Builder getAppName();
  inline void setAppName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initAppName(unsigned int size);
  inline void adoptAppName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownAppName();

  inline bool hasModelName();
  inline  ::capnp::Text::Builder getModelName();
  inline void setModelName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initModelName(unsigned int size);
  inline void adoptModelName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownModelName();

  inline bool hasTypeName();
  inline  ::capnp::Text::Builder getTypeName();
  inline void setTypeName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTypeName(unsigned int size);
  inline void adoptTypeName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTypeName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceUnregReq::Pipeline {
public:
  typedef DeviceUnregReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeviceUnregRep::Reader {
public:
  typedef DeviceUnregRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::riaps::devm::Status getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeviceUnregRep::Builder {
public:
  typedef DeviceUnregRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::riaps::devm::Status getStatus();
  inline void setStatus( ::riaps::devm::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeviceUnregRep::Pipeline {
public:
  typedef DeviceUnregRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DevmReq::Reader {
public:
  typedef DevmReq Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isActorReg() const;
  inline bool hasActorReg() const;
  inline  ::riaps::devm::ActorRegReq::Reader getActorReg() const;

  inline bool isDeviceReg() const;
  inline bool hasDeviceReg() const;
  inline  ::riaps::devm::DeviceRegReq::Reader getDeviceReg() const;

  inline bool isDeviceUnreg() const;
  inline bool hasDeviceUnreg() const;
  inline  ::riaps::devm::DeviceUnregReq::Reader getDeviceUnreg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DevmReq::Builder {
public:
  typedef DevmReq Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isActorReg();
  inline bool hasActorReg();
  inline  ::riaps::devm::ActorRegReq::Builder getActorReg();
  inline void setActorReg( ::riaps::devm::ActorRegReq::Reader value);
  inline  ::riaps::devm::ActorRegReq::Builder initActorReg();
  inline void adoptActorReg(::capnp::Orphan< ::riaps::devm::ActorRegReq>&& value);
  inline ::capnp::Orphan< ::riaps::devm::ActorRegReq> disownActorReg();

  inline bool isDeviceReg();
  inline bool hasDeviceReg();
  inline  ::riaps::devm::DeviceRegReq::Builder getDeviceReg();
  inline void setDeviceReg( ::riaps::devm::DeviceRegReq::Reader value);
  inline  ::riaps::devm::DeviceRegReq::Builder initDeviceReg();
  inline void adoptDeviceReg(::capnp::Orphan< ::riaps::devm::DeviceRegReq>&& value);
  inline ::capnp::Orphan< ::riaps::devm::DeviceRegReq> disownDeviceReg();

  inline bool isDeviceUnreg();
  inline bool hasDeviceUnreg();
  inline  ::riaps::devm::DeviceUnregReq::Builder getDeviceUnreg();
  inline void setDeviceUnreg( ::riaps::devm::DeviceUnregReq::Reader value);
  inline  ::riaps::devm::DeviceUnregReq::Builder initDeviceUnreg();
  inline void adoptDeviceUnreg(::capnp::Orphan< ::riaps::devm::DeviceUnregReq>&& value);
  inline ::capnp::Orphan< ::riaps::devm::DeviceUnregReq> disownDeviceUnreg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DevmReq::Pipeline {
public:
  typedef DevmReq Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DevmRep::Reader {
public:
  typedef DevmRep Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isActorReg() const;
  inline bool hasActorReg() const;
  inline  ::riaps::devm::ActorRegRep::Reader getActorReg() const;

  inline bool isDeviceReg() const;
  inline bool hasDeviceReg() const;
  inline  ::riaps::devm::DeviceRegRep::Reader getDeviceReg() const;

  inline bool isDeviceUnreg() const;
  inline bool hasDeviceUnreg() const;
  inline  ::riaps::devm::DeviceUnregRep::Reader getDeviceUnreg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DevmRep::Builder {
public:
  typedef DevmRep Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isActorReg();
  inline bool hasActorReg();
  inline  ::riaps::devm::ActorRegRep::Builder getActorReg();
  inline void setActorReg( ::riaps::devm::ActorRegRep::Reader value);
  inline  ::riaps::devm::ActorRegRep::Builder initActorReg();
  inline void adoptActorReg(::capnp::Orphan< ::riaps::devm::ActorRegRep>&& value);
  inline ::capnp::Orphan< ::riaps::devm::ActorRegRep> disownActorReg();

  inline bool isDeviceReg();
  inline bool hasDeviceReg();
  inline  ::riaps::devm::DeviceRegRep::Builder getDeviceReg();
  inline void setDeviceReg( ::riaps::devm::DeviceRegRep::Reader value);
  inline  ::riaps::devm::DeviceRegRep::Builder initDeviceReg();
  inline void adoptDeviceReg(::capnp::Orphan< ::riaps::devm::DeviceRegRep>&& value);
  inline ::capnp::Orphan< ::riaps::devm::DeviceRegRep> disownDeviceReg();

  inline bool isDeviceUnreg();
  inline bool hasDeviceUnreg();
  inline  ::riaps::devm::DeviceUnregRep::Builder getDeviceUnreg();
  inline void setDeviceUnreg( ::riaps::devm::DeviceUnregRep::Reader value);
  inline  ::riaps::devm::DeviceUnregRep::Builder initDeviceUnreg();
  inline void adoptDeviceUnreg(::capnp::Orphan< ::riaps::devm::DeviceUnregRep>&& value);
  inline ::capnp::Orphan< ::riaps::devm::DeviceUnregRep> disownDeviceUnreg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DevmRep::Pipeline {
public:
  typedef DevmRep Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ActorRegReq::Reader::hasAppName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasAppName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getAppName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setAppName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initAppName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptAppName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ActorRegReq::Reader::hasVersion() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasVersion() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getVersion() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setVersion( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initVersion(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptVersion(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownVersion() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ActorRegReq::Reader::hasActorName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool ActorRegReq::Builder::hasActorName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader ActorRegReq::Reader::getActorName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::getActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void ActorRegReq::Builder::setActorName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder ActorRegReq::Builder::initActorName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void ActorRegReq::Builder::adoptActorName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> ActorRegReq::Builder::disownActorName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::int32_t ActorRegReq::Reader::getPid() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t ActorRegReq::Builder::getPid() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void ActorRegReq::Builder::setPid( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::riaps::devm::Status ActorRegRep::Reader::getStatus() const {
  return _reader.getDataField< ::riaps::devm::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::devm::Status ActorRegRep::Builder::getStatus() {
  return _builder.getDataField< ::riaps::devm::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void ActorRegRep::Builder::setStatus( ::riaps::devm::Status value) {
  _builder.setDataField< ::riaps::devm::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t ActorRegRep::Reader::getPort() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t ActorRegRep::Builder::getPort() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void ActorRegRep::Builder::setPort( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool DeviceArg::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeviceArg::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceArg::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceArg::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeviceArg::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceArg::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DeviceArg::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceArg::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DeviceArg::Reader::hasValue() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DeviceArg::Builder::hasValue() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceArg::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceArg::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DeviceArg::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceArg::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void DeviceArg::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceArg::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool DeviceRegReq::Reader::hasAppName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeviceRegReq::Builder::hasAppName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceRegReq::Reader::getAppName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::getAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeviceRegReq::Builder::setAppName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::initAppName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DeviceRegReq::Builder::adoptAppName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceRegReq::Builder::disownAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DeviceRegReq::Reader::hasModelName() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DeviceRegReq::Builder::hasModelName() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceRegReq::Reader::getModelName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::getModelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DeviceRegReq::Builder::setModelName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::initModelName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void DeviceRegReq::Builder::adoptModelName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceRegReq::Builder::disownModelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool DeviceRegReq::Reader::hasTypeName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool DeviceRegReq::Builder::hasTypeName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceRegReq::Reader::getTypeName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::getTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void DeviceRegReq::Builder::setTypeName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceRegReq::Builder::initTypeName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void DeviceRegReq::Builder::adoptTypeName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceRegReq::Builder::disownTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool DeviceRegReq::Reader::hasDeviceArgs() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool DeviceRegReq::Builder::hasDeviceArgs() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::riaps::devm::DeviceArg>::Reader DeviceRegReq::Reader::getDeviceArgs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::devm::DeviceArg>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::riaps::devm::DeviceArg>::Builder DeviceRegReq::Builder::getDeviceArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::devm::DeviceArg>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void DeviceRegReq::Builder::setDeviceArgs( ::capnp::List< ::riaps::devm::DeviceArg>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::devm::DeviceArg>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::riaps::devm::DeviceArg>::Builder DeviceRegReq::Builder::initDeviceArgs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::devm::DeviceArg>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void DeviceRegReq::Builder::adoptDeviceArgs(
    ::capnp::Orphan< ::capnp::List< ::riaps::devm::DeviceArg>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::devm::DeviceArg>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::riaps::devm::DeviceArg>> DeviceRegReq::Builder::disownDeviceArgs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::riaps::devm::DeviceArg>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::riaps::devm::Status DeviceRegRep::Reader::getStatus() const {
  return _reader.getDataField< ::riaps::devm::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::devm::Status DeviceRegRep::Builder::getStatus() {
  return _builder.getDataField< ::riaps::devm::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void DeviceRegRep::Builder::setStatus( ::riaps::devm::Status value) {
  _builder.setDataField< ::riaps::devm::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool DeviceUnregReq::Reader::hasAppName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DeviceUnregReq::Builder::hasAppName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceUnregReq::Reader::getAppName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::getAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DeviceUnregReq::Builder::setAppName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::initAppName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void DeviceUnregReq::Builder::adoptAppName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceUnregReq::Builder::disownAppName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DeviceUnregReq::Reader::hasModelName() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool DeviceUnregReq::Builder::hasModelName() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceUnregReq::Reader::getModelName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::getModelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void DeviceUnregReq::Builder::setModelName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::initModelName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void DeviceUnregReq::Builder::adoptModelName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceUnregReq::Builder::disownModelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool DeviceUnregReq::Reader::hasTypeName() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool DeviceUnregReq::Builder::hasTypeName() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader DeviceUnregReq::Reader::getTypeName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::getTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void DeviceUnregReq::Builder::setTypeName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder DeviceUnregReq::Builder::initTypeName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void DeviceUnregReq::Builder::adoptTypeName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> DeviceUnregReq::Builder::disownTypeName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::riaps::devm::Status DeviceUnregRep::Reader::getStatus() const {
  return _reader.getDataField< ::riaps::devm::Status>(
      0 * ::capnp::ELEMENTS);
}

inline  ::riaps::devm::Status DeviceUnregRep::Builder::getStatus() {
  return _builder.getDataField< ::riaps::devm::Status>(
      0 * ::capnp::ELEMENTS);
}
inline void DeviceUnregRep::Builder::setStatus( ::riaps::devm::Status value) {
  _builder.setDataField< ::riaps::devm::Status>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::riaps::devm::DevmReq::Which DevmReq::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::riaps::devm::DevmReq::Which DevmReq::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool DevmReq::Reader::isActorReg() const {
  return which() == DevmReq::ACTOR_REG;
}
inline bool DevmReq::Builder::isActorReg() {
  return which() == DevmReq::ACTOR_REG;
}
inline bool DevmReq::Reader::hasActorReg() const {
  if (which() != DevmReq::ACTOR_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DevmReq::Builder::hasActorReg() {
  if (which() != DevmReq::ACTOR_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::devm::ActorRegReq::Reader DevmReq::Reader::getActorReg() const {
  KJ_IREQUIRE(which() == DevmReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::devm::ActorRegReq::Builder DevmReq::Builder::getActorReg() {
  KJ_IREQUIRE(which() == DevmReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmReq::Builder::setActorReg( ::riaps::devm::ActorRegReq::Reader value) {
  _builder.setDataField<DevmReq::Which>(
      0 * ::capnp::ELEMENTS, DevmReq::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::devm::ActorRegReq::Builder DevmReq::Builder::initActorReg() {
  _builder.setDataField<DevmReq::Which>(
      0 * ::capnp::ELEMENTS, DevmReq::ACTOR_REG);
  return ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmReq::Builder::adoptActorReg(
    ::capnp::Orphan< ::riaps::devm::ActorRegReq>&& value) {
  _builder.setDataField<DevmReq::Which>(
      0 * ::capnp::ELEMENTS, DevmReq::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::devm::ActorRegReq> DevmReq::Builder::disownActorReg() {
  KJ_IREQUIRE(which() == DevmReq::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DevmReq::Reader::isDeviceReg() const {
  return which() == DevmReq::DEVICE_REG;
}
inline bool DevmReq::Builder::isDeviceReg() {
  return which() == DevmReq::DEVICE_REG;
}
inline bool DevmReq::Reader::hasDeviceReg() const {
  if (which() != DevmReq::DEVICE_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DevmReq::Builder::hasDeviceReg() {
  if (which() != DevmReq::DEVICE_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::devm::DeviceRegReq::Reader DevmReq::Reader::getDeviceReg() const {
  KJ_IREQUIRE(which() == DevmReq::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::devm::DeviceRegReq::Builder DevmReq::Builder::getDeviceReg() {
  KJ_IREQUIRE(which() == DevmReq::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmReq::Builder::setDeviceReg( ::riaps::devm::DeviceRegReq::Reader value) {
  _builder.setDataField<DevmReq::Which>(
      0 * ::capnp::ELEMENTS, DevmReq::DEVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::devm::DeviceRegReq::Builder DevmReq::Builder::initDeviceReg() {
  _builder.setDataField<DevmReq::Which>(
      0 * ::capnp::ELEMENTS, DevmReq::DEVICE_REG);
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmReq::Builder::adoptDeviceReg(
    ::capnp::Orphan< ::riaps::devm::DeviceRegReq>&& value) {
  _builder.setDataField<DevmReq::Which>(
      0 * ::capnp::ELEMENTS, DevmReq::DEVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::devm::DeviceRegReq> DevmReq::Builder::disownDeviceReg() {
  KJ_IREQUIRE(which() == DevmReq::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DevmReq::Reader::isDeviceUnreg() const {
  return which() == DevmReq::DEVICE_UNREG;
}
inline bool DevmReq::Builder::isDeviceUnreg() {
  return which() == DevmReq::DEVICE_UNREG;
}
inline bool DevmReq::Reader::hasDeviceUnreg() const {
  if (which() != DevmReq::DEVICE_UNREG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DevmReq::Builder::hasDeviceUnreg() {
  if (which() != DevmReq::DEVICE_UNREG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::devm::DeviceUnregReq::Reader DevmReq::Reader::getDeviceUnreg() const {
  KJ_IREQUIRE(which() == DevmReq::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregReq>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::devm::DeviceUnregReq::Builder DevmReq::Builder::getDeviceUnreg() {
  KJ_IREQUIRE(which() == DevmReq::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregReq>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmReq::Builder::setDeviceUnreg( ::riaps::devm::DeviceUnregReq::Reader value) {
  _builder.setDataField<DevmReq::Which>(
      0 * ::capnp::ELEMENTS, DevmReq::DEVICE_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregReq>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::devm::DeviceUnregReq::Builder DevmReq::Builder::initDeviceUnreg() {
  _builder.setDataField<DevmReq::Which>(
      0 * ::capnp::ELEMENTS, DevmReq::DEVICE_UNREG);
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregReq>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmReq::Builder::adoptDeviceUnreg(
    ::capnp::Orphan< ::riaps::devm::DeviceUnregReq>&& value) {
  _builder.setDataField<DevmReq::Which>(
      0 * ::capnp::ELEMENTS, DevmReq::DEVICE_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregReq>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::devm::DeviceUnregReq> DevmReq::Builder::disownDeviceUnreg() {
  KJ_IREQUIRE(which() == DevmReq::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregReq>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::riaps::devm::DevmRep::Which DevmRep::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::riaps::devm::DevmRep::Which DevmRep::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool DevmRep::Reader::isActorReg() const {
  return which() == DevmRep::ACTOR_REG;
}
inline bool DevmRep::Builder::isActorReg() {
  return which() == DevmRep::ACTOR_REG;
}
inline bool DevmRep::Reader::hasActorReg() const {
  if (which() != DevmRep::ACTOR_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DevmRep::Builder::hasActorReg() {
  if (which() != DevmRep::ACTOR_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::devm::ActorRegRep::Reader DevmRep::Reader::getActorReg() const {
  KJ_IREQUIRE(which() == DevmRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::devm::ActorRegRep::Builder DevmRep::Builder::getActorReg() {
  KJ_IREQUIRE(which() == DevmRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmRep::Builder::setActorReg( ::riaps::devm::ActorRegRep::Reader value) {
  _builder.setDataField<DevmRep::Which>(
      0 * ::capnp::ELEMENTS, DevmRep::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::devm::ActorRegRep::Builder DevmRep::Builder::initActorReg() {
  _builder.setDataField<DevmRep::Which>(
      0 * ::capnp::ELEMENTS, DevmRep::ACTOR_REG);
  return ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmRep::Builder::adoptActorReg(
    ::capnp::Orphan< ::riaps::devm::ActorRegRep>&& value) {
  _builder.setDataField<DevmRep::Which>(
      0 * ::capnp::ELEMENTS, DevmRep::ACTOR_REG);
  ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::devm::ActorRegRep> DevmRep::Builder::disownActorReg() {
  KJ_IREQUIRE(which() == DevmRep::ACTOR_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::ActorRegRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DevmRep::Reader::isDeviceReg() const {
  return which() == DevmRep::DEVICE_REG;
}
inline bool DevmRep::Builder::isDeviceReg() {
  return which() == DevmRep::DEVICE_REG;
}
inline bool DevmRep::Reader::hasDeviceReg() const {
  if (which() != DevmRep::DEVICE_REG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DevmRep::Builder::hasDeviceReg() {
  if (which() != DevmRep::DEVICE_REG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::devm::DeviceRegRep::Reader DevmRep::Reader::getDeviceReg() const {
  KJ_IREQUIRE(which() == DevmRep::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::devm::DeviceRegRep::Builder DevmRep::Builder::getDeviceReg() {
  KJ_IREQUIRE(which() == DevmRep::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmRep::Builder::setDeviceReg( ::riaps::devm::DeviceRegRep::Reader value) {
  _builder.setDataField<DevmRep::Which>(
      0 * ::capnp::ELEMENTS, DevmRep::DEVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::devm::DeviceRegRep::Builder DevmRep::Builder::initDeviceReg() {
  _builder.setDataField<DevmRep::Which>(
      0 * ::capnp::ELEMENTS, DevmRep::DEVICE_REG);
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmRep::Builder::adoptDeviceReg(
    ::capnp::Orphan< ::riaps::devm::DeviceRegRep>&& value) {
  _builder.setDataField<DevmRep::Which>(
      0 * ::capnp::ELEMENTS, DevmRep::DEVICE_REG);
  ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::devm::DeviceRegRep> DevmRep::Builder::disownDeviceReg() {
  KJ_IREQUIRE(which() == DevmRep::DEVICE_REG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceRegRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool DevmRep::Reader::isDeviceUnreg() const {
  return which() == DevmRep::DEVICE_UNREG;
}
inline bool DevmRep::Builder::isDeviceUnreg() {
  return which() == DevmRep::DEVICE_UNREG;
}
inline bool DevmRep::Reader::hasDeviceUnreg() const {
  if (which() != DevmRep::DEVICE_UNREG) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool DevmRep::Builder::hasDeviceUnreg() {
  if (which() != DevmRep::DEVICE_UNREG) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::riaps::devm::DeviceUnregRep::Reader DevmRep::Reader::getDeviceUnreg() const {
  KJ_IREQUIRE(which() == DevmRep::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregRep>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::riaps::devm::DeviceUnregRep::Builder DevmRep::Builder::getDeviceUnreg() {
  KJ_IREQUIRE(which() == DevmRep::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregRep>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmRep::Builder::setDeviceUnreg( ::riaps::devm::DeviceUnregRep::Reader value) {
  _builder.setDataField<DevmRep::Which>(
      0 * ::capnp::ELEMENTS, DevmRep::DEVICE_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregRep>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::riaps::devm::DeviceUnregRep::Builder DevmRep::Builder::initDeviceUnreg() {
  _builder.setDataField<DevmRep::Which>(
      0 * ::capnp::ELEMENTS, DevmRep::DEVICE_UNREG);
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregRep>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void DevmRep::Builder::adoptDeviceUnreg(
    ::capnp::Orphan< ::riaps::devm::DeviceUnregRep>&& value) {
  _builder.setDataField<DevmRep::Which>(
      0 * ::capnp::ELEMENTS, DevmRep::DEVICE_UNREG);
  ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregRep>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::riaps::devm::DeviceUnregRep> DevmRep::Builder::disownDeviceUnreg() {
  KJ_IREQUIRE(which() == DevmRep::DEVICE_UNREG,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::riaps::devm::DeviceUnregRep>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

#endif  // CAPNP_INCLUDED_a9b61477210cf813_
