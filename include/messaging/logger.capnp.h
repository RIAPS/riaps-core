// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: logger.capnp

#ifndef CAPNP_INCLUDED_cca08999da12b820_
#define CAPNP_INCLUDED_cca08999da12b820_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b2573c5b13e5bbea);
enum class LogMessageType_b2573c5b13e5bbea: uint16_t {
  ERROR,
  WARNING,
  NOTICE,
  INFO,
  DEBUG,
};
CAPNP_DECLARE_ENUM(LogMessageType, b2573c5b13e5bbea);
CAPNP_DECLARE_SCHEMA(d648ccfd006b6169);
CAPNP_DECLARE_SCHEMA(eae806d29c552650);
CAPNP_DECLARE_SCHEMA(912e97ee2e6354fc);

}  // namespace schemas
}  // namespace capnp


typedef ::capnp::schemas::LogMessageType_b2573c5b13e5bbea LogMessageType;

struct NewLogPublisher {
  NewLogPublisher() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d648ccfd006b6169, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct LogMessage {
  LogMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eae806d29c552650, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Log {
  Log() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NEW_LOG_PUBLISHER,
    LOG_MESSAGE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(912e97ee2e6354fc, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class NewLogPublisher::Reader {
public:
  typedef NewLogPublisher Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEndpoint() const;
  inline  ::capnp::Text::Reader getEndpoint() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NewLogPublisher::Builder {
public:
  typedef NewLogPublisher Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEndpoint();
  inline  ::capnp::Text::Builder getEndpoint();
  inline void setEndpoint( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initEndpoint(unsigned int size);
  inline void adoptEndpoint(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownEndpoint();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NewLogPublisher::Pipeline {
public:
  typedef NewLogPublisher Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LogMessage::Reader {
public:
  typedef LogMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::LogMessageType getLogMessageType() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LogMessage::Builder {
public:
  typedef LogMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::LogMessageType getLogMessageType();
  inline void setLogMessageType( ::LogMessageType value);

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LogMessage::Pipeline {
public:
  typedef LogMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Log::Reader {
public:
  typedef Log Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNewLogPublisher() const;
  inline bool hasNewLogPublisher() const;
  inline  ::NewLogPublisher::Reader getNewLogPublisher() const;

  inline bool isLogMessage() const;
  inline bool hasLogMessage() const;
  inline  ::LogMessage::Reader getLogMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Log::Builder {
public:
  typedef Log Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNewLogPublisher();
  inline bool hasNewLogPublisher();
  inline  ::NewLogPublisher::Builder getNewLogPublisher();
  inline void setNewLogPublisher( ::NewLogPublisher::Reader value);
  inline  ::NewLogPublisher::Builder initNewLogPublisher();
  inline void adoptNewLogPublisher(::capnp::Orphan< ::NewLogPublisher>&& value);
  inline ::capnp::Orphan< ::NewLogPublisher> disownNewLogPublisher();

  inline bool isLogMessage();
  inline bool hasLogMessage();
  inline  ::LogMessage::Builder getLogMessage();
  inline void setLogMessage( ::LogMessage::Reader value);
  inline  ::LogMessage::Builder initLogMessage();
  inline void adoptLogMessage(::capnp::Orphan< ::LogMessage>&& value);
  inline ::capnp::Orphan< ::LogMessage> disownLogMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Log::Pipeline {
public:
  typedef Log Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool NewLogPublisher::Reader::hasEndpoint() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool NewLogPublisher::Builder::hasEndpoint() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NewLogPublisher::Reader::getEndpoint() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NewLogPublisher::Builder::getEndpoint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void NewLogPublisher::Builder::setEndpoint( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NewLogPublisher::Builder::initEndpoint(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void NewLogPublisher::Builder::adoptEndpoint(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NewLogPublisher::Builder::disownEndpoint() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::LogMessageType LogMessage::Reader::getLogMessageType() const {
  return _reader.getDataField< ::LogMessageType>(
      0 * ::capnp::ELEMENTS);
}

inline  ::LogMessageType LogMessage::Builder::getLogMessageType() {
  return _builder.getDataField< ::LogMessageType>(
      0 * ::capnp::ELEMENTS);
}
inline void LogMessage::Builder::setLogMessageType( ::LogMessageType value) {
  _builder.setDataField< ::LogMessageType>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool LogMessage::Reader::hasMessage() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool LogMessage::Builder::hasMessage() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LogMessage::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LogMessage::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void LogMessage::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LogMessage::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void LogMessage::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LogMessage::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::Log::Which Log::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::Log::Which Log::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Log::Reader::isNewLogPublisher() const {
  return which() == Log::NEW_LOG_PUBLISHER;
}
inline bool Log::Builder::isNewLogPublisher() {
  return which() == Log::NEW_LOG_PUBLISHER;
}
inline bool Log::Reader::hasNewLogPublisher() const {
  if (which() != Log::NEW_LOG_PUBLISHER) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Log::Builder::hasNewLogPublisher() {
  if (which() != Log::NEW_LOG_PUBLISHER) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::NewLogPublisher::Reader Log::Reader::getNewLogPublisher() const {
  KJ_IREQUIRE(which() == Log::NEW_LOG_PUBLISHER,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::NewLogPublisher>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::NewLogPublisher::Builder Log::Builder::getNewLogPublisher() {
  KJ_IREQUIRE(which() == Log::NEW_LOG_PUBLISHER,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::NewLogPublisher>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Log::Builder::setNewLogPublisher( ::NewLogPublisher::Reader value) {
  _builder.setDataField<Log::Which>(
      0 * ::capnp::ELEMENTS, Log::NEW_LOG_PUBLISHER);
  ::capnp::_::PointerHelpers< ::NewLogPublisher>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::NewLogPublisher::Builder Log::Builder::initNewLogPublisher() {
  _builder.setDataField<Log::Which>(
      0 * ::capnp::ELEMENTS, Log::NEW_LOG_PUBLISHER);
  return ::capnp::_::PointerHelpers< ::NewLogPublisher>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Log::Builder::adoptNewLogPublisher(
    ::capnp::Orphan< ::NewLogPublisher>&& value) {
  _builder.setDataField<Log::Which>(
      0 * ::capnp::ELEMENTS, Log::NEW_LOG_PUBLISHER);
  ::capnp::_::PointerHelpers< ::NewLogPublisher>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::NewLogPublisher> Log::Builder::disownNewLogPublisher() {
  KJ_IREQUIRE(which() == Log::NEW_LOG_PUBLISHER,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::NewLogPublisher>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Log::Reader::isLogMessage() const {
  return which() == Log::LOG_MESSAGE;
}
inline bool Log::Builder::isLogMessage() {
  return which() == Log::LOG_MESSAGE;
}
inline bool Log::Reader::hasLogMessage() const {
  if (which() != Log::LOG_MESSAGE) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Log::Builder::hasLogMessage() {
  if (which() != Log::LOG_MESSAGE) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::LogMessage::Reader Log::Reader::getLogMessage() const {
  KJ_IREQUIRE(which() == Log::LOG_MESSAGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::LogMessage>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::LogMessage::Builder Log::Builder::getLogMessage() {
  KJ_IREQUIRE(which() == Log::LOG_MESSAGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::LogMessage>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Log::Builder::setLogMessage( ::LogMessage::Reader value) {
  _builder.setDataField<Log::Which>(
      0 * ::capnp::ELEMENTS, Log::LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::LogMessage>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::LogMessage::Builder Log::Builder::initLogMessage() {
  _builder.setDataField<Log::Which>(
      0 * ::capnp::ELEMENTS, Log::LOG_MESSAGE);
  return ::capnp::_::PointerHelpers< ::LogMessage>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Log::Builder::adoptLogMessage(
    ::capnp::Orphan< ::LogMessage>&& value) {
  _builder.setDataField<Log::Which>(
      0 * ::capnp::ELEMENTS, Log::LOG_MESSAGE);
  ::capnp::_::PointerHelpers< ::LogMessage>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::LogMessage> Log::Builder::disownLogMessage() {
  KJ_IREQUIRE(which() == Log::LOG_MESSAGE,
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::LogMessage>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_cca08999da12b820_
