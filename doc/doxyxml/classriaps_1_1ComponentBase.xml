<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classriaps_1_1ComponentBase" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>riaps::ComponentBase</compoundname>
    <includes refid="r__componentbase_8h" local="no">r_componentbase.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classriaps_1_1ComponentBase_1a167a8b40968c51c63886dfd81327eb19" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; spd::logger &gt;</type>
        <definition>std::shared_ptr&lt;spd::logger&gt; riaps::ComponentBase::_logger</definition>
        <argsstring></argsstring>
        <name>_logger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="186" column="1" bodyfile="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classriaps_1_1ComponentBase_1afbffcd9f3ae03334b39cfb0df8e484e6" prot="protected" static="no" mutable="no">
        <type>std::function&lt; void(const uint64_t)&gt;</type>
        <definition>std::function&lt;void(const uint64_t)&gt; riaps::ComponentBase::m_scheduledAction</definition>
        <argsstring></argsstring>
        <name>m_scheduledAction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="402" column="1" bodyfile="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classriaps_1_1ComponentBase_1aca1955504e7d073c603a665e2b8dafab" prot="private" static="no" mutable="no">
        <type><ref refid="structcomponent__conf" kindref="compound">component_conf</ref></type>
        <definition>component_conf riaps::ComponentBase::m_configuration</definition>
        <argsstring></argsstring>
        <name>m_configuration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="430" column="1" bodyfile="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classriaps_1_1ComponentBase_1a965ec24bccccbe5aa39d795c19f7cd0d" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, std::unique_ptr&lt; <ref refid="classriaps_1_1ports_1_1PortBase" kindref="compound">ports::PortBase</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;std::string, std::unique_ptr&lt;ports::PortBase&gt; &gt; riaps::ComponentBase::m_ports</definition>
        <argsstring></argsstring>
        <name>m_ports</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="434" column="1" bodyfile="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classriaps_1_1ComponentBase_1a7b074ceeaee539492dec35cc4c0eed06" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref>, std::unique_ptr&lt; <ref refid="classriaps_1_1groups_1_1Group" kindref="compound">riaps::groups::Group</ref> &gt; &gt;</type>
        <definition>std::map&lt;riaps::groups::GroupId, std::unique_ptr&lt;riaps::groups::Group&gt; &gt; riaps::ComponentBase::m_groups</definition>
        <argsstring></argsstring>
        <name>m_groups</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="437" column="1" bodyfile="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classriaps_1_1ComponentBase_1a3e8b8a1bb12af9c62b8df8051591d16f" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t riaps::ComponentBase::m_timerCounter</definition>
        <argsstring></argsstring>
        <name>m_timerCounter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="441" column="1" bodyfile="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classriaps_1_1ComponentBase_1ae39e42aa99f0c0b3a813a3b37eccce08" prot="private" static="no" mutable="no">
        <type>zuuid_t *</type>
        <definition>zuuid_t* riaps::ComponentBase::m_componentUuid</definition>
        <argsstring></argsstring>
        <name>m_componentUuid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unique ID of the componenet. Regenerated at every start. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="446" column="1" bodyfile="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classriaps_1_1ComponentBase_1a0c49705c29a07525f84718b82a6ec170" prot="private" static="no" mutable="no">
        <type>const <ref refid="classriaps_1_1Actor" kindref="compound">Actor</ref> *</type>
        <definition>const Actor* riaps::ComponentBase::m_actor</definition>
        <argsstring></argsstring>
        <name>m_actor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Points to the component owner. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="451" column="1" bodyfile="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classriaps_1_1ComponentBase_1ae9d02407e1fc0c8892f71eb5c47424d7" prot="private" static="no" mutable="no">
        <type>zactor_t *</type>
        <definition>zactor_t* riaps::ComponentBase::m_zactorComponent</definition>
        <argsstring></argsstring>
        <name>m_zactorComponent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Holds the component thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="456" column="1" bodyfile="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a807d2365f45912f4876c5e7875179976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>riaps::ComponentBase::ComponentBase</definition>
        <argsstring>(component_conf &amp;config, Actor &amp;actor)</argsstring>
        <name>ComponentBase</name>
        <param>
          <type><ref refid="structcomponent__conf" kindref="compound">component_conf</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type><ref refid="classriaps_1_1Actor" kindref="compound">Actor</ref> &amp;</type>
          <declname>actor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration, parsed from the model file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>actor</parametername>
</parameternamelist>
<parameterdescription>
<para>Parent actor, the owner the component. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1af1f0ce4f85bddd32f366d7221030d9a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classriaps_1_1Actor" kindref="compound">Actor</ref> *</type>
        <definition>const Actor* riaps::ComponentBase::GetActor</definition>
        <argsstring>() const </argsstring>
        <name>GetActor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The owner actor. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1aa74e2eb12f0be4a7f468b23a1010a0f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>zactor_t *</type>
        <definition>zactor_t* riaps::ComponentBase::GetZmqPipe</definition>
        <argsstring>() const </argsstring>
        <name>GetZmqPipe</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a6186b350d97b9ea07a442ad5ab6ab654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::SendMessageOnPort</definition>
        <argsstring>(capnp::MallocMessageBuilder &amp;message, const std::string &amp;portName)</argsstring>
        <name>SendMessageOnPort</name>
        <param>
          <type>capnp::MallocMessageBuilder &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>portName</declname>
        </param>
        <briefdescription>
<para>Sends capnp message on port. </para>        </briefdescription>
        <detaileddescription>
<para>Copies the capnp message buffer into a ZMQ message frame and sends the message on port, identified by portName. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>The capnp buffer that holds the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>portName</parametername>
</parameternamelist>
<parameterdescription>
<para>The message is sent on this port. Available names are declared in the riaps model. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the message is sent. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a4d1a2badbf5bacc002d47237b2fe7164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::SendMessageOnPort</definition>
        <argsstring>(capnp::MallocMessageBuilder &amp;message, const std::string &amp;portName, std::shared_ptr&lt; riaps::MessageParams &gt; params)</argsstring>
        <name>SendMessageOnPort</name>
        <param>
          <type>capnp::MallocMessageBuilder &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>portName</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classriaps_1_1MessageParams" kindref="compound">riaps::MessageParams</ref> &gt;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends message on answer port</para><para><simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a6e6455294e93f3eb0cc9a9dfac692ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::SendMessageOnPort</definition>
        <argsstring>(capnp::MallocMessageBuilder &amp;message, const std::string &amp;portName, std::string &amp;requestId)</argsstring>
        <name>SendMessageOnPort</name>
        <param>
          <type>capnp::MallocMessageBuilder &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>portName</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>requestId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a message on query port </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a6a9c2ef9faaf6fe99c411231266c3e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::SendGroupMessage</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId, capnp::MallocMessageBuilder &amp;message, const std::string &amp;portName=&quot;&quot;)</argsstring>
        <name>SendGroupMessage</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>capnp::MallocMessageBuilder &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>portName</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a6c3a4672997bcddf3f78ac033fcfd186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::SendGroupMessage</definition>
        <argsstring>(const riaps::groups::GroupId &amp;&amp;groupId, capnp::MallocMessageBuilder &amp;message, const std::string &amp;portName=&quot;&quot;)</argsstring>
        <name>SendGroupMessage</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;&amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>capnp::MallocMessageBuilder &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>portName</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a1150d495462966938ebdb241f839e589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riaps::ComponentBase::StopComponent</definition>
        <argsstring>()</argsstring>
        <name>StopComponent</name>
        <briefdescription>
<para>Stops the component. </para>        </briefdescription>
        <detaileddescription>
<para>Stops the component in the following order: 1) Stops the timers 2) Destroys the component thread 3) Deletes ports </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ac7fb167cf2a18e680c8620016729aa3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riaps::ComponentBase::UpdateGroup</definition>
        <argsstring>(riaps::discovery::GroupUpdate::Reader &amp;msgGroupUpdate)</argsstring>
        <name>UpdateGroup</name>
        <param>
          <type>riaps::discovery::GroupUpdate::Reader &amp;</type>
          <declname>msgGroupUpdate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a284bcd2d1352738b50b7fa9151a2b9e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structcomponent__conf" kindref="compound">component_conf</ref> &amp;</type>
        <definition>const component_conf&amp; riaps::ComponentBase::GetConfig</definition>
        <argsstring>() const </argsstring>
        <name>GetConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The component configuration. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a5c6f9eed394133df7b2bcc284244d885" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string riaps::ComponentBase::GetCompUuid</definition>
        <argsstring>() const </argsstring>
        <name>GetCompUuid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The component unique ID. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1aebedead9e04918bd0ebbcb6dffbd30c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::PrintMessageOnPort</definition>
        <argsstring>(ports::PortBase *port, std::string message)</argsstring>
        <name>PrintMessageOnPort</name>
        <param>
          <type><ref refid="classriaps_1_1ports_1_1PortBase" kindref="compound">ports::PortBase</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Debug function. Prints the details of the given port to the standard output. </para>        </briefdescription>
        <detaileddescription>
<para>The output: &lt;direction&gt;&lt;componentType&gt;::&lt;portName&gt;:messageType-&gt;message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a0fcc1cb65c6c02b995ea0bdd7235ed55" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::PrintParameters</definition>
        <argsstring>()</argsstring>
        <name>PrintParameters</name>
        <briefdescription>
<para>For debugging. Prints all the commandline parameters of the component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a738008f0c731886f3a9b2645b771015b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::handleCPULimit</definition>
        <argsstring>()</argsstring>
        <name>handleCPULimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resource management handlers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a30e47ae0321ef9bf073326c4cc531e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::handleMemLimit</definition>
        <argsstring>()</argsstring>
        <name>handleMemLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ad539465c3b1e402ab2df62b942aecda8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::handleSpcLimit</definition>
        <argsstring>()</argsstring>
        <name>handleSpcLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a643327991dad87c41eda933ce2cc6c77" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::handleNetLimit</definition>
        <argsstring>()</argsstring>
        <name>handleNetLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a4fb4d730c6ea4b0288acd9d68e246436" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual riaps::ComponentBase::~ComponentBase</definition>
        <argsstring>()</argsstring>
        <name>~ComponentBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="183" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classriaps_1_1ComponentBase_1aafebbfe00b068327fa4e07c38f4f0327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void component_actor</definition>
        <argsstring>(zsock_t *pipe, void *args)</argsstring>
        <name>component_actor</name>
        <param>
          <type>zsock_t *</type>
          <declname>pipe</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Declare the component thread fn. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pipe</parametername>
</parameternamelist>
<parameterdescription>
<para>ZMQ pair socket to send/recv messages from the component thread. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Component instance is passed to the component thread. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="88" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a7fc3b4459634bd931e85e47baecf6f98" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::SendMessageOnPort</definition>
        <argsstring>(zmsg_t **message, const std::string &amp;portName)</argsstring>
        <name>SendMessageOnPort</name>
        <param>
          <type>zmsg_t **</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>portName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a ZMQ message on the given inside port. This Send() is just for InsidePorts</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>ZMQ message structure to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>portName</parametername>
</parameternamelist>
<parameterdescription>
<para>The port, which sends the message. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the message was sent successfully. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1af9cdff1b845fda983e088f76607a03f8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::OnGroupMessage</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId, capnp::FlatArrayMessageReader &amp;capnpreader, riaps::ports::PortBase *port)</argsstring>
        <name>OnGroupMessage</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>capnp::FlatArrayMessageReader &amp;</type>
          <declname>capnpreader</declname>
        </param>
        <param>
          <type><ref refid="classriaps_1_1ports_1_1PortBase" kindref="compound">riaps::ports::PortBase</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fired when a message arrives on one the group ports. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupId</parametername>
</parameternamelist>
<parameterdescription>
<para>groupType, groupName pair (the unique identifier of the group) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>capnpreader</parametername>
</parameternamelist>
<parameterdescription>
<para>The received message in capnp buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port structure where the message was read form. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1af576f02474a181c7ec62d65414b989ff" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::SendMessageToLeader</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId, capnp::MallocMessageBuilder &amp;message)</argsstring>
        <name>SendMessageToLeader</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>capnp::MallocMessageBuilder &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a779f11120361476d009644f02843b022" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::SendLeaderMessage</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId, capnp::MallocMessageBuilder &amp;message)</argsstring>
        <name>SendLeaderMessage</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>capnp::MallocMessageBuilder &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a2783cf06aa35c54408fad0ab9c4170df" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t riaps::ComponentBase::GetGroupMemberCount</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId, int64_t timeout=1000 *15)</argsstring>
        <name>GetGroupMemberCount</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>timeout</declname>
          <defval>1000 *15</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gives a snapshot about the members of a group, considering a timeout. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupId</parametername>
</parameternamelist>
<parameterdescription>
<para>The group id where the members are counted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>A member is counted if heartbeat was recevied from it in the last &quot;timeout&quot; msec </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a3583281b6b53ba3cc0db44038b18eaf9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string riaps::ComponentBase::GetLeaderId</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId)</argsstring>
        <name>GetLeaderId</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1aa613af7e71509122c7f70ecc0fc0d63f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::IsLeaderAvailable</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId)</argsstring>
        <name>IsLeaderAvailable</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does a valid leader available in the group? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupId</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a23bdbf84dd8012a2eaaffd62b2e9d551" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::IsLeader</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId)</argsstring>
        <name>IsLeader</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the current component the leader? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupId</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1acce00aa6c2790bf437737e7524af267d" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classriaps_1_1ports_1_1PublisherPort" kindref="compound">ports::PublisherPort</ref> *</type>
        <definition>ports::PublisherPort* riaps::ComponentBase::GetPublisherPortByName</definition>
        <argsstring>(const std::string &amp;portName)</argsstring>
        <name>GetPublisherPortByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>portName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search publisher port with portName.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>portName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the publisher port to be retrieved. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if the port with the name wasn&apos;t found or the port is not a publisher port. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ac53007756f1092f26004467aa36a09ab" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classriaps_1_1ports_1_1RequestPort" kindref="compound">ports::RequestPort</ref> *</type>
        <definition>ports::RequestPort* riaps::ComponentBase::GetRequestPortByName</definition>
        <argsstring>(const std::string &amp;portName)</argsstring>
        <name>GetRequestPortByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>portName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search request port with portName.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>portName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the request port to be retrieved. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if the port with the name wasn&apos;t found or the port is not a request port. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a8e2d775ceff674bc80db41c1b5e66a3c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classriaps_1_1ports_1_1QueryPort" kindref="compound">ports::QueryPort</ref> *</type>
        <definition>ports::QueryPort* riaps::ComponentBase::GetQueryPortByName</definition>
        <argsstring>(const std::string &amp;portName)</argsstring>
        <name>GetQueryPortByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>portName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a9af2413964c1145982dd408c1bb2139b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classriaps_1_1ports_1_1ResponsePort" kindref="compound">ports::ResponsePort</ref> *</type>
        <definition>ports::ResponsePort* riaps::ComponentBase::GetResponsePortByName</definition>
        <argsstring>(const std::string &amp;portName)</argsstring>
        <name>GetResponsePortByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>portName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search response port with portName.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>portName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the response port to be retrieved. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if the port with the name wasn&apos;t found or the port is not a response port. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a085bc25adc991b80c4365e75cdda363b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classriaps_1_1ports_1_1SubscriberPort" kindref="compound">ports::SubscriberPort</ref> *</type>
        <definition>ports::SubscriberPort* riaps::ComponentBase::GetSubscriberPortByName</definition>
        <argsstring>(const std::string &amp;portName)</argsstring>
        <name>GetSubscriberPortByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>portName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search subscriber port with portName.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>portName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the subscriber port to be retrieved. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if the port with the name wasn&apos;t found or the port is not a subscriber port. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ae313f3b72ac3f452d7542a8f3eadfb71" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classriaps_1_1ports_1_1PortBase" kindref="compound">ports::PortBase</ref> *</type>
        <definition>ports::PortBase* riaps::ComponentBase::GetPortByName</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>GetPortByName</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search a port with the given name.</para><para><simplesect kind="return"><para>NULL if there is no port with the given name. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ae773c060ec98263994a6276c0af6fbfd" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string</type>
        <definition>const std::string riaps::ComponentBase::GetComponentName</definition>
        <argsstring>() const </argsstring>
        <name>GetComponentName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a4f2ad7985e658e8edef883ca5be8f5b3" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void riaps::ComponentBase::SetDebugLevel</definition>
        <argsstring>(std::shared_ptr&lt; spd::logger &gt; logger, spd::level::level_enum level)</argsstring>
        <name>SetDebugLevel</name>
        <param>
          <type>std::shared_ptr&lt; spd::logger &gt;</type>
          <declname>logger</declname>
        </param>
        <param>
          <type>spd::level::level_enum</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a06157bbf44d7dcdaaa8e5ce4e6dbb9ae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::OnScheduledTimer</definition>
        <argsstring>(uint64_t timerId)</argsstring>
        <name>OnScheduledTimer</name>
        <param>
          <type>uint64_t</type>
          <declname>timerId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a5cfa79fb1e682237609e575e33dd4e4a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::DispatchMessage</definition>
        <argsstring>(capnp::FlatArrayMessageReader *capnpreader, ports::PortBase *port, std::shared_ptr&lt; MessageParams &gt; params=nullptr)=0</argsstring>
        <name>DispatchMessage</name>
        <param>
          <type>capnp::FlatArrayMessageReader *</type>
          <declname>capnpreader</declname>
        </param>
        <param>
          <type><ref refid="classriaps_1_1ports_1_1PortBase" kindref="compound">ports::PortBase</ref> *</type>
          <declname>port</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classriaps_1_1MessageParams" kindref="compound">MessageParams</ref> &gt;</type>
          <declname>params</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts and forwards the incoming capnp message to the appropriate handler. Pure virtual function, the inherited class must know the possible message types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>capnpreader</parametername>
</parameternamelist>
<parameterdescription>
<para>The capnp buffer holding the incoming message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port where the message arrived. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a02d1b3f2853fb01007ce2744c1e4d413" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::DispatchInsideMessage</definition>
        <argsstring>(zmsg_t *zmsg, ports::PortBase *port)=0</argsstring>
        <name>DispatchInsideMessage</name>
        <param>
          <type>zmsg_t *</type>
          <declname>zmsg</declname>
        </param>
        <param>
          <type><ref refid="classriaps_1_1ports_1_1PortBase" kindref="compound">ports::PortBase</ref> *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forwards the given ZMQ message to the appropriate handler. Used for inside ports only in device components. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zmsg</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a9ea635a103323981877f8944e32a5c59" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>timespec</type>
        <definition>timespec riaps::ComponentBase::WaitUntil</definition>
        <argsstring>(const timespec &amp;targetTimepoint)</argsstring>
        <name>WaitUntil</name>
        <param>
          <type>const timespec &amp;</type>
          <declname>targetTimepoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1adf51a105a2ecac48bf245a1e904a0f96" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::JoinGroup</definition>
        <argsstring>(riaps::groups::GroupId &amp;&amp;groupId)</argsstring>
        <name>JoinGroup</name>
        <param>
          <type><ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;&amp;</type>
          <declname>groupId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupType</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ab4d2245d1e3a3ab67fd06854f8546c91" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::JoinGroup</definition>
        <argsstring>(riaps::groups::GroupId &amp;groupId)</argsstring>
        <name>JoinGroup</name>
        <param>
          <type><ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ab74b71765a6823445a15b54a8d8a5265" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::LeaveGroup</definition>
        <argsstring>(riaps::groups::GroupId &amp;&amp;groupId)</argsstring>
        <name>LeaveGroup</name>
        <param>
          <type><ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;&amp;</type>
          <declname>groupId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupType</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>groupName</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1af9aaa1fbba86b7d6a9bd67ea89839de2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::LeaveGroup</definition>
        <argsstring>(riaps::groups::GroupId &amp;groupId)</argsstring>
        <name>LeaveGroup</name>
        <param>
          <type><ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a5a16d13c1e2992c8168b1d3a96bfe1a5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &gt;</type>
        <definition>std::vector&lt;riaps::groups::GroupId&gt; riaps::ComponentBase::GetGroupMemberships</definition>
        <argsstring>()</argsstring>
        <name>GetGroupMemberships</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ad31f67f564fd335b732c2b3cd7bec8cc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &gt;</type>
        <definition>std::vector&lt;riaps::groups::GroupId&gt; riaps::ComponentBase::GetGroupMembershipsByType</definition>
        <argsstring>(const std::string &amp;groupType)</argsstring>
        <name>GetGroupMembershipsByType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>groupType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a195e4e48e2e3a85b95c408847abd1442" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::IsMemberOf</definition>
        <argsstring>(riaps::groups::GroupId &amp;groupId)</argsstring>
        <name>IsMemberOf</name>
        <param>
          <type><ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ac897170e7561754dc3d0bd693dfa0bc6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::OnPropose</definition>
        <argsstring>(riaps::groups::GroupId &amp;groupId, const std::string &amp;proposeId, capnp::FlatArrayMessageReader &amp;message)</argsstring>
        <name>OnPropose</name>
        <param>
          <type><ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>proposeId</declname>
        </param>
        <param>
          <type>capnp::FlatArrayMessageReader &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a9e71ae64b299b0f359c77ee4d5d18798" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::OnActionPropose</definition>
        <argsstring>(riaps::groups::GroupId &amp;groupId, const std::string &amp;proposeId, const std::string &amp;actionId, const timespec &amp;timePoint)</argsstring>
        <name>OnActionPropose</name>
        <param>
          <type><ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>proposeId</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>actionId</declname>
        </param>
        <param>
          <type>const timespec &amp;</type>
          <declname>timePoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a120a9102d74c30bbe4042707989b442b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::OnMessageToLeader</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId, capnp::FlatArrayMessageReader &amp;message)</argsstring>
        <name>OnMessageToLeader</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>capnp::FlatArrayMessageReader &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a92b7385a162b5f9ff58600206a9cd2fe" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::OnMessageFromLeader</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId, capnp::FlatArrayMessageReader &amp;message)</argsstring>
        <name>OnMessageFromLeader</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>capnp::FlatArrayMessageReader &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a095ef8cb7e0a013cacd9ae9688c7b4ae" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void riaps::ComponentBase::OnAnnounce</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId, const std::string &amp;proposeId, bool accepted)</argsstring>
        <name>OnAnnounce</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>proposeId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>accepted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a4bdf5a6b3d5aea8663c6ffb29544501b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string riaps::ComponentBase::SendPropose</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId, capnp::MallocMessageBuilder &amp;message)</argsstring>
        <name>SendPropose</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>capnp::MallocMessageBuilder &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a405a97d22b99a663de5138017a7519d6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::SendVote</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId, const std::string &amp;proposeId, bool accept)</argsstring>
        <name>SendVote</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>proposeId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>accept</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1abdba9d81bca931766f906f8b3c4ea9f8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string riaps::ComponentBase::ProposeAction</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId, const std::string &amp;actionId, const timespec &amp;absTime)</argsstring>
        <name>ProposeAction</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>actionId</declname>
        </param>
        <param>
          <type>const timespec &amp;</type>
          <declname>absTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Proposes an action to the leader. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupId</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>actionId</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to be performed. Developer-generated ID, each component knows the appropriate function to be called. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>relTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative time (now + tv_sec + tv_nsec later), when the action must be called. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional custom message, which necesseary by the other nodes for the decision. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The generated proposeId. The leader announces the results by this id. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a35155bce7e5e198d66e899e524c08174" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t riaps::ComponentBase::ScheduleAbsTimer</definition>
        <argsstring>(const timespec &amp;t, uint64_t wakeupOffset=0)</argsstring>
        <name>ScheduleAbsTimer</name>
        <param>
          <type>const timespec &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>wakeupOffset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ad9e46da215b2ef0680688313a818fade" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t riaps::ComponentBase::ScheduleAction</definition>
        <argsstring>(const timespec &amp;tp, std::function&lt; void(const uint64_t)&gt; action, uint64_t wakeupOffset=2000 *1000)</argsstring>
        <name>ScheduleAction</name>
        <param>
          <type>const timespec &amp;</type>
          <declname>tp</declname>
        </param>
        <param>
          <type>std::function&lt; void(const uint64_t)&gt;</type>
          <declname>action</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>wakeupOffset</declname>
          <defval>2000 *1000</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tp</parametername>
</parameternamelist>
<parameterdescription>
<para>absolute time when the action is executed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the function to be executed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wakeupOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>The timer is fired earlier by wakeupOffset. The value is in nanosec and depends on the current platform. On BBB it is 2000 microsec, this is the worst case. If the timer fires too early, make sure to call the WaitUntil() in the handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unique id of the scheduled timer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="398" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a8d9fd7808f30af53a994e5cbd1285b0c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classriaps_1_1ports_1_1PublisherPort" kindref="compound">ports::PublisherPort</ref> *</type>
        <definition>const ports::PublisherPort* riaps::ComponentBase::initPublisherPort</definition>
        <argsstring>(const component_port_pub &amp;)</argsstring>
        <name>initPublisherPort</name>
        <param>
          <type>const <ref refid="structcomponent__port__pub" kindref="compound">component_port_pub</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a254aea48ea9997f733595c281c82cf11" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classriaps_1_1ports_1_1SubscriberPort" kindref="compound">ports::SubscriberPort</ref> *</type>
        <definition>const ports::SubscriberPort* riaps::ComponentBase::initSubscriberPort</definition>
        <argsstring>(const component_port_sub &amp;)</argsstring>
        <name>initSubscriberPort</name>
        <param>
          <type>const <ref refid="structcomponent__port__sub" kindref="compound">component_port_sub</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1aa9c5804d63e6a310bd7d9d21b6754cb4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classriaps_1_1ports_1_1ResponsePort" kindref="compound">ports::ResponsePort</ref> *</type>
        <definition>const ports::ResponsePort* riaps::ComponentBase::initResponsePort</definition>
        <argsstring>(const component_port_rep &amp;)</argsstring>
        <name>initResponsePort</name>
        <param>
          <type>const <ref refid="structcomponent__port__rep" kindref="compound">component_port_rep</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a9997969ca93eec03e04cdbbec7dd6046" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classriaps_1_1ports_1_1RequestPort" kindref="compound">ports::RequestPort</ref> *</type>
        <definition>const ports::RequestPort* riaps::ComponentBase::initRequestPort</definition>
        <argsstring>(const component_port_req &amp;)</argsstring>
        <name>initRequestPort</name>
        <param>
          <type>const <ref refid="structcomponent__port__req" kindref="compound">component_port_req</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a46db394edb7be5cda4dd379741303a59" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classriaps_1_1ports_1_1QueryPort" kindref="compound">ports::QueryPort</ref> *</type>
        <definition>const ports::QueryPort* riaps::ComponentBase::initQueryPort</definition>
        <argsstring>(const component_port_qry &amp;)</argsstring>
        <name>initQueryPort</name>
        <param>
          <type>const <ref refid="structcomponent__port__qry" kindref="compound">component_port_qry</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ad94a647f1acb829d777b0146c176d18e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classriaps_1_1ports_1_1AnswerPort" kindref="compound">ports::AnswerPort</ref> *</type>
        <definition>const ports::AnswerPort* riaps::ComponentBase::initAnswerPort</definition>
        <argsstring>(const component_port_ans &amp;)</argsstring>
        <name>initAnswerPort</name>
        <param>
          <type>const <ref refid="structcomponent__port__ans" kindref="compound">component_port_ans</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a5c526ee206372327d0665d2045416c2e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classriaps_1_1ports_1_1PeriodicTimer" kindref="compound">ports::PeriodicTimer</ref> *</type>
        <definition>const ports::PeriodicTimer* riaps::ComponentBase::initTimerPort</definition>
        <argsstring>(const component_port_tim &amp;)</argsstring>
        <name>initTimerPort</name>
        <param>
          <type>const <ref refid="structcomponent__port__tim" kindref="compound">component_port_tim</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1aca0f40ef399df17d6747527d4c8735ed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classriaps_1_1ports_1_1InsidePort" kindref="compound">ports::InsidePort</ref> *</type>
        <definition>const ports::InsidePort* riaps::ComponentBase::initInsidePort</definition>
        <argsstring>(const component_port_ins &amp;)</argsstring>
        <name>initInsidePort</name>
        <param>
          <type>const <ref refid="structcomponent__port__ins" kindref="compound">component_port_ins</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a89a583a2d4f9c205b1587001de02b6c1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool riaps::ComponentBase::IsLeader</definition>
        <argsstring>(const riaps::groups::Group *groupId)</argsstring>
        <name>IsLeader</name>
        <param>
          <type>const <ref refid="classriaps_1_1groups_1_1Group" kindref="compound">riaps::groups::Group</ref> *</type>
          <declname>groupId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the current component the leader? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>groupId</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1ade111838241fe1f76593b76523690227" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string riaps::ComponentBase::getTimerChannel</definition>
        <argsstring>()</argsstring>
        <name>getTimerChannel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a399a6ee6e1613ba53b6c3541b5af5de3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string riaps::ComponentBase::getOneShotTimerChannel</definition>
        <argsstring>()</argsstring>
        <name>getOneShotTimerChannel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classriaps_1_1ComponentBase_1a66d968148e8533be195915c888c6161a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classriaps_1_1groups_1_1Group" kindref="compound">riaps::groups::Group</ref> *</type>
        <definition>riaps::groups::Group* riaps::ComponentBase::getGroupById</definition>
        <argsstring>(const riaps::groups::GroupId &amp;groupId)</argsstring>
        <name>getGroupById</name>
        <param>
          <type>const <ref refid="structriaps_1_1groups_1_1GroupId" kindref="compound">riaps::groups::GroupId</ref> &amp;</type>
          <declname>groupId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="439" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Hello breathe! </para>    </detaileddescription>
    <location file="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" line="75" column="1" bodyfile="/home/istvan/work/riaps-core/include/componentmodel/r_componentbase.h" bodystart="75" bodyend="459"/>
    <listofallmembers>
      <member refid="classriaps_1_1ComponentBase_1a167a8b40968c51c63886dfd81327eb19" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>_logger</name></member>
      <member refid="classriaps_1_1ComponentBase_1aafebbfe00b068327fa4e07c38f4f0327" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>component_actor</name></member>
      <member refid="classriaps_1_1ComponentBase_1a807d2365f45912f4876c5e7875179976" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>ComponentBase</name></member>
      <member refid="classriaps_1_1ComponentBase_1a02d1b3f2853fb01007ce2744c1e4d413" prot="protected" virt="pure-virtual"><scope>riaps::ComponentBase</scope><name>DispatchInsideMessage</name></member>
      <member refid="classriaps_1_1ComponentBase_1a5cfa79fb1e682237609e575e33dd4e4a" prot="protected" virt="pure-virtual"><scope>riaps::ComponentBase</scope><name>DispatchMessage</name></member>
      <member refid="classriaps_1_1ComponentBase_1af1f0ce4f85bddd32f366d7221030d9a2" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetActor</name></member>
      <member refid="classriaps_1_1ComponentBase_1ae773c060ec98263994a6276c0af6fbfd" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetComponentName</name></member>
      <member refid="classriaps_1_1ComponentBase_1a5c6f9eed394133df7b2bcc284244d885" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetCompUuid</name></member>
      <member refid="classriaps_1_1ComponentBase_1a284bcd2d1352738b50b7fa9151a2b9e5" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetConfig</name></member>
      <member refid="classriaps_1_1ComponentBase_1a66d968148e8533be195915c888c6161a" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>getGroupById</name></member>
      <member refid="classriaps_1_1ComponentBase_1a2783cf06aa35c54408fad0ab9c4170df" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetGroupMemberCount</name></member>
      <member refid="classriaps_1_1ComponentBase_1a5a16d13c1e2992c8168b1d3a96bfe1a5" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetGroupMemberships</name></member>
      <member refid="classriaps_1_1ComponentBase_1ad31f67f564fd335b732c2b3cd7bec8cc" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetGroupMembershipsByType</name></member>
      <member refid="classriaps_1_1ComponentBase_1a3583281b6b53ba3cc0db44038b18eaf9" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetLeaderId</name></member>
      <member refid="classriaps_1_1ComponentBase_1a399a6ee6e1613ba53b6c3541b5af5de3" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>getOneShotTimerChannel</name></member>
      <member refid="classriaps_1_1ComponentBase_1ae313f3b72ac3f452d7542a8f3eadfb71" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetPortByName</name></member>
      <member refid="classriaps_1_1ComponentBase_1acce00aa6c2790bf437737e7524af267d" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetPublisherPortByName</name></member>
      <member refid="classriaps_1_1ComponentBase_1a8e2d775ceff674bc80db41c1b5e66a3c" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetQueryPortByName</name></member>
      <member refid="classriaps_1_1ComponentBase_1ac53007756f1092f26004467aa36a09ab" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetRequestPortByName</name></member>
      <member refid="classriaps_1_1ComponentBase_1a9af2413964c1145982dd408c1bb2139b" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetResponsePortByName</name></member>
      <member refid="classriaps_1_1ComponentBase_1a085bc25adc991b80c4365e75cdda363b" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetSubscriberPortByName</name></member>
      <member refid="classriaps_1_1ComponentBase_1ade111838241fe1f76593b76523690227" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>getTimerChannel</name></member>
      <member refid="classriaps_1_1ComponentBase_1aa74e2eb12f0be4a7f468b23a1010a0f6" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>GetZmqPipe</name></member>
      <member refid="classriaps_1_1ComponentBase_1a738008f0c731886f3a9b2645b771015b" prot="public" virt="virtual"><scope>riaps::ComponentBase</scope><name>handleCPULimit</name></member>
      <member refid="classriaps_1_1ComponentBase_1a30e47ae0321ef9bf073326c4cc531e90" prot="public" virt="virtual"><scope>riaps::ComponentBase</scope><name>handleMemLimit</name></member>
      <member refid="classriaps_1_1ComponentBase_1a643327991dad87c41eda933ce2cc6c77" prot="public" virt="virtual"><scope>riaps::ComponentBase</scope><name>handleNetLimit</name></member>
      <member refid="classriaps_1_1ComponentBase_1ad539465c3b1e402ab2df62b942aecda8" prot="public" virt="virtual"><scope>riaps::ComponentBase</scope><name>handleSpcLimit</name></member>
      <member refid="classriaps_1_1ComponentBase_1ad94a647f1acb829d777b0146c176d18e" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>initAnswerPort</name></member>
      <member refid="classriaps_1_1ComponentBase_1aca0f40ef399df17d6747527d4c8735ed" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>initInsidePort</name></member>
      <member refid="classriaps_1_1ComponentBase_1a8d9fd7808f30af53a994e5cbd1285b0c" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>initPublisherPort</name></member>
      <member refid="classriaps_1_1ComponentBase_1a46db394edb7be5cda4dd379741303a59" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>initQueryPort</name></member>
      <member refid="classriaps_1_1ComponentBase_1a9997969ca93eec03e04cdbbec7dd6046" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>initRequestPort</name></member>
      <member refid="classriaps_1_1ComponentBase_1aa9c5804d63e6a310bd7d9d21b6754cb4" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>initResponsePort</name></member>
      <member refid="classriaps_1_1ComponentBase_1a254aea48ea9997f733595c281c82cf11" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>initSubscriberPort</name></member>
      <member refid="classriaps_1_1ComponentBase_1a5c526ee206372327d0665d2045416c2e" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>initTimerPort</name></member>
      <member refid="classriaps_1_1ComponentBase_1a23bdbf84dd8012a2eaaffd62b2e9d551" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>IsLeader</name></member>
      <member refid="classriaps_1_1ComponentBase_1a89a583a2d4f9c205b1587001de02b6c1" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>IsLeader</name></member>
      <member refid="classriaps_1_1ComponentBase_1aa613af7e71509122c7f70ecc0fc0d63f" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>IsLeaderAvailable</name></member>
      <member refid="classriaps_1_1ComponentBase_1a195e4e48e2e3a85b95c408847abd1442" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>IsMemberOf</name></member>
      <member refid="classriaps_1_1ComponentBase_1adf51a105a2ecac48bf245a1e904a0f96" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>JoinGroup</name></member>
      <member refid="classriaps_1_1ComponentBase_1ab4d2245d1e3a3ab67fd06854f8546c91" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>JoinGroup</name></member>
      <member refid="classriaps_1_1ComponentBase_1ab74b71765a6823445a15b54a8d8a5265" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>LeaveGroup</name></member>
      <member refid="classriaps_1_1ComponentBase_1af9aaa1fbba86b7d6a9bd67ea89839de2" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>LeaveGroup</name></member>
      <member refid="classriaps_1_1ComponentBase_1a0c49705c29a07525f84718b82a6ec170" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>m_actor</name></member>
      <member refid="classriaps_1_1ComponentBase_1ae39e42aa99f0c0b3a813a3b37eccce08" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>m_componentUuid</name></member>
      <member refid="classriaps_1_1ComponentBase_1aca1955504e7d073c603a665e2b8dafab" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>m_configuration</name></member>
      <member refid="classriaps_1_1ComponentBase_1a7b074ceeaee539492dec35cc4c0eed06" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>m_groups</name></member>
      <member refid="classriaps_1_1ComponentBase_1a965ec24bccccbe5aa39d795c19f7cd0d" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>m_ports</name></member>
      <member refid="classriaps_1_1ComponentBase_1afbffcd9f3ae03334b39cfb0df8e484e6" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>m_scheduledAction</name></member>
      <member refid="classriaps_1_1ComponentBase_1a3e8b8a1bb12af9c62b8df8051591d16f" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>m_timerCounter</name></member>
      <member refid="classriaps_1_1ComponentBase_1ae9d02407e1fc0c8892f71eb5c47424d7" prot="private" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>m_zactorComponent</name></member>
      <member refid="classriaps_1_1ComponentBase_1a9e71ae64b299b0f359c77ee4d5d18798" prot="protected" virt="virtual"><scope>riaps::ComponentBase</scope><name>OnActionPropose</name></member>
      <member refid="classriaps_1_1ComponentBase_1a095ef8cb7e0a013cacd9ae9688c7b4ae" prot="protected" virt="virtual"><scope>riaps::ComponentBase</scope><name>OnAnnounce</name></member>
      <member refid="classriaps_1_1ComponentBase_1af9cdff1b845fda983e088f76607a03f8" prot="protected" virt="virtual"><scope>riaps::ComponentBase</scope><name>OnGroupMessage</name></member>
      <member refid="classriaps_1_1ComponentBase_1a92b7385a162b5f9ff58600206a9cd2fe" prot="protected" virt="virtual"><scope>riaps::ComponentBase</scope><name>OnMessageFromLeader</name></member>
      <member refid="classriaps_1_1ComponentBase_1a120a9102d74c30bbe4042707989b442b" prot="protected" virt="virtual"><scope>riaps::ComponentBase</scope><name>OnMessageToLeader</name></member>
      <member refid="classriaps_1_1ComponentBase_1ac897170e7561754dc3d0bd693dfa0bc6" prot="protected" virt="virtual"><scope>riaps::ComponentBase</scope><name>OnPropose</name></member>
      <member refid="classriaps_1_1ComponentBase_1a06157bbf44d7dcdaaa8e5ce4e6dbb9ae" prot="protected" virt="virtual"><scope>riaps::ComponentBase</scope><name>OnScheduledTimer</name></member>
      <member refid="classriaps_1_1ComponentBase_1aebedead9e04918bd0ebbcb6dffbd30c6" prot="public" virt="virtual"><scope>riaps::ComponentBase</scope><name>PrintMessageOnPort</name></member>
      <member refid="classriaps_1_1ComponentBase_1a0fcc1cb65c6c02b995ea0bdd7235ed55" prot="public" virt="virtual"><scope>riaps::ComponentBase</scope><name>PrintParameters</name></member>
      <member refid="classriaps_1_1ComponentBase_1abdba9d81bca931766f906f8b3c4ea9f8" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>ProposeAction</name></member>
      <member refid="classriaps_1_1ComponentBase_1a35155bce7e5e198d66e899e524c08174" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>ScheduleAbsTimer</name></member>
      <member refid="classriaps_1_1ComponentBase_1ad9e46da215b2ef0680688313a818fade" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>ScheduleAction</name></member>
      <member refid="classriaps_1_1ComponentBase_1a6a9c2ef9faaf6fe99c411231266c3e75" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>SendGroupMessage</name></member>
      <member refid="classriaps_1_1ComponentBase_1a6c3a4672997bcddf3f78ac033fcfd186" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>SendGroupMessage</name></member>
      <member refid="classriaps_1_1ComponentBase_1a779f11120361476d009644f02843b022" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>SendLeaderMessage</name></member>
      <member refid="classriaps_1_1ComponentBase_1a6186b350d97b9ea07a442ad5ab6ab654" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>SendMessageOnPort</name></member>
      <member refid="classriaps_1_1ComponentBase_1a4d1a2badbf5bacc002d47237b2fe7164" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>SendMessageOnPort</name></member>
      <member refid="classriaps_1_1ComponentBase_1a6e6455294e93f3eb0cc9a9dfac692ede" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>SendMessageOnPort</name></member>
      <member refid="classriaps_1_1ComponentBase_1a7fc3b4459634bd931e85e47baecf6f98" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>SendMessageOnPort</name></member>
      <member refid="classriaps_1_1ComponentBase_1af576f02474a181c7ec62d65414b989ff" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>SendMessageToLeader</name></member>
      <member refid="classriaps_1_1ComponentBase_1a4bdf5a6b3d5aea8663c6ffb29544501b" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>SendPropose</name></member>
      <member refid="classriaps_1_1ComponentBase_1a405a97d22b99a663de5138017a7519d6" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>SendVote</name></member>
      <member refid="classriaps_1_1ComponentBase_1a4f2ad7985e658e8edef883ca5be8f5b3" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>SetDebugLevel</name></member>
      <member refid="classriaps_1_1ComponentBase_1a1150d495462966938ebdb241f839e589" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>StopComponent</name></member>
      <member refid="classriaps_1_1ComponentBase_1ac7fb167cf2a18e680c8620016729aa3d" prot="public" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>UpdateGroup</name></member>
      <member refid="classriaps_1_1ComponentBase_1a9ea635a103323981877f8944e32a5c59" prot="protected" virt="non-virtual"><scope>riaps::ComponentBase</scope><name>WaitUntil</name></member>
      <member refid="classriaps_1_1ComponentBase_1a4fb4d730c6ea4b0288acd9d68e246436" prot="public" virt="virtual"><scope>riaps::ComponentBase</scope><name>~ComponentBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
