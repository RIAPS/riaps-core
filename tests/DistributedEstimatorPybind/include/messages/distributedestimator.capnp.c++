// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: distributedestimator.capnp

#include "distributedestimator.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<34> b_901eabe0b06f4fa2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    162,  79, 111, 176, 224, 171,  30, 144,
     27,   0,   0,   0,   1,   0,   0,   0,
     28, 202,  24,  16, 161,  51, 182, 191,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116, 114, 105,  98, 117,
    116, 101, 100, 101, 115, 116, 105, 109,
     97, 116, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 110, 115, 111,
    114,  82, 101,  97, 100, 121,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 115, 103,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_901eabe0b06f4fa2 = b_901eabe0b06f4fa2.words;
#if !CAPNP_LITE
static const uint16_t m_901eabe0b06f4fa2[] = {0};
static const uint16_t i_901eabe0b06f4fa2[] = {0};
const ::capnp::_::RawSchema s_901eabe0b06f4fa2 = {
  0x901eabe0b06f4fa2, b_901eabe0b06f4fa2.words, 34, nullptr, m_901eabe0b06f4fa2,
  0, 1, i_901eabe0b06f4fa2, nullptr, nullptr, { &s_901eabe0b06f4fa2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ede2412e0dd4c79f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    159, 199, 212,  13,  46,  65, 226, 237,
     27,   0,   0,   0,   1,   0,   0,   0,
     28, 202,  24,  16, 161,  51, 182, 191,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116, 114, 105,  98, 117,
    116, 101, 100, 101, 115, 116, 105, 109,
     97, 116, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 110, 115, 111,
    114,  86,  97, 108, 117, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 115, 103,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ede2412e0dd4c79f = b_ede2412e0dd4c79f.words;
#if !CAPNP_LITE
static const uint16_t m_ede2412e0dd4c79f[] = {0};
static const uint16_t i_ede2412e0dd4c79f[] = {0};
const ::capnp::_::RawSchema s_ede2412e0dd4c79f = {
  0xede2412e0dd4c79f, b_ede2412e0dd4c79f.words, 34, nullptr, m_ede2412e0dd4c79f,
  0, 1, i_ede2412e0dd4c79f, nullptr, nullptr, { &s_ede2412e0dd4c79f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_85af38b1afa32e32 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     50,  46, 163, 175, 177,  56, 175, 133,
     27,   0,   0,   0,   1,   0,   0,   0,
     28, 202,  24,  16, 161,  51, 182, 191,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116, 114, 105,  98, 117,
    116, 101, 100, 101, 115, 116, 105, 109,
     97, 116, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 110, 115, 111,
    114,  81, 117, 101, 114, 121,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 115, 103,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_85af38b1afa32e32 = b_85af38b1afa32e32.words;
#if !CAPNP_LITE
static const uint16_t m_85af38b1afa32e32[] = {0};
static const uint16_t i_85af38b1afa32e32[] = {0};
const ::capnp::_::RawSchema s_85af38b1afa32e32 = {
  0x85af38b1afa32e32, b_85af38b1afa32e32.words, 34, nullptr, m_85af38b1afa32e32,
  0, 1, i_85af38b1afa32e32, nullptr, nullptr, { &s_85af38b1afa32e32, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_a2bfa6930feff039 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     57, 240, 239,  15, 147, 166, 191, 162,
     27,   0,   0,   0,   1,   0,   0,   0,
     28, 202,  24,  16, 161,  51, 182, 191,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116, 114, 105,  98, 117,
    116, 101, 100, 101, 115, 116, 105, 109,
     97, 116, 111, 114,  46,  99,  97, 112,
    110, 112,  58,  69, 115, 116, 105, 109,
     97, 116, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
    109, 115, 103,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a2bfa6930feff039 = b_a2bfa6930feff039.words;
#if !CAPNP_LITE
static const uint16_t m_a2bfa6930feff039[] = {0, 1};
static const uint16_t i_a2bfa6930feff039[] = {0, 1};
const ::capnp::_::RawSchema s_a2bfa6930feff039 = {
  0xa2bfa6930feff039, b_a2bfa6930feff039.words, 53, nullptr, m_a2bfa6930feff039,
  0, 2, i_a2bfa6930feff039, nullptr, nullptr, { &s_a2bfa6930feff039, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace distributedestimator {
namespace messages {

// SensorReady
constexpr uint16_t SensorReady::_capnpPrivate::dataWordSize;
constexpr uint16_t SensorReady::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SensorReady::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SensorReady::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// SensorValue
constexpr uint16_t SensorValue::_capnpPrivate::dataWordSize;
constexpr uint16_t SensorValue::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SensorValue::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SensorValue::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// SensorQuery
constexpr uint16_t SensorQuery::_capnpPrivate::dataWordSize;
constexpr uint16_t SensorQuery::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SensorQuery::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SensorQuery::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Estimate
constexpr uint16_t Estimate::_capnpPrivate::dataWordSize;
constexpr uint16_t Estimate::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Estimate::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Estimate::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

