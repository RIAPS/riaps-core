//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#ifndef RIAPS_FW_TEMPSENSOR_H
#define RIAPS_FW_TEMPSENSOR_H

#include "base/TempSensorBase.h"

namespace weathermonitor {
    namespace components {

        class TempSensor : public TempSensorBase {

        public:

            TempSensor(_component_conf_j &config, riaps::Actor &actor);		

            virtual void OnClock(riaps::ports::PortBase *port);
            
            
			virtual void OnOneShotTimer(const std::string& timerid);
			
            virtual ~TempSensor();


        private:
            std::unique_ptr<std::uniform_real_distribution<double>> unif;
            std::default_random_engine re;
			
		private:
			double temperature;
        };
    }
}

extern "C" riaps::ComponentBase* create_component(_component_conf_j&, riaps::Actor& actor);
extern "C" void destroy_component(riaps::ComponentBase*);


#endif //RIAPS_FW_TEMPSENSOR_H		
