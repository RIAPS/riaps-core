// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: testDevices.capnp

#include "testDevices.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<33> b_e2619f9c182bd909 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      9, 217,  43,  24, 156, 159,  97, 226,
     18,   0,   0,   0,   1,   0,   0,   0,
     44, 203,  24,  16, 161,  51, 182, 191,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  68, 101, 118, 105,
     99, 101, 115,  46,  99,  97, 112, 110,
    112,  58,  80, 117,  98,  68, 101, 118,
    105,  99, 101,  68,  97, 116,  97,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 115, 103,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e2619f9c182bd909 = b_e2619f9c182bd909.words;
#if !CAPNP_LITE
static const uint16_t m_e2619f9c182bd909[] = {0};
static const uint16_t i_e2619f9c182bd909[] = {0};
const ::capnp::_::RawSchema s_e2619f9c182bd909 = {
  0xe2619f9c182bd909, b_e2619f9c182bd909.words, 33, nullptr, m_e2619f9c182bd909,
  0, 1, i_e2619f9c182bd909, nullptr, nullptr, { &s_e2619f9c182bd909, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_da00d102f329f3be = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190, 243,  41, 243,   2, 209,   0, 218,
     18,   0,   0,   0,   1,   0,   0,   0,
     44, 203,  24,  16, 161,  51, 182, 191,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  68, 101, 118, 105,
     99, 101, 115,  46,  99,  97, 112, 110,
    112,  58,  83, 117,  98,  68, 101, 118,
    105,  99, 101,  68,  97, 116,  97,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 115, 103,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da00d102f329f3be = b_da00d102f329f3be.words;
#if !CAPNP_LITE
static const uint16_t m_da00d102f329f3be[] = {0};
static const uint16_t i_da00d102f329f3be[] = {0};
const ::capnp::_::RawSchema s_da00d102f329f3be = {
  0xda00d102f329f3be, b_da00d102f329f3be.words, 33, nullptr, m_da00d102f329f3be,
  0, 1, i_da00d102f329f3be, nullptr, nullptr, { &s_da00d102f329f3be, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_8cbef6d3c17d30e6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230,  48, 125, 193, 211, 246, 190, 140,
     18,   0,   0,   0,   1,   0,   0,   0,
     44, 203,  24,  16, 161,  51, 182, 191,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 115, 116,  68, 101, 118, 105,
     99, 101, 115,  46,  99,  97, 112, 110,
    112,  58,  67, 111, 109, 112, 111, 110,
    101, 110, 116,  68,  97, 116,  97,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 115, 103,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8cbef6d3c17d30e6 = b_8cbef6d3c17d30e6.words;
#if !CAPNP_LITE
static const uint16_t m_8cbef6d3c17d30e6[] = {0};
static const uint16_t i_8cbef6d3c17d30e6[] = {0};
const ::capnp::_::RawSchema s_8cbef6d3c17d30e6 = {
  0x8cbef6d3c17d30e6, b_8cbef6d3c17d30e6.words, 33, nullptr, m_8cbef6d3c17d30e6,
  0, 1, i_8cbef6d3c17d30e6, nullptr, nullptr, { &s_8cbef6d3c17d30e6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace testdevices {
namespace messages {

// PubDeviceData
#ifndef _MSC_VER
constexpr uint16_t PubDeviceData::_capnpPrivate::dataWordSize;
constexpr uint16_t PubDeviceData::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind PubDeviceData::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* PubDeviceData::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* PubDeviceData::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// SubDeviceData
#ifndef _MSC_VER
constexpr uint16_t SubDeviceData::_capnpPrivate::dataWordSize;
constexpr uint16_t SubDeviceData::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind SubDeviceData::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SubDeviceData::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* SubDeviceData::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// ComponentData
#ifndef _MSC_VER
constexpr uint16_t ComponentData::_capnpPrivate::dataWordSize;
constexpr uint16_t ComponentData::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind ComponentData::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ComponentData::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* ComponentData::_capnpPrivate::brand;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

