// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: DummyT.capnp

#include "DummyT.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<32> b_dc4700d5546d44ae = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    174,  68, 109,  84, 213,   0,  71, 220,
     13,   0,   0,   0,   1,   0,   0,   0,
     31,  95, 185,   2, 129, 187, 211, 136,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68, 117, 109, 109, 121,  84,  46,  99,
     97, 112, 110, 112,  58,  68, 117, 109,
    109, 121,  84,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    109, 115, 103,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dc4700d5546d44ae = b_dc4700d5546d44ae.words;
#if !CAPNP_LITE
static const uint16_t m_dc4700d5546d44ae[] = {0};
static const uint16_t i_dc4700d5546d44ae[] = {0};
const ::capnp::_::RawSchema s_dc4700d5546d44ae = {
  0xdc4700d5546d44ae, b_dc4700d5546d44ae.words, 32, nullptr, m_dc4700d5546d44ae,
  0, 1, i_dc4700d5546d44ae, nullptr, nullptr, { &s_dc4700d5546d44ae, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// DummyT
#ifndef _MSC_VER
constexpr uint16_t DummyT::_capnpPrivate::dataWordSize;
constexpr uint16_t DummyT::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind DummyT::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DummyT::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* DummyT::_capnpPrivate::brand;
#endif  // !CAPNP_LITE



