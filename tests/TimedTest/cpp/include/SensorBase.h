//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//

#ifndef RIAPS_CORE_SENSOR_H
#define RIAPS_CORE_SENSOR_H

#include "componentmodel/r_componentbase.h"
#include "DummyT.capnp.h"

// Name of the ports from the model file
#define PORT_TIMER_CLOCK "clock"
#define PORT_PUB_READY "ready"
#define PORT_REP_REQUEST "request"

namespace timedtest {
   namespace components {
      
      class SensorBase : public riaps::ComponentBase {
         
         public:
         SensorBase(_component_conf &config, riaps::Actor &actor);
         
         virtual void OnClock(riaps::ports::PortBase *port)=0;
         
         virtual bool SendReady(capnp::MallocMessageBuilder& messageBuilder,
         DummyT::Builder& message);
         
         virtual void OnRequest(const DummyT::Reader &message,
         riaps::ports::PortBase *port)=0;
         
         virtual bool SendRequest(capnp::MallocMessageBuilder& messageBuilder,
         DummyT::Builder& message);
         
         virtual ~SensorBase();
         protected:
         virtual void DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port,std::shared_ptr<riaps::MessageParams> params=nullptr );
         virtual void DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port);
      };
   }
}
#endif //RIAPS_CORE_SENSOR_H
