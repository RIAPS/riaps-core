//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#include <FilterBase.h>

namespace timedtest {
   namespace components {
      
      FilterBase::FilterBase(_component_conf &config, riaps::Actor &actor) : ComponentBase(config, actor) {
         
      }
      
      void FilterBase::DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port,std::shared_ptr<riaps::MessageParams> params) {
         auto portName = port->GetPortName();
         if (portName == PORT_SUB_READY) {
            DummyT::Reader Ready =
            capnpreader->getRoot<DummyT>();
            OnReady(Ready, port);
         }
         
         
         
      }
      
      void FilterBase::DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port) {
         //empty the header
      }
      
      bool FilterBase::SendQuery(capnp::MallocMessageBuilder &messageBuilder,
      DummyT::Builder &message) {
         //std::cout<< "FilterBase::SendQuery()"<< std::endl;
         return SendMessageOnPort(messageBuilder, PORT_REQ_QUERY);
      }
      
      bool FilterBase::RecvQuery(DummyT::Reader &message) {
         //std::cout<< "FilterBase::RecvQuery()"<< std::endl;
         auto port = GetRequestPortByName(PORT_REQ_QUERY);
         if (port == NULL) return false;
         
         capnp::FlatArrayMessageReader* messageReader;
         
         if (port->Recv(&messageReader)){
            message = messageReader->getRoot<DummyT>();
            return true;
         }
         return false;
      }
      bool FilterBase::SendEstimate(capnp::MallocMessageBuilder &messageBuilder,
      DummyT::Builder &message) {
         std::cout<< "FilterBase::SendEstimate()"<< std::endl;
         return SendMessageOnPort(messageBuilder, PORT_PUB_ESTIMATE);
      }
      
      FilterBase::~FilterBase() {
         
      }
   }
}
