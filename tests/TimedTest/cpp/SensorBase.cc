//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#include <SensorBase.h>

namespace timedtest {
   namespace components {
      
      SensorBase::SensorBase(_component_conf &config, riaps::Actor &actor) : ComponentBase(config, actor) {
         
      }
      
      void SensorBase::DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port,std::shared_ptr<riaps::MessageParams> params) {
         auto portName = port->GetPortName();
         if (portName == PORT_TIMER_CLOCK) {
            OnClock(port);
         }
         
         
         if (portName == PORT_REP_REQUEST) {
            auto reader = capnpreader->getRoot<DummyT>();
            OnRequest(reader, port);
         }
         
      }
      
      void SensorBase::DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port) {
         //empty the header
      }
      
      bool SensorBase::SendReady(capnp::MallocMessageBuilder &messageBuilder,
      DummyT::Builder &message) {
         //std::cout<< "SensorBase::SendReady()"<< std::endl;
         return SendMessageOnPort(messageBuilder, PORT_PUB_READY);
      }
      bool SensorBase::SendRequest(capnp::MallocMessageBuilder& messageBuilder,
      DummyT::Builder& message) {
        // std::cout<< "SensorBase::SendRequest()"<< std::endl;
         return SendMessageOnPort(messageBuilder, PORT_REP_REQUEST);
      }
      
      SensorBase::~SensorBase() {
         
      }
   }
}
