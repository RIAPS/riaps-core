//
// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
//
#ifndef RIAPS_FW_STIMER_H
#define RIAPS_FW_STIMER_H

#include "STimerBase.h"
#include <array>

namespace statictimer {
   namespace components {
      
      class STimer : public STimerBase {
         
         public:
         
         STimer(_component_conf &config, riaps::Actor &actor);
         
         virtual void OnClock(riaps::ports::PortBase *port);

          void OnScheduledTimer(const uint64_t timerId);

          virtual void OnPing(const Msg::Reader &message, riaps::ports::PortBase *port);
         
         void OnGroupMessage(const riaps::groups::GroupId& groupId, capnp::FlatArrayMessageReader& capnpreader, riaps::ports::PortBase* port);
         
         virtual ~STimer();

      private:
          bool _started;
          std::unordered_map<uint64_t, timespec> _timers;
          uint64_t _counter;
          std::array<std::string, 300> _logs;

          std::chrono::steady_clock::time_point _startTime;
          std::chrono::steady_clock::time_point _endTime;
          uint64_t                  _arrivedPings;
      };
   }
}

extern "C" riaps::ComponentBase* create_component(_component_conf&, riaps::Actor& actor);
extern "C" void destroy_component(riaps::ComponentBase*);


#endif //RIAPS_FW_STIMER_H
