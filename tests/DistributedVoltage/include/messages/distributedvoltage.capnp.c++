// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: distributedvoltage.capnp

#include "distributedvoltage.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<49> b_b1e60dc193f7d20d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     13, 210, 247, 147, 193,  13, 230, 177,
     25,   0,   0,   0,   1,   0,   2,   0,
    172, 111, 108, 147, 204, 208,  11, 199,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116, 114, 105,  98, 117,
    116, 101, 100, 118, 111, 108, 116,  97,
    103, 101,  46,  99,  97, 112, 110, 112,
     58,  84, 105, 109, 101, 115, 112, 101,
     99,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    116, 118,  83, 112, 101,  99,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 118,  78, 115, 112, 101,  99,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b1e60dc193f7d20d = b_b1e60dc193f7d20d.words;
#if !CAPNP_LITE
static const uint16_t m_b1e60dc193f7d20d[] = {1, 0};
static const uint16_t i_b1e60dc193f7d20d[] = {0, 1};
const ::capnp::_::RawSchema s_b1e60dc193f7d20d = {
  0xb1e60dc193f7d20d, b_b1e60dc193f7d20d.words, 49, nullptr, m_b1e60dc193f7d20d,
  0, 2, i_b1e60dc193f7d20d, nullptr, nullptr, { &s_b1e60dc193f7d20d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9359b9be02db3884 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    132,  56, 219,   2, 190, 185,  89, 147,
     25,   0,   0,   0,   1,   0,   1,   0,
    172, 111, 108, 147, 204, 208,  11, 199,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115, 116, 114, 105,  98, 117,
    116, 101, 100, 118, 111, 108, 116,  97,
    103, 101,  46,  99,  97, 112, 110, 112,
     58,  86, 111, 108, 116,  97, 103, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9359b9be02db3884 = b_9359b9be02db3884.words;
#if !CAPNP_LITE
static const uint16_t m_9359b9be02db3884[] = {0};
static const uint16_t i_9359b9be02db3884[] = {0};
const ::capnp::_::RawSchema s_9359b9be02db3884 = {
  0x9359b9be02db3884, b_9359b9be02db3884.words, 34, nullptr, m_9359b9be02db3884,
  0, 1, i_9359b9be02db3884, nullptr, nullptr, { &s_9359b9be02db3884, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace distributedvoltage {
namespace messages {

// Timespec
constexpr uint16_t Timespec::_capnpPrivate::dataWordSize;
constexpr uint16_t Timespec::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Timespec::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Timespec::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Voltage
constexpr uint16_t Voltage::_capnpPrivate::dataWordSize;
constexpr uint16_t Voltage::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Voltage::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Voltage::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace

